{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"FastAPI Handbook","text":"<p>\u6b61\u8fce\u4f86\u5230 FastAPI Handbook\uff01\u9019\u662f\u4e00\u500b\u5168\u9762\u7684\u6307\u5357\uff0c\u65e8\u5728\u5e6b\u52a9\u958b\u767c\u8005\u638c\u63e1 FastAPI \u6846\u67b6\uff0c\u5f9e\u57fa\u790e\u6982\u5ff5\u5230\u9ad8\u7d1a\u61c9\u7528\u3002</p>"},{"location":"#_1","title":"\u95dc\u65bc\u672c\u624b\u518a","text":"<p>FastAPI \u662f\u4e00\u500b\u73fe\u4ee3\u3001\u9ad8\u6548\u80fd\u7684 Python Web \u6846\u67b6\uff0c\u5c08\u70ba API \u958b\u767c\u800c\u8a2d\u8a08\u3002\u672c\u624b\u518a\u6db5\u84cb\u4e86\u4f7f\u7528 FastAPI \u9032\u884c\u958b\u767c\u7684\u5404\u500b\u65b9\u9762\uff0c\u5305\u62ec\u4f9d\u8cf4\u6ce8\u5165\u3001OpenAPI \u6574\u5408\u3001\u4e2d\u9593\u4ef6\u5be6\u73fe\u3001\u932f\u8aa4\u8655\u7406\u4ee5\u53ca\u6e2c\u8a66\u7b56\u7565\u3002</p>"},{"location":"#_2","title":"\u4e3b\u8981\u5167\u5bb9","text":"<p>\u672c\u624b\u518a\u5206\u70ba\u4ee5\u4e0b\u5e7e\u500b\u4e3b\u8981\u90e8\u5206\uff1a</p>"},{"location":"#dependency-injection","title":"\u4f9d\u8cf4\u6ce8\u5165 (Dependency Injection)","text":"<p>\u4f9d\u8cf4\u6ce8\u5165\u662f FastAPI \u7684\u6838\u5fc3\u529f\u80fd\u4e4b\u4e00\uff0c\u5b83\u4f7f\u4ee3\u78bc\u66f4\u52a0\u6a21\u7d44\u5316\u3001\u53ef\u6e2c\u8a66\u4e14\u6613\u65bc\u7dad\u8b77\u3002</p> <ul> <li>\u57fa\u672c\u6982\u5ff5\u8207\u539f\u7406</li> <li>FastAPI \u4e2d\u7684\u4f9d\u8cf4\u6ce8\u5165\u5be6\u73fe</li> <li>\u8a2d\u8a08\u6a21\u5f0f\u8207\u6700\u4f73\u5be6\u8e10</li> <li>\u5728\u8a8d\u8b49\u3001\u6578\u64da\u5eab\u7ba1\u7406\u548c\u5916\u90e8\u670d\u52d9\u4e2d\u7684\u61c9\u7528</li> </ul>"},{"location":"#openapi","title":"OpenAPI \u6574\u5408","text":"<p>FastAPI \u8207 OpenAPI \u898f\u7bc4\u7684\u7121\u7e2b\u6574\u5408\uff0c\u70ba API \u6587\u6a94\u548c\u5ba2\u6236\u7aef\u751f\u6210\u63d0\u4f9b\u4e86\u5f37\u5927\u652f\u6301\u3002</p> <ul> <li>OpenAPI \u57fa\u790e\u77e5\u8b58</li> <li>Pydantic \u6a21\u578b\u8207 OpenAPI \u7d50\u69cb</li> <li>API \u6587\u6a94\u751f\u6210\u8207\u5b9a\u5236</li> <li>\u9ad8\u7d1a\u529f\u80fd\u8207\u6545\u969c\u6392\u9664</li> </ul>"},{"location":"#middleware","title":"\u4e2d\u9593\u4ef6 (Middleware)","text":"<p>\u4e2d\u9593\u4ef6\u5141\u8a31\u5728\u8acb\u6c42\u8655\u7406\u524d\u5f8c\u57f7\u884c\u4ee3\u78bc\uff0c\u5be6\u73fe\u6a6b\u5207\u95dc\u6ce8\u9ede\u3002</p> <ul> <li>\u4e2d\u9593\u4ef6\u57fa\u790e\u6982\u5ff5</li> <li>\u5be6\u73fe\u81ea\u5b9a\u7fa9\u4e2d\u9593\u4ef6</li> <li>\u5e38\u898b\u4f7f\u7528\u5834\u666f</li> <li>\u9ad8\u7d1a\u6280\u5de7\u8207\u6700\u4f73\u5be6\u8e10</li> </ul>"},{"location":"#error-handling","title":"\u932f\u8aa4\u8655\u7406 (Error Handling)","text":"<p>\u5065\u58ef\u7684\u932f\u8aa4\u8655\u7406\u5c0d\u65bc\u69cb\u5efa\u53ef\u9760\u7684 API \u81f3\u95dc\u91cd\u8981\u3002</p> <ul> <li>\u57fa\u672c\u932f\u8aa4\u8655\u7406\u6a5f\u5236</li> <li>\u5167\u5efa\u8207\u81ea\u5b9a\u7fa9\u7570\u5e38</li> <li>\u5168\u5c40\u932f\u8aa4\u8655\u7406\u7b56\u7565</li> <li>API \u8def\u7531\u4e2d\u7684\u932f\u8aa4\u8655\u7406</li> </ul>"},{"location":"#testing","title":"\u6e2c\u8a66 (Testing)","text":"<p>\u5168\u9762\u7684\u6e2c\u8a66\u7b56\u7565\u78ba\u4fdd API \u7684\u8cea\u91cf\u548c\u53ef\u9760\u6027\u3002</p> <ul> <li>\u55ae\u5143\u6e2c\u8a66\u8207\u6574\u5408\u6e2c\u8a66</li> <li>\u6578\u64da\u5eab\u6e2c\u8a66\u7b56\u7565</li> <li>\u975e\u540c\u6b65\u4ee3\u78bc\u6e2c\u8a66</li> <li>\u6a21\u64ec\u8207\u4f9d\u8cf4\u6ce8\u5165\u6e2c\u8a66</li> <li>\u6e2c\u8a66\u6700\u4f73\u5be6\u8e10</li> </ul>"},{"location":"#_3","title":"\u4f7f\u7528\u672c\u624b\u518a","text":"<p>\u672c\u624b\u518a\u63a1\u7528\u5faa\u5e8f\u6f38\u9032\u7684\u65b9\u5f0f\uff0c\u5f9e\u57fa\u790e\u6982\u5ff5\u5230\u9ad8\u7d1a\u61c9\u7528\uff0c\u9069\u5408\u4e0d\u540c\u7a0b\u5ea6\u7684\u958b\u767c\u8005\uff1a</p> <ul> <li>\u521d\u5b78\u8005\uff1a\u5f9e\u5404\u7ae0\u7bc0\u7684\u4ecb\u7d39\u90e8\u5206\u958b\u59cb\uff0c\u4e86\u89e3\u57fa\u672c\u6982\u5ff5</li> <li>\u4e2d\u7d1a\u958b\u767c\u8005\uff1a\u6df1\u5165\u7814\u7a76\u5be6\u73fe\u7d30\u7bc0\u548c\u4f7f\u7528\u6848\u4f8b</li> <li>\u9ad8\u7d1a\u958b\u767c\u8005\uff1a\u95dc\u6ce8\u9ad8\u7d1a\u4e3b\u984c\u3001\u6700\u4f73\u5be6\u8e10\u548c\u6027\u80fd\u512a\u5316</li> </ul>"},{"location":"#_4","title":"\u8cc7\u6e90","text":"<ul> <li>FastAPI \u5b98\u65b9\u6587\u6a94</li> <li>Starlette \u6587\u6a94</li> <li>Pydantic \u6587\u6a94</li> </ul>"},{"location":"dependency-injection/01-introduction/","title":"\u6982\u8ff0\u8207\u539f\u5247","text":""},{"location":"dependency-injection/01-introduction/#_2","title":"\u6982\u8ff0","text":"<p>\u4f9d\u8cf4\u6ce8\u5165\uff08Dependency Injection\uff0c\u7c21\u7a31 DI\uff09\u662f\u4e00\u7a2e\u91cd\u8981\u7684\u8a2d\u8a08\u6a21\u5f0f\uff0c\u5176\u6838\u5fc3\u7406\u5ff5\u5728\u65bc\u5c07\u5c0d\u8c61\u9593\u7684\u4f9d\u8cf4\u95dc\u4fc2\u4ea4\u7531\u5916\u90e8\u7cfb\u7d71\u7ba1\u7406\uff0c\u800c\u975e\u7531\u5c0d\u8c61\u81ea\u8eab\u9032\u884c\u76f4\u63a5\u63a7\u5236\u3002\u6b64\u6a21\u5f0f\u65e8\u5728\u63d0\u5347\u4ee3\u78bc\u7684\u9748\u6d3b\u6027\u8207\u53ef\u7dad\u8b77\u6027\uff0c\u4e26\u4fc3\u9032\u9ad8\u6548\u7684\u8cc7\u6e90\u7ba1\u7406\u3002</p>"},{"location":"dependency-injection/01-introduction/#_3","title":"\u4f9d\u8cf4\u6ce8\u5165\u7684\u4e3b\u8981\u512a\u52e2","text":"<ol> <li>\u89e3\u8026\u6027\uff1a\u6709\u6548\u964d\u4f4e\u6a21\u584a\u9593\u7684\u8026\u5408\uff0c\u5f9e\u800c\u4f7f\u7cfb\u7d71\u66f4\u6613\u65bc\u64f4\u5c55\u8207\u7dad\u8b77</li> <li>\u9748\u6d3b\u6027\uff1a\u652f\u6301\u4f9d\u8cf4\u66ff\u63db\uff0c\u4f8b\u5982\u5728\u6e2c\u8a66\u74b0\u5883\u4e2d\u4f7f\u7528 Mock \u5c0d\u8c61\u4ee5\u6a21\u64ec\u884c\u70ba</li> <li>\u53ef\u6e2c\u8a66\u6027\uff1a\u4f9d\u8cf4\u6ce8\u5165\u4f7f\u55ae\u5143\u6e2c\u8a66\u66f4\u52a0\u9ad8\u6548\uff0c\u958b\u767c\u8005\u53ef\u4ee5\u8f15\u9b06\u9694\u96e2\u4f9d\u8cf4\u9032\u884c\u6e2c\u8a66</li> <li>\u96c6\u4e2d\u5316\u8cc7\u6e90\u7ba1\u7406\uff1a\u901a\u904e\u5916\u90e8\u7cfb\u7d71\u7d71\u4e00\u7ba1\u7406\u8cc7\u6e90\u7684\u521d\u59cb\u5316\u8207\u92b7\u6bc0\uff0c\u907f\u514d\u8cc7\u6e90\u6cc4\u6f0f\u53ca\u91cd\u8907\u5206\u914d</li> </ol>"},{"location":"dependency-injection/01-introduction/#_4","title":"\u61c9\u7528\u5834\u666f","text":"<p>\u4f9d\u8cf4\u6ce8\u5165\u5728\u4ee5\u4e0b\u5834\u666f\u4e2d\u5177\u6709\u5ee3\u6cdb\u61c9\u7528\uff1a</p> <ul> <li>\u8a8d\u8b49\u8207\u6388\u6b0a\uff1a\u5be6\u73fe\u9748\u6d3b\u7684\u8eab\u4efd\u9a57\u8b49\u8207\u6b0a\u9650\u7ba1\u7406</li> <li>\u6578\u64da\u5eab\u9023\u63a5\u7ba1\u7406\uff1a\u901a\u904e\u6ce8\u5165\u7684\u65b9\u5f0f\u512a\u5316\u9023\u63a5\u6c60\u4f7f\u7528</li> <li>\u5916\u90e8 API \u96c6\u6210\uff1a\u7c21\u5316\u5916\u90e8\u670d\u52d9\u7684\u8abf\u7528\u8207\u66ff\u63db</li> <li>\u7cfb\u7d71\u914d\u7f6e\u7ba1\u7406\uff1a\u652f\u6301\u52d5\u614b\u6ce8\u5165\u914d\u7f6e\u53c3\u6578</li> </ul>"},{"location":"dependency-injection/01-introduction/#_5","title":"\u4f9d\u8cf4\u6ce8\u5165\u8a2d\u8a08\u6838\u5fc3\u539f\u5247","text":"<ul> <li> <p>\u63a7\u5236\u53cd\u8f49\uff08Inversion of Control, IoC\uff09: \u63a7\u5236\u53cd\u8f49\u662f\u4e00\u7a2e\u8a2d\u8a08\u601d\u60f3\uff0c\u6307\u5c07\u7cfb\u7d71\u4e2d\u4f9d\u8cf4\u7684\u63a7\u5236\u6b0a\u4ea4\u7531\u5916\u90e8\u6846\u67b6\u6216\u5bb9\u5668\u7ba1\u7406\u3002\u6b64\u539f\u5247\u4f7f\u6a21\u584a\u80fd\u5c08\u6ce8\u65bc\u81ea\u8eab\u7684\u696d\u52d9\u908f\u8f2f\uff0c\u800c\u4e0d\u9700\u8981\u76f4\u63a5\u8655\u7406\u4f9d\u8cf4\u7684\u5be6\u4f8b\u5316\u6216\u751f\u547d\u5468\u671f\u7ba1\u7406</p> </li> <li> <p>\u4f9d\u8cf4\u65bc\u62bd\u8c61: \u4f9d\u8cf4\u6ce8\u5165\u5021\u5c0e\u5c0d\u8c61\u61c9\u4f9d\u8cf4\u65bc\u62bd\u8c61\uff08\u5982\u63a5\u53e3\u6216\u57fa\u985e\uff09\uff0c\u800c\u975e\u5177\u9ad4\u7684\u5be6\u73fe\u3002\u9019\u7a2e\u8a2d\u8a08\u65b9\u5f0f\u907f\u514d\u4e86\u56e0\u5177\u9ad4\u4f9d\u8cf4\u7684\u6539\u8b8a\u800c\u5f15\u767c\u7684\u4ee3\u78bc\u91cd\u69cb\u554f\u984c\uff0c\u4e26\u63d0\u5347\u7cfb\u7d71\u7684\u9748\u6d3b\u6027</p> </li> <li> <p>\u55ae\u4e00\u8cac\u4efb\u539f\u5247\uff08Single Responsibility Principle, SRP\uff09: \u6bcf\u500b\u6a21\u584a\u61c9\u5c08\u6ce8\u65bc\u81ea\u8eab\u7684\u55ae\u4e00\u8077\u8cac\uff0c\u907f\u514d\u56e0\u4f9d\u8cf4\u7ba1\u7406\u800c\u589e\u52a0\u984d\u5916\u7684\u8907\u96dc\u6027\u3002\u4f9d\u8cf4\u6ce8\u5165\u80fd\u6709\u6548\u5206\u96e2\u4f9d\u8cf4\u7684\u7ba1\u7406\u8cac\u4efb\uff0c\u5f9e\u800c\u4fdd\u6301\u6a21\u584a\u7684\u7c21\u6f54\u6027</p> </li> <li> <p>\u53ef\u6e2c\u8a66\u6027: \u4f9d\u8cf4\u6ce8\u5165\u63d0\u4f9b\u4e86\u4e00\u7a2e\u6709\u6548\u7684\u6e2c\u8a66\u7b56\u7565\uff0c\u5141\u8a31\u958b\u767c\u8005\u5728\u6e2c\u8a66\u74b0\u5883\u4e2d\u66ff\u63db\u771f\u5be6\u4f9d\u8cf4\u70ba Mock \u6216 Stub\uff0c\u5f9e\u800c\u5be6\u73fe\u9ad8\u6548\u7684\u55ae\u5143\u6e2c\u8a66</p> </li> <li> <p>\u96c6\u4e2d\u5316\u8cc7\u6e90\u7ba1\u7406: \u4f9d\u8cf4\u6ce8\u5165\u80fd\u96c6\u4e2d\u7ba1\u7406\u8cc7\u6e90\u7684\u521d\u59cb\u5316\u8207\u92b7\u6bc0\uff0c\u907f\u514d\u8cc7\u6e90\u6cc4\u6f0f\u6216\u91cd\u8907\u521d\u59cb\u5316\uff0c\u5f9e\u800c\u63d0\u5347\u7cfb\u7d71\u7684\u53ef\u9760\u6027\u8207\u6027\u80fd</p> </li> </ul>"},{"location":"dependency-injection/02-fastapi-injection/","title":"FastAPI \u4e2d\u7684\u4f9d\u8cf4\u6ce8\u5165","text":""},{"location":"dependency-injection/02-fastapi-injection/#basic-injection","title":"\u57fa\u672c\u4f9d\u8cf4\u6ce8\u5165\uff08Basic Injection\uff09","text":"<p>\u57fa\u672c\u4f9d\u8cf4\u6ce8\u5165\uff08Basic Injection\uff09\u662f\u4f9d\u8cf4\u6ce8\u5165\u7684\u6838\u5fc3\u529f\u80fd\uff0c\u901a\u904e\u5c07\u4f9d\u8cf4\u7684\u7ba1\u7406\u4ea4\u7531\u6846\u67b6\u8655\u7406\uff0c\u5be6\u73fe\u6a21\u584a\u9593\u7684\u4f4e\u8026\u5408\u8a2d\u8a08\u3002</p> <ul> <li>\u5b83\u9069\u7528\u65bc\u7c21\u55ae\u7684\u4f9d\u8cf4\u5834\u666f\uff0c\u4f8b\u5982\u914d\u7f6e\u53c3\u6578\u7684\u50b3\u905e\u6216\u975c\u614b\u8cc7\u6e90\u7684\u521d\u59cb\u5316</li> <li>\u4f9d\u8cf4\u6ce8\u5165\u901a\u904e <code>Depends</code> \u51fd\u6578\u5be6\u73fe</li> <li>\u958b\u767c\u8005\u53ef\u4ee5\u5b9a\u7fa9\u4e00\u500b\u51fd\u6578\u4f5c\u70ba\u4f9d\u8cf4\uff0c\u4e26\u5728\u8def\u7531\u8655\u901a\u904e <code>Depends</code> \u5f15\u5165\u8a72\u4f9d\u8cf4</li> </ul> <pre><code>from fastapi import FastAPI, Depends\n\napp = FastAPI()\n\n# \u5b9a\u7fa9\u4f9d\u8cf4\u51fd\u6578\ndef get_config():\n    return {\"app_name\": \"MyApp\", \"version\": \"1.0\"}\n\n# \u4f7f\u7528\u4f9d\u8cf4\n@app.get(\"/\")\ndef read_root(config: dict = Depends(get_config)):\n    return {\"message\": f\"Welcome to {config['app_name']} v{config['version']}\"}\n</code></pre> <p>\u95dc\u9375\u7279\u6027</p> <ul> <li>\u7c21\u55ae\u6613\u7528\uff1a\u53ea\u9700\u5b9a\u7fa9\u4f9d\u8cf4\u51fd\u6578\u4e26\u901a\u904e <code>Depends</code> \u5f15\u5165\u3002</li> <li>\u63d0\u5347\u4ee3\u78bc\u53ef\u7dad\u8b77\u6027\uff1a\u4f9d\u8cf4\u7684\u5b9a\u7fa9\u8207\u4f7f\u7528\u5206\u96e2\uff0c\u8b93\u908f\u8f2f\u66f4\u6e05\u6670\u3002</li> <li>\u652f\u6301\u9ed8\u8a8d\u503c\u8207\u53ef\u9078\u4f9d\u8cf4\uff1a\u4f9d\u8cf4\u51fd\u6578\u53ef\u4ee5\u8a2d\u7f6e\u9ed8\u8a8d\u503c\uff0c\u907f\u514d\u56e0\u7f3a\u5c11\u4f9d\u8cf4\u800c\u5c0e\u81f4\u932f\u8aa4\u3002</li> </ul> <p>\u5e38\u898b\u61c9\u7528\u5834\u666f</p> <ul> <li>\u914d\u7f6e\u7ba1\u7406\uff1a\u5c07\u61c9\u7528\u914d\u7f6e\u96c6\u4e2d\u7ba1\u7406\u4e26\u6ce8\u5165\u5230\u9700\u8981\u7684\u6a21\u584a\u4e2d\u3002</li> <li>\u7528\u6236\u4e0a\u4e0b\u6587\uff1a\u63d0\u53d6\u7576\u524d\u7528\u6236\u4fe1\u606f\u4e26\u50b3\u905e\u7d66\u8655\u7406\u908f\u8f2f\u3002</li> <li>\u975c\u614b\u8cc7\u6e90\u521d\u59cb\u5316\uff1a\u5982\u7d00\u9304\u65e5\u8a8c\u5c0d\u8c61\u6216\u975c\u614b\u6587\u4ef6\u8def\u5f91\u3002</li> </ul>"},{"location":"dependency-injection/02-fastapi-injection/#multi-layer-injection","title":"\u591a\u5c64\u4f9d\u8cf4\u6ce8\u5165\uff08Multi-layer Injection\uff09","text":"<p>\u591a\u5c64\u4f9d\u8cf4\u6ce8\u5165\uff08Multi-layer Injection\uff09\u662f\u4f9d\u8cf4\u6ce8\u5165\u7684\u4e00\u7a2e\u9032\u968e\u5f62\u5f0f\uff0c\u9069\u7528\u65bc\u4f9d\u8cf4\u4e4b\u9593\u5b58\u5728\u5c64\u7d1a\u95dc\u4fc2\u7684\u5834\u666f\u3002</p> <ul> <li>\u5141\u8a31\u958b\u767c\u8005\u5c07\u8907\u96dc\u7684\u4f9d\u8cf4\u908f\u8f2f\u5206\u5c64\u8655\u7406\uff0c\u5f9e\u800c\u63d0\u5347\u7cfb\u7d71\u7684\u9748\u6d3b\u6027\u8207\u53ef\u7dad\u8b77\u6027</li> <li>\u4f9d\u8cf4\u53ef\u4ee5\u76f8\u4e92\u5d4c\u5957\uff0c\u5be6\u73fe\u591a\u5c64\u7684\u4f9d\u8cf4\u95dc\u4fc2</li> <li>\u6bcf\u4e00\u5c64\u4f9d\u8cf4\u90fd\u53ef\u4ee5\u901a\u904e <code>Depends</code> \u5f15\u5165\u5176\u4ed6\u4f9d\u8cf4</li> </ul> <pre><code>from fastapi import FastAPI, Depends\n\napp = FastAPI()\n\n# \u7b2c\u4e00\u5c64\u4f9d\u8cf4\uff1a\u7372\u53d6\u914d\u7f6e\ndef get_config():\n    return {\"app_name\": \"MyApp\", \"version\": \"1.0\"}\n\n# \u7b2c\u4e8c\u5c64\u4f9d\u8cf4\uff1a\u57fa\u65bc\u914d\u7f6e\u751f\u6210\u670d\u52d9\ndef get_service(config: dict = Depends(get_config)):\n    return {\"service_name\": f\"{config['app_name']} Service\"}\n\n# \u4f7f\u7528\u591a\u5c64\u4f9d\u8cf4\n@app.get(\"/\")\ndef read_root(service: dict = Depends(get_service)):\n    return {\"message\": f\"Welcome to {service['service_name']}\"}\n</code></pre> <p>\u95dc\u9375\u7279\u6027</p> <ul> <li>\u5c64\u6b21\u5206\u660e\uff1a\u4f9d\u8cf4\u4e4b\u9593\u7684\u5c64\u7d1a\u95dc\u4fc2\u6e05\u6670\uff0c\u4fbf\u65bc\u7ba1\u7406\u3002</li> <li>\u9748\u6d3b\u7d44\u5408\uff1a\u53ef\u4ee5\u6839\u64da\u9700\u6c42\u52d5\u614b\u7d44\u5408\u591a\u5c64\u4f9d\u8cf4\u3002</li> <li>\u63d0\u5347\u6e2c\u8a66\u6548\u7387\uff1a\u6bcf\u4e00\u5c64\u4f9d\u8cf4\u90fd\u53ef\u4ee5\u55ae\u7368\u6e2c\u8a66\uff0c\u964d\u4f4e\u6e2c\u8a66\u7684\u8907\u96dc\u5ea6\u3002</li> </ul> <p>\u5e38\u898b\u61c9\u7528\u5834\u666f</p> <ul> <li>\u8cc7\u6e90\u5206\u5c64\u7ba1\u7406\uff1a\u5982\u57fa\u65bc\u914d\u7f6e\u751f\u6210\u6578\u64da\u5eab\u9023\u63a5\u6c60\u6216\u5176\u4ed6\u670d\u52d9\u5c0d\u8c61\u3002</li> <li>\u4f9d\u8cf4\u7684\u52d5\u614b\u69cb\u5efa\uff1a\u6839\u64da\u696d\u52d9\u9700\u6c42\uff0c\u52d5\u614b\u7d44\u5408\u591a\u5c64\u4f9d\u8cf4\u3002</li> <li>\u8907\u96dc\u696d\u52d9\u908f\u8f2f\u7684\u5206\u5c64\u8655\u7406\uff1a\u4f8b\u5982\uff0c\u5c07\u6578\u64da\u9a57\u8b49\u8207\u6578\u64da\u8655\u7406\u5206\u5c64\u3002</li> </ul>"},{"location":"dependency-injection/02-fastapi-injection/#async-injection","title":"\u7570\u6b65\u4f9d\u8cf4\u6ce8\u5165\uff08Async Injection\uff09","text":"<p>\u7570\u6b65\u4f9d\u8cf4\u6ce8\u5165\uff08Async Injection\uff09\u5c08\u70ba\u9700\u8981\u7570\u6b65\u64cd\u4f5c\u7684\u5834\u666f\u8a2d\u8a08\uff0c\u4f8b\u5982\u7db2\u7d61\u8acb\u6c42\u3001\u6578\u64da\u5eab\u67e5\u8a62\u6216\u6587\u4ef6\u64cd\u4f5c\u3002</p> <ul> <li>FastAPI \u539f\u751f\u652f\u6301\u7570\u6b65\u4f9d\u8cf4\uff0c\u5141\u8a31\u958b\u767c\u8005\u5728\u4f9d\u8cf4\u51fd\u6578\u4e2d\u4f7f\u7528 <code>async</code> \u95dc\u9375\u5b57\u4f86\u8655\u7406\u7570\u6b65\u908f\u8f2f</li> <li>\u5b8c\u5168\u517c\u5bb9\u7570\u6b65\u51fd\u6578\uff0c\u9019\u4f7f\u5f97\u8655\u7406\u9ad8\u4f75\u767c\u5834\u666f\u66f4\u52a0\u9ad8\u6548</li> </ul> <pre><code>from fastapi import FastAPI, Depends\n\napp = FastAPI()\n\n# \u5b9a\u7fa9\u7570\u6b65\u4f9d\u8cf4\nasync def fetch_data():\n    # \u6a21\u64ec\u7570\u6b65\u64cd\u4f5c\uff0c\u4f8b\u5982\u5f9e\u9060\u7a0b API \u7372\u53d6\u6578\u64da\n    return {\"data\": \"Sample data\"}\n\n# \u4f7f\u7528\u7570\u6b65\u4f9d\u8cf4\n@app.get(\"/\")\nasync def read_root(data: dict = Depends(fetch_data)):\n    return {\"message\": f\"Fetched data: {data['data']}\"}\n</code></pre> <p>\u95dc\u9375\u7279\u6027</p> <ul> <li>\u9ad8\u6027\u80fd\uff1a\u5229\u7528 Python \u7684\u7570\u6b65\u7279\u6027\uff0c\u652f\u6301\u9ad8\u4f75\u767c\u5834\u666f\u3002</li> <li>\u9069\u914d\u7570\u6b65\u8cc7\u6e90\uff1a\u65b9\u4fbf\u96c6\u6210\u7570\u6b65\u6578\u64da\u5eab\u3001\u5916\u90e8 API \u6216\u5176\u4ed6\u7570\u6b65\u64cd\u4f5c\u3002</li> <li>\u8207\u540c\u6b65\u4f9d\u8cf4\u4e00\u81f4\u7684\u63a5\u53e3\uff1a\u958b\u767c\u8005\u7121\u9700\u5b78\u7fd2\u984d\u5916\u7684\u8a9e\u6cd5\uff0c\u7570\u6b65\u4f9d\u8cf4\u7684\u4f7f\u7528\u65b9\u5f0f\u8207\u540c\u6b65\u4f9d\u8cf4\u5b8c\u5168\u4e00\u81f4\u3002</li> </ul> <p>\u5e38\u898b\u61c9\u7528\u5834\u666f</p> <ul> <li>\u5916\u90e8 API \u6578\u64da\u62c9\u53d6\uff1a\u5982\u5f9e\u7b2c\u4e09\u65b9\u670d\u52d9\u7372\u53d6\u6578\u64da\u3002</li> <li>\u7570\u6b65\u6578\u64da\u5eab\u64cd\u4f5c\uff1a\u5982\u4f7f\u7528\u7570\u6b65 ORM\uff08\u4f8b\u5982 Tortoise ORM \u6216 SQLAlchemy Async\uff09\u3002</li> <li>\u6587\u4ef6\u8b80\u5beb\u6216\u7db2\u7d61\u8acb\u6c42\uff1a\u8655\u7406\u5927\u6587\u4ef6\u6216\u9ad8\u983b\u8acb\u6c42\u5834\u666f\u3002</li> </ul>"},{"location":"dependency-injection/03-design-patterns/","title":"FastAPI \u4f9d\u8cf4\u6ce8\u5165\u8a2d\u8a08\u6a21\u5f0f","text":""},{"location":"dependency-injection/03-design-patterns/#_1","title":"\u70ba\u4ec0\u9ebc\u4f7f\u7528\u4f9d\u8cf4\u6ce8\u5165\uff1f","text":"<p>\u4f9d\u8cf4\u6ce8\u5165\u70ba\u6211\u5011\u7684 FastAPI \u61c9\u7528\u63d0\u4f9b\u4ee5\u4e0b\u512a\u52e2\uff1a</p> <ul> <li>\u89e3\u8026\uff1a\u5c07\u4f9d\u8cf4\u7684\u5275\u5efa\u8207\u4f7f\u7528\u5206\u96e2\uff0c\u964d\u4f4e\u6a21\u7d44\u9593\u7684\u8026\u5408\u5ea6</li> <li>\u53ef\u6e2c\u8a66\u6027\uff1a\u8f15\u9b06\u66ff\u63db\u4f9d\u8cf4\u9805\u4ee5\u9032\u884c\u55ae\u5143\u6e2c\u8a66</li> <li>\u91cd\u7528\u6027\uff1a\u5728\u591a\u500b\u8def\u7531\u4e2d\u91cd\u8907\u4f7f\u7528\u76f8\u540c\u7684\u4f9d\u8cf4</li> <li>\u53ef\u7dad\u8b77\u6027\uff1a\u66f4\u6e05\u6670\u7684\u4ee3\u78bc\u7d50\u69cb\u548c\u8cac\u4efb\u5206\u96e2</li> </ul>"},{"location":"dependency-injection/03-design-patterns/#_2","title":"\u5e38\u7528\u8a2d\u8a08\u6a21\u5f0f","text":""},{"location":"dependency-injection/03-design-patterns/#1","title":"1. \u57fa\u790e\u4f9d\u8cf4\u6ce8\u5165\u6a21\u5f0f","text":"<p>\u6700\u7c21\u55ae\u7684\u4f9d\u8cf4\u6ce8\u5165\u5f62\u5f0f\uff0c\u76f4\u63a5\u5728\u8def\u7531\u51fd\u6578\u4e2d\u4f7f\u7528 <code>Depends</code>\u3002</p> <ul> <li>\u9069\u7528\u5834\u666f\uff1a\u8655\u7406\u7c21\u55ae\u7684\u4f9d\u8cf4\u95dc\u4fc2\uff0c\u5982\u67e5\u8a62\u53c3\u6578\u8655\u7406\u3001\u7c21\u55ae\u7684\u914d\u7f6e\u8b80\u53d6\u7b49</li> </ul> <pre><code>from fastapi import FastAPI, Depends\n\napp = FastAPI()\n\ndef get_query_params(q: str = None):\n    return {\"q\": q}\n\n@app.get(\"/items/\")\ndef read_items(params: dict = Depends(get_query_params)):\n    return {\"params\": params}\n</code></pre>"},{"location":"dependency-injection/03-design-patterns/#2","title":"2. \u55ae\u4f8b\u6a21\u5f0f","text":"<p>\u78ba\u4fdd\u67d0\u500b\u4f9d\u8cf4\u5728\u6574\u500b\u61c9\u7528\u4e2d\u53ea\u6709\u4e00\u500b\u5be6\u4f8b\uff0c\u9069\u7528\u65bc\u5171\u4eab\u8cc7\u6e90\u6216\u914d\u7f6e\u3002</p> <ul> <li>\u9069\u7528\u5834\u666f\uff1a\u61c9\u7528\u914d\u7f6e\u3001\u8cc7\u6599\u5eab\u9023\u63a5\u6c60\u3001\u5171\u4eab\u5ba2\u6236\u7aef\u7b49\u9700\u8981\u5168\u5c40\u5171\u4eab\u7684\u8cc7\u6e90</li> </ul> <pre><code>from fastapi import FastAPI, Depends\nfrom pydantic import BaseSettings\nfrom typing import Dict, Any\n\napp = FastAPI()\n\n# \u4f7f\u7528\u985e\u4f86\u5be6\u73fe\u6b63\u5f0f\u7684\u55ae\u4f8b\u6a21\u5f0f\nclass Settings(BaseSettings):\n    _instance = None\n    app_name: str = \"Awesome API\"\n    version: str = \"1.0.0\"\n\n    class Config:\n        # \u53ef\u4ee5\u6307\u5b9a\u5f9e\u74b0\u5883\u8b8a\u6578\u6216.env\u6587\u4ef6\u8b80\u53d6\u914d\u7f6e\n        env_file = \".env\"\n\n    # \u5be6\u73fe\u55ae\u4f8b\u6a21\u5f0f\n    def __new__(cls, *args, **kwargs):\n        if cls._instance is None:\n            cls._instance = super().__new__(cls)\n        return cls._instance\n\n\n# \u5168\u5c40\u55ae\u4f8b\u5be6\u4f8b\nsettings = Settings()\n\ndef get_settings() -&gt; Settings:\n    return settings\n\n@app.get(\"/info\")\ndef read_info(settings: Settings = Depends(get_settings)):\n    return settings.dict()\n</code></pre>"},{"location":"dependency-injection/03-design-patterns/#3","title":"3. \u5de5\u5ee0\u6a21\u5f0f","text":"<p>\u52d5\u614b\u5275\u5efa\u4f9d\u8cf4\u5be6\u4f8b\uff0c\u53ef\u4ee5\u6839\u64da\u4e0d\u540c\u689d\u4ef6\u8fd4\u56de\u4e0d\u540c\u7684\u5be6\u4f8b\u3002</p> <ul> <li>\u9069\u7528\u5834\u666f\uff1a\u9700\u8981\u6839\u64da\u8acb\u6c42\u4e0a\u4e0b\u6587\u52d5\u614b\u9078\u64c7\u4f9d\u8cf4\u5be6\u73fe\u7684\u5834\u666f</li> </ul> <pre><code>from fastapi import FastAPI, Depends, Header\nfrom typing import Dict, Optional\n\napp = FastAPI()\n\n# \u7c21\u55ae\u7684\u8cc7\u6599\u5eab\u9023\u63a5\u985e\nclass DatabaseConnection:\n    def __init__(self, connection_string: str):\n        self.connection_string = connection_string\n\n    def get_connection_info(self) -&gt; Dict[str, str]:\n        return {\"connection\": self.connection_string}\n\n# \u8cc7\u6599\u5eab\u5de5\u5ee0\u51fd\u6578\ndef create_db_connection(environment: str) -&gt; DatabaseConnection:\n    if environment == \"testing\":\n        return DatabaseConnection(\"test_db_connection\")\n    else:\n        return DatabaseConnection(\"production_db_connection\")\n\n# FastAPI \u4f9d\u8cf4\u51fd\u6578\ndef get_db_connection(x_environment: Optional[str] = Header(None)) -&gt; DatabaseConnection:\n    return create_db_connection(x_environment or \"production\")\n\n@app.get(\"/data\")\ndef read_data(db: DatabaseConnection = Depends(get_db_connection)):\n    return db.get_connection_info()\n</code></pre>"},{"location":"dependency-injection/03-design-patterns/#4","title":"4. \u93c8\u5f0f\u4f9d\u8cf4\u6a21\u5f0f","text":"<p>\u4e00\u500b\u4f9d\u8cf4\u53ef\u4ee5\u4f9d\u8cf4\u65bc\u5176\u4ed6\u4f9d\u8cf4\uff0c\u5f62\u6210\u4f9d\u8cf4\u93c8\u3002</p> <ul> <li>\u9069\u7528\u5834\u666f\uff1a\u8907\u96dc\u7684\u6388\u6b0a\u6d41\u7a0b\u3001\u591a\u5c64\u696d\u52d9\u908f\u8f2f\u8655\u7406\u7b49\u3002</li> </ul> <pre><code>from fastapi import FastAPI, Depends\n\napp = FastAPI()\n\ndef get_token(authorization: str = Header(None)):\n    return authorization\n\ndef get_current_user(token: str = Depends(get_token)):\n    # \u5728\u5be6\u969b\u61c9\u7528\u4e2d\uff0c\u9019\u88e1\u6703\u9a57\u8b49 token \u4e26\u8fd4\u56de\u7528\u6236\n    return {\"user\": \"john_doe\", \"token\": token}\n\n@app.get(\"/users/me\")\ndef read_user_me(current_user: dict = Depends(get_current_user)):\n    return current_user\n</code></pre>"},{"location":"dependency-injection/03-design-patterns/#5","title":"5. \u88dd\u98fe\u5668\u6a21\u5f0f","text":"<p>\u4f7f\u7528\u4f9d\u8cf4\u6ce8\u5165\u4f86\u88dd\u98fe\u8def\u7531\u51fd\u6578\uff0c\u589e\u52a0\u984d\u5916\u7684\u529f\u80fd\u3002</p> <ul> <li>\u9069\u7528\u5834\u666f\uff1a\u6b0a\u9650\u9a57\u8b49\u3001\u8acb\u6c42\u65e5\u8a8c\u8a18\u9304\u3001\u6027\u80fd\u76e3\u63a7\u7b49\u6a6b\u5207\u95dc\u6ce8\u9ede\u3002</li> </ul> <pre><code>from fastapi import FastAPI, Depends, HTTPException\n\napp = FastAPI()\n\ndef verify_admin(x_role: str = Header(None)):\n    if x_role != \"admin\":\n        raise HTTPException(status_code=403, detail=\"Not authorized\")\n    return True\n\n@app.get(\"/admin\", dependencies=[Depends(verify_admin)])\ndef admin_route():\n    return {\"message\": \"Welcome, admin!\"}\n</code></pre>"},{"location":"dependency-injection/03-design-patterns/#6","title":"6. \u985e\u5225\u4f9d\u8cf4\u6a21\u5f0f","text":"<p>\u4f7f\u7528\u985e\u5225\u800c\u4e0d\u662f\u51fd\u6578\u4f86\u5b9a\u7fa9\u4f9d\u8cf4\uff0c\u63d0\u4f9b\u66f4\u597d\u7684\u5c01\u88dd\u548c\u7d44\u7e54\u3002</p> <ul> <li>\u9069\u7528\u5834\u666f\uff1a\u8907\u96dc\u7684\u4f9d\u8cf4\u908f\u8f2f\uff0c\u9700\u8981\u5c01\u88dd\u72c0\u614b\u548c\u884c\u70ba\u7684\u5834\u666f\u3002</li> </ul> <pre><code>from fastapi import FastAPI, Depends\n\napp = FastAPI()\n\nclass DatabaseClient:\n    def __init__(self, db_name: str = \"default\"):\n        self.db_name = db_name\n\n    def get_items(self):\n        return [{\"id\": 1, \"name\": f\"Item from {self.db_name}\"}]\n\n# \u53ef\u8abf\u7528\u985e\u5225\u4f5c\u70ba\u4f9d\u8cf4\nclass DBDependency:\n    def __init__(self, db_name: str = \"default\"):\n        self.db_name = db_name\n\n    def __call__(self):\n        return DatabaseClient(self.db_name)\n\n# \u5275\u5efa\u4f9d\u8cf4\u5be6\u4f8b\nget_db = DBDependency()\n\n@app.get(\"/items\")\ndef read_items(db: DatabaseClient = Depends(get_db)):\n    return db.get_items()\n</code></pre>"},{"location":"dependency-injection/03-design-patterns/#_3","title":"\u6700\u4f73\u5be6\u8e10","text":"<ol> <li> <p>\u4fdd\u6301\u4f9d\u8cf4\u51fd\u6578\u7c21\u55ae\uff1a\u6bcf\u500b\u4f9d\u8cf4\u51fd\u6578\u61c9\u8a72\u5c08\u6ce8\u65bc\u55ae\u4e00\u8077\u8cac\u3002</p> </li> <li> <p>\u9069\u7576\u4f7f\u7528\u7de9\u5b58\uff1a\u5c0d\u65bc\u8a08\u7b97\u6210\u672c\u9ad8\u4f46\u4e0d\u5e38\u8b8a\u5316\u7684\u4f9d\u8cf4\uff0c\u4f7f\u7528 <code>@lru_cache</code> \u88dd\u98fe\u5668\u3002</p> </li> <li> <p>\u8003\u616e\u4f9d\u8cf4\u7684\u751f\u547d\u9031\u671f\uff1a\u4e86\u89e3\u4f9d\u8cf4\u5728\u8acb\u6c42\u4e2d\u7684\u751f\u547d\u9031\u671f\uff0c\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u8cc7\u6e90\u6d88\u8017\u3002</p> </li> <li> <p>\u4f7f\u7528\u985e\u578b\u63d0\u793a\uff1a\u5145\u5206\u5229\u7528 Python \u7684\u985e\u578b\u63d0\u793a\u529f\u80fd\uff0c\u63d0\u9ad8\u4ee3\u78bc\u7684\u53ef\u8b80\u6027\u548c IDE \u652f\u6301\u3002</p> </li> <li> <p>\u5206\u5c64\u7d44\u7e54\u4f9d\u8cf4\uff1a\u5c07\u76f8\u95dc\u7684\u4f9d\u8cf4\u7d44\u7e54\u5728\u4e00\u8d77\uff0c\u5f62\u6210\u6e05\u6670\u7684\u4f9d\u8cf4\u5c64\u6b21\u7d50\u69cb\u3002</p> </li> </ol>"},{"location":"dependency-injection/04-testing/","title":"FastAPI \u4f9d\u8cf4\u6ce8\u5165\u7684\u6e2c\u8a66\u7b56\u7565","text":""},{"location":"dependency-injection/04-testing/#_1","title":"\u4f9d\u8cf4\u6ce8\u5165\u8207\u6e2c\u8a66\u7684\u95dc\u4fc2","text":"<p>\u4f9d\u8cf4\u6ce8\u5165\u7684\u4e00\u500b\u4e3b\u8981\u512a\u52e2\u5c31\u662f\u63d0\u9ad8\u4e86\u4ee3\u78bc\u7684\u53ef\u6e2c\u8a66\u6027\u3002\u901a\u904e\u5c07\u4f9d\u8cf4\u95dc\u4fc2\u5916\u90e8\u5316\uff0c\u6211\u5011\u53ef\u4ee5\uff1a</p> <ul> <li>\u8f15\u9b06\u66ff\u63db\u771f\u5be6\u4f9d\u8cf4\u70ba\u6e2c\u8a66\u66ff\u8eab\uff08\u5982 mock \u6216 stub\uff09</li> <li>\u9694\u96e2\u88ab\u6e2c\u8a66\u7684\u7d44\u4ef6</li> <li>\u6a21\u64ec\u5404\u7a2e\u5834\u666f\u548c\u932f\u8aa4\u60c5\u6cc1</li> </ul>"},{"location":"dependency-injection/04-testing/#_2","title":"\u5e38\u7528\u6e2c\u8a66\u5de5\u5177","text":"<p>\u5728\u6e2c\u8a66 FastAPI \u61c9\u7528\u6642\uff0c\u4ee5\u4e0b\u5de5\u5177\u975e\u5e38\u6709\u7528\uff1a</p> <ul> <li>pytest\uff1aPython \u7684\u4e3b\u6d41\u6e2c\u8a66\u6846\u67b6</li> <li>TestClient\uff1aFastAPI \u63d0\u4f9b\u7684\u6e2c\u8a66\u5ba2\u6236\u7aef</li> <li>unittest.mock\uff1aPython \u6a19\u6e96\u5eab\u4e2d\u7684 mock \u5de5\u5177</li> <li>dependency_overrides\uff1aFastAPI \u7684\u4f9d\u8cf4\u8986\u84cb\u6a5f\u5236</li> </ul>"},{"location":"dependency-injection/04-testing/#_3","title":"\u6e2c\u8a66\u7b56\u7565","text":""},{"location":"dependency-injection/04-testing/#1","title":"1. \u55ae\u5143\u6e2c\u8a66\u4f9d\u8cf4\u51fd\u6578","text":"<p>\u9996\u5148\uff0c\u6211\u5011\u61c9\u8a72\u7368\u7acb\u6e2c\u8a66\u4f9d\u8cf4\u51fd\u6578\uff0c\u78ba\u4fdd\u5b83\u5011\u7684\u908f\u8f2f\u6b63\u78ba\u3002</p> <pre><code># \u88ab\u6e2c\u8a66\u7684\u4f9d\u8cf4\u51fd\u6578\ndef get_db():\n    db = Database()\n    try:\n        yield db\n    finally:\n        db.close()\n\n# \u6e2c\u8a66\ndef test_get_db():\n    db_generator = get_db()\n    db = next(db_generator)\n    assert isinstance(db, Database)\n\n    # \u6e2c\u8a66\u6e05\u7406\u908f\u8f2f\n    try:\n        next(db_generator)\n    except StopIteration:\n        pass  # \u9810\u671f\u7684\u884c\u70ba\n</code></pre>"},{"location":"dependency-injection/04-testing/#2","title":"2. \u4f7f\u7528\u4f9d\u8cf4\u8986\u84cb\u9032\u884c\u8def\u7531\u6e2c\u8a66","text":"<p>FastAPI \u63d0\u4f9b\u4e86 <code>app.dependency_overrides</code> \u5b57\u5178\uff0c\u5141\u8a31\u6211\u5011\u5728\u6e2c\u8a66\u4e2d\u66ff\u63db\u4f9d\u8cf4\u3002</p> <pre><code>from fastapi.testclient import TestClient\nfrom unittest.mock import MagicMock\n\n# \u61c9\u7528\u4ee3\u78bc\napp = FastAPI()\n\ndef get_db():\n    # \u5be6\u969b\u61c9\u7528\u4e2d\u7684\u8cc7\u6599\u5eab\u9023\u63a5\u908f\u8f2f\n    ...\n\n@app.get(\"/users/{user_id}\")\ndef read_user(user_id: int, db = Depends(get_db)):\n    return db.get_user(user_id)\n\n# \u6e2c\u8a66\u4ee3\u78bc\ndef test_read_user():\n    # \u5275\u5efa mock \u8cc7\u6599\u5eab\n    mock_db = MagicMock()\n    mock_db.get_user.return_value = {\"id\": 1, \"name\": \"Test User\"}\n\n    # \u8986\u84cb\u4f9d\u8cf4\n    app.dependency_overrides[get_db] = lambda: mock_db\n\n    client = TestClient(app)\n    response = client.get(\"/users/1\")\n\n    assert response.status_code == 200\n    assert response.json() == {\"id\": 1, \"name\": \"Test User\"}\n    mock_db.get_user.assert_called_once_with(1)\n\n    # \u6e05\u7406\n    app.dependency_overrides = {}\n</code></pre>"},{"location":"dependency-injection/04-testing/#3","title":"3. \u6e2c\u8a66\u93c8\u5f0f\u4f9d\u8cf4","text":"<p>\u5c0d\u65bc\u93c8\u5f0f\u4f9d\u8cf4\uff0c\u6211\u5011\u53ef\u4ee5\u9078\u64c7\u8986\u84cb\u6574\u500b\u93c8\u6216\u50c5\u8986\u84cb\u93c8\u4e2d\u7684\u7279\u5b9a\u90e8\u5206\u3002</p> <pre><code># \u61c9\u7528\u4ee3\u78bc\ndef get_token(authorization: str = Header(None)):\n    if not authorization:\n        raise HTTPException(status_code=401)\n    return authorization\n\ndef get_current_user(token: str = Depends(get_token)):\n    # \u9a57\u8b49 token \u4e26\u8fd4\u56de\u7528\u6236\n    ...\n\n@app.get(\"/me\")\ndef read_me(user: dict = Depends(get_current_user)):\n    return user\n\n# \u6e2c\u8a66\u4ee3\u78bc - \u8986\u84cb\u6574\u500b\u93c8\ndef test_read_me():\n    mock_user = {\"id\": 1, \"name\": \"Test User\"}\n    app.dependency_overrides[get_current_user] = lambda: mock_user\n\n    client = TestClient(app)\n    response = client.get(\"/me\")\n\n    assert response.status_code == 200\n    assert response.json() == mock_user\n</code></pre>"},{"location":"dependency-injection/04-testing/#4-pytest-fixtures","title":"4. \u4f7f\u7528 pytest fixtures \u7ba1\u7406\u4f9d\u8cf4\u8986\u84cb","text":"<p>\u4f7f\u7528 pytest fixtures \u53ef\u4ee5\u66f4\u597d\u5730\u7d44\u7e54\u6e2c\u8a66\u4ee3\u78bc\u548c\u4f9d\u8cf4\u8986\u84cb\u3002</p> <pre><code>import pytest\nfrom fastapi.testclient import TestClient\n\n@pytest.fixture\ndef client_with_mock_db():\n    mock_db = MagicMock()\n    mock_db.get_user.return_value = {\"id\": 1, \"name\": \"Test User\"}\n\n    app.dependency_overrides[get_db] = lambda: mock_db\n\n    client = TestClient(app)\n    yield client, mock_db\n\n    # \u6e05\u7406\n    app.dependency_overrides = {}\n\ndef test_read_user_with_fixture(client_with_mock_db):\n    client, mock_db = client_with_mock_db\n\n    response = client.get(\"/users/1\")\n\n    assert response.status_code == 200\n    assert response.json() == {\"id\": 1, \"name\": \"Test User\"}\n    mock_db.get_user.assert_called_once_with(1)\n</code></pre>"},{"location":"dependency-injection/04-testing/#5","title":"5. \u6e2c\u8a66\u985e\u5225\u4f9d\u8cf4","text":"<p>\u5c0d\u65bc\u985e\u5225\u4f9d\u8cf4\uff0c\u6211\u5011\u53ef\u4ee5\u5275\u5efa\u6e2c\u8a66\u66ff\u8eab\u6216\u8986\u84cb\u7279\u5b9a\u65b9\u6cd5\u3002</p> <pre><code># \u61c9\u7528\u4ee3\u78bc\nclass UserService:\n    def get_user(self, user_id: int):\n        # \u5be6\u969b\u5be6\u73fe\n        ...\n\n@app.get(\"/users/{user_id}\")\ndef read_user(user_id: int, service: UserService = Depends(UserService)):\n    return service.get_user(user_id)\n\n# \u6e2c\u8a66\u4ee3\u78bc\ndef test_read_user_with_service():\n    # \u5275\u5efa\u6e2c\u8a66\u66ff\u8eab\n    class TestUserService:\n        def get_user(self, user_id: int):\n            return {\"id\": user_id, \"name\": \"Test User\"}\n\n    app.dependency_overrides[UserService] = TestUserService\n\n    client = TestClient(app)\n    response = client.get(\"/users/1\")\n\n    assert response.status_code == 200\n    assert response.json() == {\"id\": 1, \"name\": \"Test User\"}\n\n    app.dependency_overrides = {}\n</code></pre>"},{"location":"dependency-injection/04-testing/#_4","title":"\u9032\u968e\u6e2c\u8a66\u6280\u5de7","text":""},{"location":"dependency-injection/04-testing/#1_1","title":"1. \u6a21\u64ec\u7570\u6b65\u4f9d\u8cf4","text":"<p>\u5c0d\u65bc\u7570\u6b65\u4f9d\u8cf4\uff0c\u6211\u5011\u9700\u8981\u4f7f\u7528\u7570\u6b65 mock \u6216\u5275\u5efa\u7570\u6b65\u6e2c\u8a66\u66ff\u8eab\u3002</p> <pre><code># \u61c9\u7528\u4ee3\u78bc\nasync def get_async_db():\n    db = AsyncDatabase()\n    try:\n        yield db\n    finally:\n        await db.close()\n\n# \u6e2c\u8a66\u4ee3\u78bc\nasync def mock_async_db():\n    mock_db = AsyncMock()\n    mock_db.get_user.return_value = {\"id\": 1, \"name\": \"Test User\"}\n    yield mock_db\n\ndef test_async_dependency():\n    app.dependency_overrides[get_async_db] = mock_async_db\n\n    client = TestClient(app)\n    response = client.get(\"/users/1\")\n\n    assert response.status_code == 200\n    # \u66f4\u591a\u65b7\u8a00...\n</code></pre>"},{"location":"dependency-injection/04-testing/#2_1","title":"2. \u6e2c\u8a66\u5e36\u6709\u5b50\u4f9d\u8cf4\u7684\u8def\u7531","text":"<p>\u5c0d\u65bc\u4f7f\u7528 <code>dependencies</code> \u53c3\u6578\u7684\u8def\u7531\uff0c\u6211\u5011\u540c\u6a23\u53ef\u4ee5\u8986\u84cb\u9019\u4e9b\u4f9d\u8cf4\u3002</p> <pre><code># \u61c9\u7528\u4ee3\u78bc\ndef verify_admin(token: str = Depends(get_token)):\n    # \u9a57\u8b49\u662f\u5426\u70ba\u7ba1\u7406\u54e1\n    ...\n\n@app.get(\"/admin\", dependencies=[Depends(verify_admin)])\ndef admin_route():\n    return {\"message\": \"Admin access\"}\n\n# \u6e2c\u8a66\u4ee3\u78bc\ndef test_admin_route():\n    # \u8986\u84cb\u9a57\u8b49\u4f9d\u8cf4\n    app.dependency_overrides[verify_admin] = lambda: True\n\n    client = TestClient(app)\n    response = client.get(\"/admin\")\n\n    assert response.status_code == 200\n    assert response.json() == {\"message\": \"Admin access\"}\n</code></pre>"},{"location":"dependency-injection/04-testing/#3_1","title":"3. \u96c6\u6210\u6e2c\u8a66\u8207\u771f\u5be6\u4f9d\u8cf4","text":"<p>\u6709\u6642\u6211\u5011\u9700\u8981\u9032\u884c\u96c6\u6210\u6e2c\u8a66\uff0c\u4f7f\u7528\u771f\u5be6\u7684\u4f9d\u8cf4\uff08\u5982\u6e2c\u8a66\u8cc7\u6599\u5eab\uff09\u3002</p> <pre><code>@pytest.fixture\ndef test_db():\n    # \u8a2d\u7f6e\u6e2c\u8a66\u8cc7\u6599\u5eab\n    db = Database(\"test_db\")\n    db.create_tables()\n\n    yield db\n\n    # \u6e05\u7406\n    db.drop_tables()\n    db.close()\n\ndef test_integration_with_db(test_db):\n    # \u4f7f\u7528\u771f\u5be6\u7684\u6e2c\u8a66\u8cc7\u6599\u5eab\u9032\u884c\u6e2c\u8a66\n    app.dependency_overrides[get_db] = lambda: test_db\n\n    client = TestClient(app)\n    # \u57f7\u884c\u6e2c\u8a66...\n\n    app.dependency_overrides = {}\n</code></pre>"},{"location":"dependency-injection/04-testing/#_5","title":"\u6700\u4f73\u5be6\u8e10","text":"<ol> <li> <p>\u9694\u96e2\u6e2c\u8a66\uff1a\u6bcf\u500b\u6e2c\u8a66\u61c9\u8a72\u7368\u7acb\u904b\u884c\uff0c\u4e0d\u4f9d\u8cf4\u5176\u4ed6\u6e2c\u8a66\u7684\u72c0\u614b\u3002</p> </li> <li> <p>\u6e05\u7406\u8986\u84cb\uff1a\u6e2c\u8a66\u5b8c\u6210\u5f8c\u6062\u5fa9 <code>dependency_overrides</code>\uff0c\u907f\u514d\u5f71\u97ff\u5176\u4ed6\u6e2c\u8a66\u3002</p> </li> <li> <p>\u4f7f\u7528 fixtures\uff1a\u5229\u7528 pytest fixtures \u7ba1\u7406\u6e2c\u8a66\u8cc7\u6e90\u548c\u4f9d\u8cf4\u8986\u84cb\u3002</p> </li> <li> <p>\u6e2c\u8a66\u908a\u754c\u60c5\u6cc1\uff1a\u4e0d\u50c5\u6e2c\u8a66\u6b63\u5e38\u6d41\u7a0b\uff0c\u4e5f\u8981\u6e2c\u8a66\u932f\u8aa4\u8655\u7406\u548c\u908a\u754c\u60c5\u6cc1\u3002</p> </li> <li> <p>\u4fdd\u6301\u6e2c\u8a66\u7c21\u55ae\uff1a\u6bcf\u500b\u6e2c\u8a66\u61c9\u8a72\u5c08\u6ce8\u65bc\u4e00\u500b\u529f\u80fd\u9ede\uff0c\u907f\u514d\u904e\u65bc\u8907\u96dc\u7684\u6e2c\u8a66\u3002</p> </li> </ol>"},{"location":"dependency-injection/05-performance/","title":"FastAPI \u4f9d\u8cf4\u6ce8\u5165\u7684\u6027\u80fd\u512a\u5316","text":""},{"location":"dependency-injection/05-performance/#_1","title":"\u4f9d\u8cf4\u6ce8\u5165\u7684\u6027\u80fd\u5f71\u97ff","text":"<p>\u5728\u8a0e\u8ad6\u512a\u5316\u4e4b\u524d\uff0c\u8b93\u6211\u5011\u5148\u4e86\u89e3\u4f9d\u8cf4\u6ce8\u5165\u53ef\u80fd\u5c0d\u6027\u80fd\u7522\u751f\u7684\u5f71\u97ff\uff1a</p> <ol> <li>\u4f9d\u8cf4\u89e3\u6790\u958b\u92b7\uff1a\u6bcf\u6b21\u8acb\u6c42\u90fd\u9700\u8981\u89e3\u6790\u548c\u57f7\u884c\u4f9d\u8cf4\u51fd\u6578</li> <li>\u591a\u9918\u7684\u8a08\u7b97\uff1a\u672a\u7d93\u512a\u5316\u7684\u4f9d\u8cf4\u53ef\u80fd\u91cd\u8907\u57f7\u884c\u76f8\u540c\u7684\u8a08\u7b97</li> <li>\u8cc7\u6e90\u7ba1\u7406\uff1a\u4f9d\u8cf4\u4e2d\u7684\u8cc7\u6e90\uff08\u5982\u8cc7\u6599\u5eab\u9023\u63a5\uff09\u9700\u8981\u59a5\u5584\u7ba1\u7406</li> <li>\u4f9d\u8cf4\u93c8\u6df1\u5ea6\uff1a\u904e\u9577\u7684\u4f9d\u8cf4\u93c8\u53ef\u80fd\u5c0e\u81f4\u6027\u80fd\u4e0b\u964d</li> </ol>"},{"location":"dependency-injection/05-performance/#_2","title":"\u6027\u80fd\u512a\u5316\u7b56\u7565","text":""},{"location":"dependency-injection/05-performance/#1","title":"1. \u4f7f\u7528\u7de9\u5b58\u6e1b\u5c11\u91cd\u8907\u8a08\u7b97","text":"<p>\u5c0d\u65bc\u8a08\u7b97\u6210\u672c\u9ad8\u4f46\u7d50\u679c\u4e0d\u5e38\u8b8a\u5316\u7684\u4f9d\u8cf4\uff0c\u53ef\u4ee5\u4f7f\u7528 <code>functools.lru_cache</code> \u9032\u884c\u7de9\u5b58\u3002</p> <ul> <li>\u6548\u679c\uff1a\u7b2c\u4e00\u6b21\u8abf\u7528\u5f8c\uff0c\u5f8c\u7e8c\u8acb\u6c42\u5c07\u76f4\u63a5\u4f7f\u7528\u7de9\u5b58\u7d50\u679c\uff0c\u907f\u514d\u91cd\u8907\u8a08\u7b97</li> <li>\u9069\u7528\u5834\u666f\uff1a\u914d\u7f6e\u8b80\u53d6\u3001\u975c\u614b\u8cc7\u6e90\u52a0\u8f09\u7b49\u4e0d\u5e38\u8b8a\u5316\u7684\u4f9d\u8cf4</li> </ul> <pre><code>from functools import lru_cache\nfrom fastapi import FastAPI, Depends\n\napp = FastAPI()\n\n# \u672a\u512a\u5316\u7248\u672c\ndef get_settings():\n    # \u5047\u8a2d\u9019\u662f\u4e00\u500b\u6210\u672c\u8f03\u9ad8\u7684\u64cd\u4f5c\uff0c\u5982\u8b80\u53d6\u914d\u7f6e\u6587\u4ef6\n    return {\"app_name\": \"MyApp\", \"version\": \"1.0\"}\n\n# \u512a\u5316\u7248\u672c\n@lru_cache()\ndef get_cached_settings():\n    # \u76f8\u540c\u7684\u64cd\u4f5c\uff0c\u4f46\u7d50\u679c\u6703\u88ab\u7de9\u5b58\n    return {\"app_name\": \"MyApp\", \"version\": \"1.0\"}\n\n@app.get(\"/config\")\ndef read_config(settings=Depends(get_cached_settings)):\n    return settings\n</code></pre>"},{"location":"dependency-injection/05-performance/#2","title":"2. \u512a\u5316\u4f9d\u8cf4\u7684\u4f5c\u7528\u57df","text":"<p>FastAPI \u5141\u8a31\u6211\u5011\u5b9a\u7fa9\u4f9d\u8cf4\u7684\u4f5c\u7528\u57df\uff0c\u9019\u5c0d\u65bc\u8cc7\u6e90\u7ba1\u7406\u975e\u5e38\u91cd\u8981\u3002</p> <ul> <li>\u6548\u679c\uff1a\u6839\u64da\u9700\u6c42\u9078\u64c7\u9069\u7576\u7684\u4f5c\u7528\u57df\uff0c\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u8cc7\u6e90\u5275\u5efa\u548c\u92b7\u6bc0</li> <li>\u9069\u7528\u5834\u666f\uff1a\u8cc7\u6599\u5eab\u9023\u63a5\u6c60\u3001API \u5ba2\u6236\u7aef\u7b49\u9700\u8981\u7ba1\u7406\u751f\u547d\u9031\u671f\u7684\u8cc7\u6e90</li> </ul> <pre><code>from fastapi import FastAPI, Depends\n\napp = FastAPI()\n\n# \u8acb\u6c42\u7d1a\u5225\u4f9d\u8cf4\uff08\u9ed8\u8a8d\uff09\ndef get_request_db():\n    db = Database()\n    try:\n        yield db\n    finally:\n        db.close()  # \u8acb\u6c42\u7d50\u675f\u5f8c\u95dc\u9589\u9023\u63a5\n\n# \u61c9\u7528\u7d1a\u5225\u4f9d\u8cf4\n@app.on_event(\"startup\")\ndef create_app_db():\n    app.db = Database()\n\n@app.on_event(\"shutdown\")\ndef close_app_db():\n    app.db.close()\n\ndef get_app_db():\n    return app.db\n\n@app.get(\"/items\")\ndef read_items(db=Depends(get_app_db)):\n    return db.get_items()\n</code></pre>"},{"location":"dependency-injection/05-performance/#3","title":"3. \u6e1b\u5c11\u4f9d\u8cf4\u93c8\u7684\u6df1\u5ea6","text":"<p>\u904e\u9577\u7684\u4f9d\u8cf4\u93c8\u6703\u589e\u52a0\u89e3\u6790\u6642\u9593\u548c\u8907\u96dc\u6027\uff0c\u61c9\u9069\u7576\u512a\u5316\u3002</p> <ul> <li>\u6548\u679c\uff1a\u6e1b\u5c11\u4f9d\u8cf4\u89e3\u6790\u7684\u5c64\u7d1a\uff0c\u964d\u4f4e\u6027\u80fd\u958b\u92b7</li> <li>\u9069\u7528\u5834\u666f\uff1a\u8907\u96dc\u7684\u696d\u52d9\u908f\u8f2f\uff0c\u904e\u9577\u7684\u4f9d\u8cf4\u93c8</li> </ul> <pre><code># \u904e\u9577\u7684\u4f9d\u8cf4\u93c8\ndef get_settings():\n    return {\"db_url\": \"postgresql://user:pass@localhost/db\"}\n\ndef get_db(settings=Depends(get_settings)):\n    return Database(settings[\"db_url\"])\n\ndef get_user_repo(db=Depends(get_db)):\n    return UserRepository(db)\n\ndef get_auth_service(repo=Depends(get_user_repo)):\n    return AuthService(repo)\n\n@app.get(\"/users/me\")\ndef read_current_user(auth=Depends(get_auth_service), token: str = Header(None)):\n    return auth.get_current_user(token)\n\n# \u512a\u5316\u5f8c\u7684\u4f9d\u8cf4\u93c8\ndef get_auth_service():\n    settings = get_settings()\n    db = Database(settings[\"db_url\"])\n    repo = UserRepository(db)\n    return AuthService(repo)\n\n@app.get(\"/users/me\")\ndef read_current_user(auth=Depends(get_auth_service), token: str = Header(None)):\n    return auth.get_current_user(token)\n</code></pre>"},{"location":"dependency-injection/05-performance/#4","title":"4. \u4f7f\u7528\u7570\u6b65\u4f9d\u8cf4","text":"<p>\u5c0d\u65bc I/O \u5bc6\u96c6\u578b\u64cd\u4f5c\uff0c\u4f7f\u7528\u7570\u6b65\u4f9d\u8cf4\u53ef\u4ee5\u986f\u8457\u63d0\u9ad8\u6027\u80fd\u3002</p> <ul> <li>\u6548\u679c\uff1a\u5728\u9ad8\u4e26\u767c\u5834\u666f\u4e0b\uff0c\u7570\u6b65\u4f9d\u8cf4\u53ef\u4ee5\u66f4\u6709\u6548\u5730\u5229\u7528\u7cfb\u7d71\u8cc7\u6e90</li> <li>\u9069\u7528\u5834\u666f\uff1a\u8cc7\u6599\u5eab\u67e5\u8a62\u3001API \u8abf\u7528\u7b49 I/O \u5bc6\u96c6\u578b\u64cd\u4f5c</li> </ul> <pre><code>from fastapi import FastAPI, Depends\n\napp = FastAPI()\n\n# \u540c\u6b65\u7248\u672c\ndef get_data():\n    # \u5047\u8a2d\u9019\u662f\u4e00\u500b I/O \u5bc6\u96c6\u578b\u64cd\u4f5c\n    import time\n    time.sleep(1)  # \u6a21\u64ec I/O \u7b49\u5f85\n    return {\"data\": \"example\"}\n\n# \u7570\u6b65\u7248\u672c\nasync def get_data_async():\n    # \u4f7f\u7528\u7570\u6b65\u64cd\u4f5c\u66ff\u4ee3\u963b\u585e\u8abf\u7528\n    import asyncio\n    await asyncio.sleep(1)  # \u975e\u963b\u585e\u7b49\u5f85\n    return {\"data\": \"example\"}\n\n@app.get(\"/data-async\")\nasync def read_data_async(data=Depends(get_data_async)):\n    return data\n</code></pre>"},{"location":"dependency-injection/05-performance/#5","title":"5. \u4f7f\u7528\u985e\u5225\u4f9d\u8cf4\u7684\u61f6\u52a0\u8f09","text":"<p>\u985e\u5225\u4f9d\u8cf4\u53ef\u4ee5\u5be6\u73fe\u61f6\u52a0\u8f09\u6a21\u5f0f\uff0c\u50c5\u5728\u9700\u8981\u6642\u521d\u59cb\u5316\u8cc7\u6e90\u3002</p> <ul> <li>\u6548\u679c\uff1a\u907f\u514d\u5728\u6bcf\u500b\u8acb\u6c42\u4e2d\u90fd\u521d\u59cb\u5316\u6240\u6709\u8cc7\u6e90\uff0c\u53ea\u52a0\u8f09\u5be6\u969b\u9700\u8981\u7684\u8cc7\u6e90</li> <li>\u9069\u7528\u5834\u666f\uff1a\u5305\u542b\u591a\u500b\u53ef\u80fd\u4e0d\u6703\u5168\u90e8\u4f7f\u7528\u7684\u91cd\u91cf\u7d1a\u8cc7\u6e90\u7684\u4f9d\u8cf4</li> </ul> <pre><code>class LazyResource:\n    def __init__(self):\n        self._resource = None\n\n    @property\n    def resource(self):\n        if self._resource is None:\n            # \u50c5\u5728\u9996\u6b21\u8a2a\u554f\u6642\u521d\u59cb\u5316\n            self._resource = ExpensiveResource()\n        return self._resource\n\nclass ServiceWithLazyLoading:\n    def __init__(self):\n        self.lazy_resource = LazyResource()\n\n    def get_data(self):\n        # \u53ea\u6709\u5728\u8abf\u7528\u6b64\u65b9\u6cd5\u6642\u624d\u6703\u521d\u59cb\u5316\u8cc7\u6e90\n        return self.lazy_resource.resource.get_data()\n\n@app.get(\"/lazy-data\")\ndef read_lazy_data(service: ServiceWithLazyLoading = Depends(ServiceWithLazyLoading)):\n    return service.get_data()\n</code></pre>"},{"location":"dependency-injection/05-performance/#_3","title":"\u6027\u80fd\u76e3\u63a7\u8207\u5206\u6790","text":"<p>\u512a\u5316\u6027\u80fd\u7684\u7b2c\u4e00\u6b65\u662f\u4e86\u89e3\u7576\u524d\u7684\u6027\u80fd\u74f6\u9838\u3002\u4ee5\u4e0b\u662f\u4e00\u4e9b\u76e3\u63a7\u548c\u5206\u6790 FastAPI \u61c9\u7528\u6027\u80fd\u7684\u65b9\u6cd5\uff1a</p>"},{"location":"dependency-injection/05-performance/#1_1","title":"1. \u4f7f\u7528\u4e2d\u9593\u4ef6\u6e2c\u91cf\u4f9d\u8cf4\u89e3\u6790\u6642\u9593","text":"<pre><code>import time\nfrom fastapi import FastAPI, Request\n\napp = FastAPI()\n\n@app.middleware(\"http\")\nasync def add_process_time_header(request: Request, call_next):\n    start_time = time.time()\n    response = await call_next(request)\n    process_time = time.time() - start_time\n    response.headers[\"X-Process-Time\"] = str(process_time)\n    return response\n</code></pre>"},{"location":"dependency-injection/05-performance/#2_1","title":"2. \u4f7f\u7528\u5206\u6790\u5de5\u5177","text":"<ul> <li>cProfile\uff1aPython \u7684\u5167\u7f6e\u5206\u6790\u5668</li> <li>pyinstrument\uff1a\u66f4\u73fe\u4ee3\u7684 Python \u5206\u6790\u5668\uff0c\u63d0\u4f9b\u53ef\u8996\u5316\u5831\u544a</li> <li>OpenTelemetry\uff1a\u7528\u65bc\u5206\u5e03\u5f0f\u8ffd\u8e64\u7684\u958b\u6e90\u6846\u67b6</li> </ul> <pre><code># \u4f7f\u7528 cProfile \u5206\u6790\u4f9d\u8cf4\u6027\u80fd\nimport cProfile\n\ndef profile_dependency():\n    profiler = cProfile.Profile()\n    profiler.enable()\n\n    # \u57f7\u884c\u4f9d\u8cf4\u51fd\u6578\n    result = expensive_dependency()\n\n    profiler.disable()\n    profiler.print_stats(sort='cumtime')\n\n    return result\n</code></pre>"},{"location":"dependency-injection/05-performance/#_4","title":"\u6700\u4f73\u5be6\u8e10","text":"<ol> <li>\u512a\u5148\u8003\u616e\u53ef\u8b80\u6027\u548c\u53ef\u7dad\u8b77\u6027\uff1a\u9664\u975e\u6709\u660e\u78ba\u7684\u6027\u80fd\u554f\u984c\uff0c\u5426\u5247\u4e0d\u8981\u904e\u65e9\u512a\u5316\u3002</li> <li>\u9069\u7576\u4f7f\u7528\u7de9\u5b58\uff1a\u5c0d\u65bc\u8a08\u7b97\u6210\u672c\u9ad8\u4f46\u7d50\u679c\u4e0d\u5e38\u8b8a\u5316\u7684\u4f9d\u8cf4\uff0c\u4f7f\u7528\u7de9\u5b58\u3002</li> <li>\u9078\u64c7\u6b63\u78ba\u7684\u4f5c\u7528\u57df\uff1a\u6839\u64da\u8cc7\u6e90\u7684\u6027\u8cea\u9078\u64c7\u9069\u7576\u7684\u751f\u547d\u9031\u671f\u7ba1\u7406\u7b56\u7565\u3002</li> <li>\u76e3\u63a7\u95dc\u9375\u4f9d\u8cf4\uff1a\u6301\u7e8c\u76e3\u63a7\u95dc\u9375\u4f9d\u8cf4\u7684\u6027\u80fd\uff0c\u53ca\u6642\u767c\u73fe\u554f\u984c\u3002</li> <li>\u8ca0\u8f09\u6e2c\u8a66\uff1a\u5728\u771f\u5be6\u8ca0\u8f09\u4e0b\u6e2c\u8a66\u61c9\u7528\uff0c\u78ba\u4fdd\u4f9d\u8cf4\u6ce8\u5165\u7cfb\u7d71\u80fd\u5920\u8655\u7406\u9ad8\u4e26\u767c\u8acb\u6c42\u3002</li> <li>\u4f7f\u7528\u9023\u63a5\u6c60\uff1a\u5c0d\u65bc\u8cc7\u6599\u5eab\u7b49\u8cc7\u6e90\uff0c\u4f7f\u7528\u9023\u63a5\u6c60\u800c\u4e0d\u662f\u6bcf\u6b21\u8acb\u6c42\u5275\u5efa\u65b0\u9023\u63a5\u3002</li> </ol>"},{"location":"dependency-injection/06-auth/","title":"FastAPI \u4f9d\u8cf4\u6ce8\u5165\u5be6\u6230\uff1a\u8eab\u4efd\u9a57\u8b49\u6a21\u5f0f","text":""},{"location":"dependency-injection/06-auth/#_1","title":"\u57fa\u672c\u8eab\u4efd\u9a57\u8b49\u6a21\u5f0f","text":""},{"location":"dependency-injection/06-auth/#1-api","title":"1. API \u5bc6\u9470\u9a57\u8b49","text":"<p>\u6700\u7c21\u55ae\u7684\u8eab\u4efd\u9a57\u8b49\u5f62\u5f0f\uff0c\u901a\u904e\u8acb\u6c42\u982d\u6216\u67e5\u8a62\u53c3\u6578\u50b3\u905e API \u5bc6\u9470\u3002</p> <ul> <li>\u512a\u9ede\uff1a \u5be6\u73fe\u7c21\u55ae\uff0c\u9069\u5408\u670d\u52d9\u9593\u901a\u4fe1</li> <li>\u7f3a\u9ede\uff1a \u5b89\u5168\u6027\u8f03\u4f4e\uff0c\u7121\u6cd5\u8f15\u9b06\u8b58\u5225\u4f7f\u7528\u8005\u8eab\u4efd</li> </ul> <pre><code>from fastapi import FastAPI, Depends, HTTPException, Security\nfrom fastapi.security import APIKeyHeader\n\napp = FastAPI()\n\n# \u5275\u5efa API \u5bc6\u9470\u982d\u90e8\u9a57\u8b49\u5668\napi_key_header = APIKeyHeader(name=\"X-API-Key\")\n\n# \u5b9a\u7fa9\u4f9d\u8cf4\u51fd\u6578\nasync def get_api_key(api_key: str = Security(api_key_header)):\n    # \u5728\u5be6\u969b\u61c9\u7528\u4e2d\uff0c\u9019\u88e1\u61c9\u8a72\u67e5\u8a62\u8cc7\u6599\u5eab\u6216\u914d\u7f6e\n    valid_api_keys = {\"your-api-key-here\", \"another-valid-key\"}\n\n    if api_key not in valid_api_keys:\n        raise HTTPException(\n            status_code=401,\n            detail=\"\u7121\u6548\u7684 API \u5bc6\u9470\"\n        )\n\n    return api_key\n\n@app.get(\"/secure-endpoint\")\nasync def secure_endpoint(api_key: str = Depends(get_api_key)):\n    return {\"message\": \"\u60a8\u5df2\u901a\u904e\u8eab\u4efd\u9a57\u8b49\", \"key_used\": api_key}\n</code></pre>"},{"location":"dependency-injection/06-auth/#2-basic-auth","title":"2. \u57fa\u672c\u8eab\u4efd\u9a57\u8b49\uff08Basic Auth\uff09","text":"<p>\u4f7f\u7528\u7528\u6236\u540d\u548c\u5bc6\u78bc\u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u901a\u5e38\u901a\u904e HTTP \u57fa\u672c\u8eab\u4efd\u9a57\u8b49\u982d\u90e8\u50b3\u905e\u3002</p> <ul> <li>\u512a\u9ede\uff1a\u5167\u5efa\u65bc HTTP \u5354\u8b70\uff0c\u7c21\u55ae\u6613\u7528</li> <li>\u7f3a\u9ede\uff1a\u6bcf\u6b21\u8acb\u6c42\u90fd\u9700\u8981\u767c\u9001\u6191\u8b49\uff0c\u5bc6\u78bc\u4ee5\u8f03\u5f31\u7684\u7de8\u78bc\u65b9\u5f0f\u50b3\u8f38</li> </ul> <pre><code>from fastapi import FastAPI, Depends, HTTPException\nfrom fastapi.security import HTTPBasic, HTTPBasicCredentials\nimport secrets\n\napp = FastAPI()\n\nsecurity = HTTPBasic()\n\n# \u5b9a\u7fa9\u4f9d\u8cf4\u51fd\u6578\ndef get_current_user(credentials: HTTPBasicCredentials = Depends(security)):\n    # \u5728\u5be6\u969b\u61c9\u7528\u4e2d\uff0c\u61c9\u8a72\u4f7f\u7528\u5b89\u5168\u7684\u5bc6\u78bc\u54c8\u5e0c\u6bd4\u8f03\n    correct_username = secrets.compare_digest(credentials.username, \"admin\")\n    correct_password = secrets.compare_digest(credentials.password, \"password123\")\n\n    if not (correct_username and correct_password):\n        raise HTTPException(\n            status_code=401,\n            detail=\"\u7528\u6236\u540d\u6216\u5bc6\u78bc\u932f\u8aa4\",\n            headers={\"WWW-Authenticate\": \"Basic\"},\n        )\n\n    return credentials.username\n\n@app.get(\"/users/me\")\ndef read_current_user(username: str = Depends(get_current_user)):\n    return {\"username\": username}\n</code></pre>"},{"location":"dependency-injection/06-auth/#3-jwt","title":"3. JWT \u8eab\u4efd\u9a57\u8b49","text":"<p>JSON Web Token (JWT) \u662f\u4e00\u7a2e\u6d41\u884c\u7684\u8eab\u4efd\u9a57\u8b49\u6a5f\u5236\uff0c\u7279\u5225\u9069\u5408\u7121\u72c0\u614b API\u3002</p> <ul> <li>\u512a\u9ede\uff1a \u7121\u72c0\u614b\uff0c\u4e0d\u9700\u8981\u5728\u4f3a\u670d\u5668\u5b58\u5132\u6703\u8a71\uff0c\u53ef\u5305\u542b\u7528\u6236\u76f8\u95dc\u4fe1\u606f\u4e14\u53ef\u8a2d\u7f6e\u904e\u671f\u6642\u9593</li> <li>\u7f3a\u9ede\uff1a\u9700\u8981\u59a5\u5584\u4fdd\u7ba1\u5bc6\u9470\uff0cToken \u4e00\u65e6\u767c\u51fa\u7121\u6cd5\u64a4\u92b7\uff08\u9664\u975e\u4f7f\u7528\u9ed1\u540d\u55ae\uff09</li> </ul> <pre><code>from datetime import datetime, timedelta\nfrom typing import Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, status\nfrom fastapi.security import OAuth2PasswordBearer\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\n\n# \u914d\u7f6e\nSECRET_KEY = \"your-secret-key\"  # \u5728\u5be6\u969b\u61c9\u7528\u4e2d\u61c9\u4f7f\u7528\u5b89\u5168\u7684\u96a8\u6a5f\u5bc6\u9470\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n# \u6a21\u578b\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\nclass TokenData(BaseModel):\n    username: Optional[str] = None\n\nclass User(BaseModel):\n    username: str\n    email: Optional[str] = None\n    disabled: Optional[bool] = None\n\n# \u5de5\u5177\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = FastAPI()\n\n# \u6a21\u64ec\u7528\u6236\u8cc7\u6599\u5eab\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": pwd_context.hash(\"secret\"),\n        \"disabled\": False,\n    }\n}\n\n# \u8f14\u52a9\u51fd\u6578\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return User(**user_dict)\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, fake_db[username][\"hashed_password\"]):\n        return False\n    return user\n\ndef create_access_token(data: dict, expires_delta: Optional[timedelta] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.utcnow() + expires_delta\n    else:\n        expire = datetime.utcnow() + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n# \u4f9d\u8cf4\u51fd\u6578\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"\u7121\u6cd5\u9a57\u8b49\u6191\u8b49\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except JWTError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"\u7528\u6236\u5df2\u505c\u7528\")\n    return current_user\n\n# \u8def\u7531\n@app.post(\"/token\", response_model=Token)\nasync def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends()):\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"\u7528\u6236\u540d\u6216\u5bc6\u78bc\u932f\u8aa4\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return {\"access_token\": access_token, \"token_type\": \"bearer\"}\n\n@app.get(\"/users/me\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n</code></pre>"},{"location":"dependency-injection/06-auth/#4-oauth2","title":"4. OAuth2 \u8eab\u4efd\u9a57\u8b49","text":"<p>OAuth2 \u662f\u4e00\u7a2e\u6388\u6b0a\u6846\u67b6\uff0c\u5141\u8a31\u7b2c\u4e09\u65b9\u61c9\u7528\u8a2a\u554f\u7528\u6236\u8cc7\u6e90\u800c\u7121\u9700\u5171\u4eab\u5bc6\u78bc\u3002</p> <ul> <li>\u512a\u9ede\uff1a\u652f\u6301\u7b2c\u4e09\u65b9\u8eab\u4efd\u9a57\u8b49\uff0c\u7528\u6236\u7121\u9700\u5411\u4f60\u7684\u61c9\u7528\u63d0\u4f9b\u5bc6\u78bc\uff0c\u53ef\u4ee5\u9650\u5236\u8a2a\u554f\u7bc4\u570d</li> <li>\u7f3a\u9ede\uff1a\u5be6\u73fe\u8f03\u70ba\u8907\u96dc\uff0c\u9700\u8981\u5916\u90e8\u8eab\u4efd\u63d0\u4f9b\u8005</li> </ul> <pre><code>from fastapi import FastAPI, Depends, HTTPException, status\nfrom fastapi.security import OAuth2AuthorizationCodeBearer\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n# \u914d\u7f6e OAuth2 \u6388\u6b0a\u78bc\u6d41\noauth2_scheme = OAuth2AuthorizationCodeBearer(\n    authorizationUrl=\"https://example.com/oauth/authorize\",\n    tokenUrl=\"https://example.com/oauth/token\",\n)\n\nclass User(BaseModel):\n    username: str\n    email: str\n    full_name: str\n\n# \u6a21\u64ec OAuth2 \u4ee4\u724c\u9a57\u8b49\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    # \u5728\u5be6\u969b\u61c9\u7528\u4e2d\uff0c\u9019\u88e1\u61c9\u8a72\u9a57\u8b49\u4ee4\u724c\u4e26\u5f9e\u8eab\u4efd\u63d0\u4f9b\u8005\u7372\u53d6\u7528\u6236\u4fe1\u606f\n    if token != \"valid_token\":\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"\u7121\u6548\u7684\u8eab\u4efd\u9a57\u8b49\u6191\u8b49\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n\n    # \u6a21\u64ec\u5f9e\u4ee4\u724c\u4e2d\u7372\u53d6\u7684\u7528\u6236\u4fe1\u606f\n    return User(\n        username=\"johndoe\",\n        email=\"johndoe@example.com\",\n        full_name=\"John Doe\"\n    )\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n</code></pre>"},{"location":"dependency-injection/06-auth/#_2","title":"\u7d44\u5408\u8207\u81ea\u5b9a\u7fa9\u8eab\u4efd\u9a57\u8b49","text":""},{"location":"dependency-injection/06-auth/#1","title":"1. \u591a\u5c64\u8eab\u4efd\u9a57\u8b49","text":"<p>\u7d50\u5408\u591a\u7a2e\u8eab\u4efd\u9a57\u8b49\u65b9\u5f0f\uff0c\u63d0\u4f9b\u66f4\u9748\u6d3b\u7684\u5b89\u5168\u7b56\u7565\u3002</p> <ul> <li>\u512a\u9ede\uff1a\u652f\u6301\u591a\u7a2e\u8eab\u4efd\u9a57\u8b49\u65b9\u5f0f\uff0c\u63d0\u4f9b\u66f4\u9748\u6d3b\u7684\u8a2a\u554f\u63a7\u5236</li> <li>\u7f3a\u9ede\uff1a\u589e\u52a0\u8907\u96dc\u6027\uff0c\u9700\u8981\u66f4\u591a\u7684\u6e2c\u8a66\u8986\u84cb</li> </ul> <pre><code>from fastapi import FastAPI, Depends, HTTPException, Security\nfrom fastapi.security import APIKeyHeader, OAuth2PasswordBearer\nfrom typing import Optional\n\napp = FastAPI()\n\n# \u5b9a\u7fa9\u591a\u7a2e\u8eab\u4efd\u9a57\u8b49\u65b9\u5f0f\napi_key_header = APIKeyHeader(name=\"X-API-Key\", auto_error=False)\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\", auto_error=False)\n\n# \u7d44\u5408\u8eab\u4efd\u9a57\u8b49\u4f9d\u8cf4\nasync def get_current_user(\n    api_key: Optional[str] = Security(api_key_header),\n    token: Optional[str] = Security(oauth2_scheme)\n):\n    if api_key:\n        # \u9a57\u8b49 API \u5bc6\u9470\n        if api_key == \"valid-api-key\":\n            return {\"user\": \"api_user\", \"auth_method\": \"api_key\"}\n\n    if token:\n        # \u9a57\u8b49 OAuth2 \u4ee4\u724c\n        if token == \"valid-token\":\n            return {\"user\": \"oauth_user\", \"auth_method\": \"oauth\"}\n\n    raise HTTPException(\n        status_code=401,\n        detail=\"\u9700\u8981\u6709\u6548\u7684\u8eab\u4efd\u9a57\u8b49\u6191\u8b49\"\n    )\n\n@app.get(\"/secure\")\nasync def secure_endpoint(user = Depends(get_current_user)):\n    return {\"message\": \"\u5df2\u901a\u904e\u8eab\u4efd\u9a57\u8b49\", \"user\": user}\n</code></pre>"},{"location":"dependency-injection/06-auth/#2-rbac","title":"2. \u57fa\u65bc\u89d2\u8272\u7684\u8a2a\u554f\u63a7\u5236 (RBAC)","text":"<p>\u5728\u8eab\u4efd\u9a57\u8b49\u4e4b\u4e0a\u6dfb\u52a0\u6388\u6b0a\u908f\u8f2f\uff0c\u6839\u64da\u7528\u6236\u89d2\u8272\u9650\u5236\u8a2a\u554f\u3002</p> <ul> <li>\u512a\u9ede\uff1a \u7cbe\u7d30\u7684\u8a2a\u554f\u63a7\u5236\uff0c\u57fa\u65bc\u7528\u6236\u89d2\u8272\u7684\u6388\u6b0a</li> <li>\u7f3a\u9ede\uff1a\u9700\u8981\u7dad\u8b77\u89d2\u8272\u8207\u6b0a\u9650\u6620\u5c04\uff0c\u53ef\u80fd\u9700\u8981\u66f4\u8907\u96dc\u7684\u89d2\u8272\u5c64\u6b21\u7d50\u69cb</li> </ul> <pre><code>from fastapi import FastAPI, Depends, HTTPException\nfrom fastapi.security import OAuth2PasswordBearer\nfrom typing import List\n\napp = FastAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n# \u6a21\u64ec\u7528\u6236\u8cc7\u6599\u5eab\nfake_users_db = {\n    \"alice\": {\n        \"username\": \"alice\",\n        \"roles\": [\"user\", \"admin\"]\n    },\n    \"bob\": {\n        \"username\": \"bob\",\n        \"roles\": [\"user\"]\n    }\n}\n\n# \u8eab\u4efd\u9a57\u8b49\u4f9d\u8cf4\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    # \u6a21\u64ec\u4ee4\u724c\u89e3\u6790\uff0c\u5be6\u969b\u61c9\u7528\u4e2d\u61c9\u9a57\u8b49 JWT\n    username = token\n\n    if username not in fake_users_db:\n        raise HTTPException(status_code=401, detail=\"\u7121\u6548\u7684\u6191\u8b49\")\n\n    return fake_users_db[username]\n\n# \u89d2\u8272\u6aa2\u67e5\u4f9d\u8cf4\ndef has_role(required_roles: List[str]):\n    async def role_checker(current_user = Depends(get_current_user)):\n        for role in required_roles:\n            if role not in current_user[\"roles\"]:\n                raise HTTPException(\n                    status_code=403,\n                    detail=f\"\u6b0a\u9650\u4e0d\u8db3\uff0c\u9700\u8981\u89d2\u8272: {required_roles}\"\n                )\n        return current_user\n\n    return role_checker\n\n# \u8def\u7531\n@app.get(\"/users/profile\")\nasync def read_profile(user = Depends(get_current_user)):\n    return user\n\n@app.get(\"/admin/dashboard\")\nasync def admin_dashboard(user = Depends(has_role([\"admin\"]))):\n    return {\"message\": \"\u7ba1\u7406\u54e1\u5100\u8868\u677f\", \"user\": user}\n</code></pre>"},{"location":"dependency-injection/06-auth/#_3","title":"\u6700\u4f73\u5be6\u8e10","text":"<ol> <li>\u4f7f\u7528\u5b89\u5168\u7684\u5bc6\u78bc\u5b58\u5132\uff1a\u59cb\u7d42\u4f7f\u7528\u5982 bcrypt \u6216 Argon2 \u7b49\u5b89\u5168\u7684\u54c8\u5e0c\u7b97\u6cd5\u5b58\u5132\u5bc6\u78bc\u3002</li> <li>\u5be6\u65bd\u4ee4\u724c\u904e\u671f\uff1a\u70ba JWT \u6216\u5176\u4ed6\u4ee4\u724c\u8a2d\u7f6e\u5408\u7406\u7684\u904e\u671f\u6642\u9593\u3002</li> <li>\u4f7f\u7528 HTTPS\uff1a\u6240\u6709\u8eab\u4efd\u9a57\u8b49\u901a\u4fe1\u61c9\u901a\u904e HTTPS \u9032\u884c\uff0c\u4ee5\u9632\u6b62\u4e2d\u9593\u4eba\u653b\u64ca\u3002</li> <li>\u5be6\u65bd\u901f\u7387\u9650\u5236\uff1a\u9650\u5236\u8eab\u4efd\u9a57\u8b49\u5617\u8a66\u6b21\u6578\uff0c\u9632\u6b62\u66b4\u529b\u7834\u89e3\u653b\u64ca\u3002</li> <li>\u5206\u5c64\u8eab\u4efd\u9a57\u8b49\uff1a\u5c07\u8eab\u4efd\u9a57\u8b49\u908f\u8f2f\u5206\u70ba\u591a\u500b\u53ef\u91cd\u7528\u7684\u4f9d\u8cf4\u3002</li> <li>\u4f7f\u7528 OAuth2 \u5bc6\u78bc\u6d41\u6642\u7684\u5b89\u5168\u8003\u616e\uff1a\u5982\u679c\u4f7f\u7528\u5bc6\u78bc\u6d41\uff0c\u78ba\u4fdd\u5ba2\u6236\u7aef\u662f\u53ef\u4fe1\u7684\u3002</li> </ol>"},{"location":"dependency-injection/07-database/","title":"FastAPI \u4f9d\u8cf4\u6ce8\u5165\u5be6\u6230\uff1a\u8cc7\u6599\u5eab\u7ba1\u7406","text":""},{"location":"dependency-injection/07-database/#_1","title":"\u57fa\u672c\u8cc7\u6599\u5eab\u9023\u63a5\u7ba1\u7406","text":""},{"location":"dependency-injection/07-database/#1","title":"1. \u540c\u6b65\u8cc7\u6599\u5eab\u9023\u63a5","text":"<p>\u6700\u7c21\u55ae\u7684\u8cc7\u6599\u5eab\u9023\u63a5\u6a21\u5f0f\u662f\u70ba\u6bcf\u500b\u8acb\u6c42\u5275\u5efa\u4e00\u500b\u65b0\u7684\u9023\u63a5\uff0c\u4e26\u5728\u8acb\u6c42\u7d50\u675f\u6642\u95dc\u9589\u5b83\u3002</p> <ul> <li>\u512a\u9ede\uff1a\u7c21\u55ae\u6613\u61c2\uff0c\u6bcf\u500b\u8acb\u6c42\u90fd\u6709\u7368\u7acb\u7684\u9023\u63a5\uff0c\u907f\u514d\u4e26\u767c\u554f\u984c</li> <li>\u7f3a\u9ede\uff1a\u983b\u7e41\u5275\u5efa\u548c\u95dc\u9589\u9023\u63a5\u53ef\u80fd\u5f71\u97ff\u6027\u80fd\uff0c\u4e0d\u9069\u5408\u9ad8\u4e26\u767c\u5834\u666f</li> </ul> <pre><code>from fastapi import FastAPI, Depends\nimport sqlite3\nfrom contextlib import contextmanager\n\napp = FastAPI()\n\n@contextmanager\ndef get_db_connection():\n    conn = sqlite3.connect(\"example.db\")\n    conn.row_factory = sqlite3.Row\n    try:\n        yield conn\n    finally:\n        conn.close()\n\ndef get_db():\n    with get_db_connection() as conn:\n        yield conn\n\n@app.get(\"/users/{user_id}\")\ndef read_user(user_id: int, db: sqlite3.Connection = Depends(get_db)):\n    user = db.execute(\n        \"SELECT * FROM users WHERE id = ?\", (user_id,)\n    ).fetchone()\n\n    if user is None:\n        return {\"error\": \"User not found\"}\n\n    return dict(user)\n</code></pre>"},{"location":"dependency-injection/07-database/#2","title":"2. \u7570\u6b65\u8cc7\u6599\u5eab\u9023\u63a5","text":"<p>\u5c0d\u65bc\u652f\u6301\u7570\u6b65\u7684\u8cc7\u6599\u5eab\u9a45\u52d5\uff0c\u6211\u5011\u53ef\u4ee5\u4f7f\u7528\u7570\u6b65\u4f9d\u8cf4\u5be6\u73fe\u66f4\u9ad8\u6548\u7684\u9023\u63a5\u7ba1\u7406\u3002</p> <ul> <li>\u512a\u9ede\uff1a\u652f\u6301\u7570\u6b65\u64cd\u4f5c\u63d0\u9ad8\u4e26\u767c\u6027\u80fd\uff0c\u9023\u63a5\u5728\u61c9\u7528\u555f\u52d5\u6642\u5efa\u7acb\uff0c\u907f\u514d\u983b\u7e41\u5275\u5efa\u9023\u63a5</li> <li>\u7f3a\u9ede\uff1a\u9700\u8981\u4f7f\u7528\u652f\u6301\u7570\u6b65\u7684\u8cc7\u6599\u5eab\u9a45\u52d5\uff0c\u53ef\u80fd\u9700\u8981\u66f4\u8907\u96dc\u7684\u932f\u8aa4\u8655\u7406</li> </ul> <pre><code>from fastapi import FastAPI, Depends\nfrom databases import Database\nfrom sqlalchemy import create_engine, MetaData, Table, Column, Integer, String\n\n# \u8cc7\u6599\u5eab\u914d\u7f6e\nDATABASE_URL = \"sqlite:///./test.db\"\ndatabase = Database(DATABASE_URL)\n\n# SQLAlchemy \u6a21\u578b\u5b9a\u7fa9\nmetadata = MetaData()\nusers = Table(\n    \"users\",\n    metadata,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"name\", String),\n    Column(\"email\", String)\n)\n\n# \u5275\u5efa\u8868\uff08\u5728\u5be6\u969b\u61c9\u7528\u4e2d\u901a\u5e38\u4f7f\u7528\u9077\u79fb\u5de5\u5177\uff09\nengine = create_engine(DATABASE_URL)\nmetadata.create_all(engine)\n\napp = FastAPI()\n\n# \u555f\u52d5\u548c\u95dc\u9589\u4e8b\u4ef6\n@app.on_event(\"startup\")\nasync def startup():\n    await database.connect()\n\n@app.on_event(\"shutdown\")\nasync def shutdown():\n    await database.disconnect()\n\n# \u4f9d\u8cf4\u51fd\u6578\nasync def get_db():\n    return database\n\n@app.get(\"/users/{user_id}\")\nasync def read_user(user_id: int, db: Database = Depends(get_db)):\n    query = users.select().where(users.c.id == user_id)\n    user = await db.fetch_one(query)\n\n    if user is None:\n        return {\"error\": \"User not found\"}\n\n    return dict(user)\n</code></pre>"},{"location":"dependency-injection/07-database/#_2","title":"\u9032\u968e\u8cc7\u6599\u5eab\u7ba1\u7406\u6a21\u5f0f","text":""},{"location":"dependency-injection/07-database/#1_1","title":"1. \u9023\u63a5\u6c60\u7ba1\u7406","text":"<p>\u5c0d\u65bc\u9ad8\u4e26\u767c\u61c9\u7528\uff0c\u4f7f\u7528\u9023\u63a5\u6c60\u53ef\u4ee5\u986f\u8457\u63d0\u9ad8\u6027\u80fd\u3002</p> <ul> <li>\u512a\u9ede\uff1a\u9ad8\u6548\u91cd\u7528\u8cc7\u6599\u5eab\u9023\u63a5\uff0c\u9069\u5408\u9ad8\u4e26\u767c\u5834\u666f\uff0c\u907f\u514d\u9023\u63a5\u6cc4\u6f0f</li> <li>\u7f3a\u9ede\uff1a\u9700\u8981\u8b39\u614e\u914d\u7f6e\u6c60\u5927\u5c0f\u548c\u8d85\u6642\uff0c\u53ef\u80fd\u9700\u8981\u8655\u7406\u6c60\u8017\u76e1\u7684\u60c5\u6cc1</li> </ul> <pre><code>from fastapi import FastAPI, Depends\nimport databases\nimport sqlalchemy\n\n# \u8cc7\u6599\u5eab\u914d\u7f6e\nDATABASE_URL = \"postgresql://user:password@localhost/dbname\"\ndatabase = databases.Database(DATABASE_URL)\n\n# SQLAlchemy \u6a21\u578b\nmetadata = sqlalchemy.MetaData()\nusers = sqlalchemy.Table(\n    \"users\",\n    metadata,\n    sqlalchemy.Column(\"id\", sqlalchemy.Integer, primary_key=True),\n    sqlalchemy.Column(\"name\", sqlalchemy.String),\n    sqlalchemy.Column(\"email\", sqlalchemy.String)\n)\n\napp = FastAPI()\n\n@app.on_event(\"startup\")\nasync def startup():\n    # \u9023\u63a5\u6c60\u914d\u7f6e\n    await database.connect()\n\n@app.on_event(\"shutdown\")\nasync def shutdown():\n    await database.disconnect()\n\nasync def get_db():\n    return database\n\n@app.get(\"/users/{user_id}\")\nasync def read_user(user_id: int, db: databases.Database = Depends(get_db)):\n    query = users.select().where(users.c.id == user_id)\n    user = await db.fetch_one(query)\n\n    if user is None:\n        return {\"error\": \"User not found\"}\n\n    return dict(user)\n</code></pre>"},{"location":"dependency-injection/07-database/#2_1","title":"2. \u4e8b\u52d9\u7ba1\u7406","text":"<p>\u5c0d\u65bc\u9700\u8981\u539f\u5b50\u6027\u64cd\u4f5c\u7684\u5834\u666f\uff0c\u6211\u5011\u53ef\u4ee5\u4f7f\u7528\u4f9d\u8cf4\u6ce8\u5165\u5be6\u73fe\u4e8b\u52d9\u7ba1\u7406\u3002</p> <ul> <li>\u512a\u9ede\uff1a \u78ba\u4fdd\u64cd\u4f5c\u7684\u539f\u5b50\u6027\uff0c\u81ea\u52d5\u8655\u7406\u63d0\u4ea4\u548c\u56de\u6efe\uff0c\u63d0\u4f9b\u4e00\u81f4\u7684\u8cc7\u6599\u8996\u5716</li> <li>\u7f3a\u9ede\uff1a \u9700\u8981\u8b39\u614e\u7ba1\u7406\u4e8b\u52d9\u7bc4\u570d\uff0c\u9577\u6642\u9593\u4e8b\u52d9\u53ef\u80fd\u5f71\u97ff\u4e26\u767c\u6027\u80fd</li> </ul> <pre><code>from fastapi import FastAPI, Depends, HTTPException\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker, Session\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom pydantic import BaseModel\nfrom typing import List\n\n# \u8cc7\u6599\u5eab\u914d\u7f6e\nDATABASE_URL = \"postgresql://user:password@localhost/dbname\"\nengine = create_engine(DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\n\n# SQLAlchemy \u6a21\u578b\nclass UserModel(Base):\n    __tablename__ = \"users\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    name = Column(String, index=True)\n    email = Column(String, unique=True, index=True)\n\n# Pydantic \u6a21\u578b\nclass UserCreate(BaseModel):\n    name: str\n    email: str\n\nclass User(UserCreate):\n    id: int\n\n    class Config:\n        orm_mode = True\n\napp = FastAPI()\n\n# \u4f9d\u8cf4\u51fd\u6578\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n# \u4f7f\u7528\u4e8b\u52d9\u7684\u8def\u7531\n@app.post(\"/users/\", response_model=User)\ndef create_user(user: UserCreate, db: Session = Depends(get_db)):\n    # \u6aa2\u67e5\u90f5\u7bb1\u662f\u5426\u5df2\u5b58\u5728\n    db_user = db.query(UserModel).filter(UserModel.email == user.email).first()\n    if db_user:\n        raise HTTPException(status_code=400, detail=\"Email already registered\")\n\n    # \u5275\u5efa\u65b0\u7528\u6236\n    db_user = UserModel(**user.dict())\n\n    # \u5728\u4e8b\u52d9\u4e2d\u57f7\u884c\u64cd\u4f5c\n    try:\n        db.add(db_user)\n        db.commit()\n        db.refresh(db_user)\n    except Exception as e:\n        db.rollback()\n        raise HTTPException(status_code=500, detail=f\"Database error: {str(e)}\")\n\n    return db_user\n</code></pre>"},{"location":"dependency-injection/07-database/#3-repository-pattern","title":"3. \u8cc7\u6e90\u5eab\u6a21\u5f0f (Repository Pattern)","text":"<p>\u8cc7\u6e90\u5eab\u6a21\u5f0f\u5c07\u8cc7\u6599\u5eab\u64cd\u4f5c\u5c01\u88dd\u5728\u5c08\u7528\u985e\u4e2d\uff0c\u63d0\u4f9b\u66f4\u597d\u7684\u95dc\u6ce8\u9ede\u5206\u96e2\u3002</p> <ul> <li>\u512a\u9ede\uff1a\u66f4\u597d\u7684\u95dc\u6ce8\u9ede\u5206\u96e2\uff0c\u63d0\u9ad8\u4ee3\u78bc\u53ef\u8b80\u6027\u548c\u53ef\u7dad\u8b77\u6027\uff0c\u4fbf\u65bc\u55ae\u5143\u6e2c\u8a66</li> <li>\u7f3a\u9ede\uff1a\u589e\u52a0\u984d\u5916\u7684\u62bd\u8c61\u5c64\uff0c\u53ef\u80fd\u5c0e\u81f4\u4ee3\u78bc\u91cf\u589e\u52a0</li> </ul> <pre><code>from fastapi import FastAPI, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom typing import List, Optional\n\n# \u5047\u8a2d\u5df2\u5b9a\u7fa9 SQLAlchemy \u6a21\u578b\u548c get_db \u4f9d\u8cf4\n\n# \u7528\u6236\u8cc7\u6e90\u5eab\nclass UserRepository:\n    def __init__(self, db: Session):\n        self.db = db\n\n    def get_by_id(self, user_id: int) -&gt; Optional[UserModel]:\n        return self.db.query(UserModel).filter(UserModel.id == user_id).first()\n\n    def get_by_email(self, email: str) -&gt; Optional[UserModel]:\n        return self.db.query(UserModel).filter(UserModel.email == email).first()\n\n    def create(self, user: UserCreate) -&gt; UserModel:\n        db_user = UserModel(**user.dict())\n        self.db.add(db_user)\n        self.db.commit()\n        self.db.refresh(db_user)\n        return db_user\n\n    def list_all(self, skip: int = 0, limit: int = 100) -&gt; List[UserModel]:\n        return self.db.query(UserModel).offset(skip).limit(limit).all()\n\n# \u4f9d\u8cf4\u51fd\u6578\ndef get_user_repository(db: Session = Depends(get_db)) -&gt; UserRepository:\n    return UserRepository(db)\n\napp = FastAPI()\n\n@app.get(\"/users/{user_id}\", response_model=User)\ndef read_user(\n    user_id: int, \n    user_repo: UserRepository = Depends(get_user_repository)\n):\n    db_user = user_repo.get_by_id(user_id)\n    if db_user is None:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return db_user\n\n@app.post(\"/users/\", response_model=User)\ndef create_user(\n    user: UserCreate, \n    user_repo: UserRepository = Depends(get_user_repository)\n):\n    db_user = user_repo.get_by_email(user.email)\n    if db_user:\n        raise HTTPException(status_code=400, detail=\"Email already registered\")\n\n    return user_repo.create(user)\n</code></pre>"},{"location":"dependency-injection/07-database/#_3","title":"\u9ad8\u7d1a\u6280\u5de7\u8207\u6700\u4f73\u5be6\u8e10","text":""},{"location":"dependency-injection/07-database/#1_2","title":"1. \u591a\u8cc7\u6599\u5eab\u652f\u6301","text":"<p>\u6709\u6642\u61c9\u7528\u9700\u8981\u9023\u63a5\u591a\u500b\u8cc7\u6599\u5eab\uff0c\u6211\u5011\u53ef\u4ee5\u4f7f\u7528\u4f9d\u8cf4\u6ce8\u5165\u4f86\u7ba1\u7406\u591a\u500b\u8cc7\u6599\u5eab\u9023\u63a5\u3002</p> <ul> <li>\u512a\u9ede\uff1a\u652f\u6301\u591a\u8cc7\u6599\u5eab\u67b6\u69cb\uff0c\u6e05\u6670\u5340\u5206\u4e0d\u540c\u8cc7\u6599\u5eab\u7684\u7528\u9014\uff0c\u4fbf\u65bc\u5be6\u73fe\u8b80\u5beb\u5206\u96e2</li> <li>\u7f3a\u9ede\uff1a\u589e\u52a0\u7cfb\u7d71\u8907\u96dc\u6027\uff0c\u9700\u8981\u8655\u7406\u8de8\u8cc7\u6599\u5eab\u4e00\u81f4\u6027\u554f\u984c</li> </ul> <pre><code>from fastapi import FastAPI, Depends\nfrom databases import Database\n\napp = FastAPI()\n\n# \u591a\u8cc7\u6599\u5eab\u914d\u7f6e\nmain_db = Database(\"postgresql://user:password@localhost/main_db\")\nanalytics_db = Database(\"postgresql://user:password@localhost/analytics_db\")\n\n@app.on_event(\"startup\")\nasync def startup():\n    await main_db.connect()\n    await analytics_db.connect()\n\n@app.on_event(\"shutdown\")\nasync def shutdown():\n    await main_db.disconnect()\n    await analytics_db.disconnect()\n\n# \u4f9d\u8cf4\u51fd\u6578\nasync def get_main_db():\n    return main_db\n\nasync def get_analytics_db():\n    return analytics_db\n\n@app.get(\"/user-stats/{user_id}\")\nasync def get_user_stats(\n    user_id: int,\n    main_db: Database = Depends(get_main_db),\n    analytics_db: Database = Depends(get_analytics_db)\n):\n    # \u5f9e\u4e3b\u8cc7\u6599\u5eab\u7372\u53d6\u7528\u6236\u8cc7\u8a0a\n    user = await main_db.fetch_one(\n        \"SELECT id, name FROM users WHERE id = :id\", \n        values={\"id\": user_id}\n    )\n\n    if not user:\n        return {\"error\": \"User not found\"}\n\n    # \u5f9e\u5206\u6790\u8cc7\u6599\u5eab\u7372\u53d6\u7528\u6236\u7d71\u8a08\u6578\u64da\n    stats = await analytics_db.fetch_one(\n        \"SELECT user_id, visit_count, last_visit FROM user_stats WHERE user_id = :id\",\n        values={\"id\": user_id}\n    )\n\n    # \u7d44\u5408\u7d50\u679c\n    return {\n        \"user\": dict(user),\n        \"stats\": dict(stats) if stats else {\"visit_count\": 0}\n    }\n</code></pre>"},{"location":"dependency-injection/07-database/#2_2","title":"2. \u52d5\u614b\u8cc7\u6599\u5eab\u9078\u64c7","text":"<p>\u5728\u67d0\u4e9b\u5834\u666f\u4e0b\uff0c\u6211\u5011\u53ef\u80fd\u9700\u8981\u6839\u64da\u8acb\u6c42\u52d5\u614b\u9078\u64c7\u8cc7\u6599\u5eab\u9023\u63a5\u3002</p> <ul> <li>\u512a\u9ede\uff1a \u652f\u6301\u591a\u79df\u6236\u67b6\u69cb\uff0c\u6839\u64da\u8acb\u6c42\u4e0a\u4e0b\u6587\u52d5\u614b\u9078\u64c7\u8cc7\u6599\u5eab\uff0c\u5be6\u73fe\u8cc7\u6599\u9694\u96e2</li> <li>\u7f3a\u9ede\uff1a \u9700\u8981\u7ba1\u7406\u591a\u500b\u8cc7\u6599\u5eab\u9023\u63a5\uff0c\u53ef\u80fd\u589e\u52a0\u7cfb\u7d71\u8cc7\u6e90\u6d88\u8017</li> </ul> <pre><code>from fastapi import FastAPI, Depends, Header\nfrom databases import Database\nfrom typing import Dict, Optional\n\napp = FastAPI()\n\n# \u8cc7\u6599\u5eab\u9023\u63a5\u6c60\ndb_pool: Dict[str, Database] = {\n    \"tenant1\": Database(\"postgresql://user:password@localhost/tenant1\"),\n    \"tenant2\": Database(\"postgresql://user:password@localhost/tenant2\"),\n    \"default\": Database(\"postgresql://user:password@localhost/default\")\n}\n\n@app.on_event(\"startup\")\nasync def startup():\n    for db in db_pool.values():\n        await db.connect()\n\n@app.on_event(\"shutdown\")\nasync def shutdown():\n    for db in db_pool.values():\n        await db.disconnect()\n\n# \u4f9d\u8cf4\u51fd\u6578\nasync def get_tenant_db(x_tenant_id: Optional[str] = Header(None)):\n    # \u6839\u64da\u8acb\u6c42\u982d\u9078\u64c7\u79df\u6236\u8cc7\u6599\u5eab\n    tenant_id = x_tenant_id or \"default\"\n    return db_pool.get(tenant_id, db_pool[\"default\"])\n\n@app.get(\"/data\")\nasync def read_data(db: Database = Depends(get_tenant_db)):\n    # \u5f9e\u9078\u5b9a\u7684\u79df\u6236\u8cc7\u6599\u5eab\u8b80\u53d6\u6578\u64da\n    data = await db.fetch_all(\"SELECT * FROM items LIMIT 10\")\n    return [dict(item) for item in data]\n</code></pre>"},{"location":"dependency-injection/07-database/#_4","title":"\u6e2c\u8a66\u8cc7\u6599\u5eab\u4f9d\u8cf4","text":"<p>\u6e2c\u8a66\u8cc7\u6599\u5eab\u4f9d\u8cf4\u662f\u78ba\u4fdd\u61c9\u7528\u7a69\u5b9a\u6027\u7684\u95dc\u9375\u3002\u4ee5\u4e0b\u662f\u4e00\u4e9b\u6e2c\u8a66\u7b56\u7565\uff1a</p>"},{"location":"dependency-injection/07-database/#1_3","title":"1. \u4f7f\u7528\u6e2c\u8a66\u8cc7\u6599\u5eab","text":"<pre><code>import pytest\nfrom fastapi.testclient import TestClient\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\n\n# \u6e2c\u8a66\u8cc7\u6599\u5eab\u914d\u7f6e\nTEST_DATABASE_URL = \"sqlite:///./test.db\"\ntest_engine = create_engine(TEST_DATABASE_URL)\nTestSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=test_engine)\n\n# \u5275\u5efa\u6e2c\u8a66\u8cc7\u6599\u5eab\u548c\u8868\n@pytest.fixture(scope=\"module\")\ndef setup_test_db():\n    Base.metadata.create_all(bind=test_engine)\n    yield\n    Base.metadata.drop_all(bind=test_engine)\n\n# \u8986\u84cb\u4f9d\u8cf4\n@pytest.fixture\ndef client(setup_test_db):\n    def override_get_db():\n        db = TestSessionLocal()\n        try:\n            yield db\n        finally:\n            db.close()\n\n    app.dependency_overrides[get_db] = override_get_db\n\n    with TestClient(app) as client:\n        yield client\n\n    app.dependency_overrides = {}\n\n# \u6e2c\u8a66\u7528\u4f8b\ndef test_create_user(client):\n    response = client.post(\n        \"/users/\",\n        json={\"name\": \"Test User\", \"email\": \"test@example.com\"}\n    )\n    assert response.status_code == 200\n    data = response.json()\n    assert data[\"name\"] == \"Test User\"\n    assert data[\"email\"] == \"test@example.com\"\n    assert \"id\" in data\n</code></pre>"},{"location":"dependency-injection/07-database/#2_3","title":"2. \u4f7f\u7528\u6a21\u64ec\u5c0d\u8c61","text":"<pre><code>import pytest\nfrom fastapi.testclient import TestClient\nfrom unittest.mock import MagicMock, patch\n\n@pytest.fixture\ndef mock_db():\n    # \u5275\u5efa\u6a21\u64ec\u8cc7\u6599\u5eab\u6703\u8a71\n    mock_session = MagicMock()\n\n    # \u914d\u7f6e\u6a21\u64ec\u67e5\u8a62\u7d50\u679c\n    mock_user = MagicMock()\n    mock_user.id = 1\n    mock_user.name = \"Test User\"\n    mock_user.email = \"test@example.com\"\n\n    # \u914d\u7f6e\u6a21\u64ec\u67e5\u8a62\u65b9\u6cd5\n    mock_query = MagicMock()\n    mock_query.filter.return_value.first.return_value = mock_user\n    mock_session.query.return_value = mock_query\n\n    return mock_session\n\n@pytest.fixture\ndef client(mock_db):\n    def override_get_db():\n        yield mock_db\n\n    app.dependency_overrides[get_db] = override_get_db\n\n    with TestClient(app) as client:\n        yield client\n\n    app.dependency_overrides = {}\n\ndef test_read_user(client, mock_db):\n    response = client.get(\"/users/1\")\n    assert response.status_code == 200\n    data = response.json()\n    assert data[\"id\"] == 1\n    assert data[\"name\"] == \"Test User\"\n    assert data[\"email\"] == \"test@example.com\"\n\n    # \u9a57\u8b49\u6a21\u64ec\u5c0d\u8c61\u7684\u8abf\u7528\n    mock_db.query.assert_called_once()\n    mock_db.query().filter.assert_called_once()\n</code></pre>"},{"location":"dependency-injection/07-database/#_5","title":"\u6700\u4f73\u5be6\u8e10","text":"<ol> <li>\u4f7f\u7528\u9023\u63a5\u6c60\uff1a\u5c0d\u65bc\u751f\u7522\u74b0\u5883\uff0c\u7e3d\u662f\u4f7f\u7528\u9023\u63a5\u6c60\u4f86\u7ba1\u7406\u8cc7\u6599\u5eab\u9023\u63a5\u3002</li> <li>\u9069\u7576\u7684\u932f\u8aa4\u8655\u7406\uff1a\u78ba\u4fdd\u8cc7\u6599\u5eab\u932f\u8aa4\u88ab\u6b63\u78ba\u6355\u7372\u548c\u8655\u7406\uff0c\u907f\u514d\u66b4\u9732\u654f\u611f\u4fe1\u606f\u3002</li> <li>\u4f7f\u7528\u74b0\u5883\u8b8a\u6578\u914d\u7f6e\uff1a\u4e0d\u8981\u5728\u4ee3\u78bc\u4e2d\u786c\u7de8\u78bc\u8cc7\u6599\u5eab\u9023\u63a5\u4fe1\u606f\u3002</li> <li>\u5b9a\u671f\u95dc\u9589\u9592\u7f6e\u9023\u63a5\uff1a\u907f\u514d\u8cc7\u6e90\u6cc4\u6f0f\u3002</li> <li>\u4f7f\u7528\u4e8b\u52d9\u7ba1\u7406\u4e0a\u4e0b\u6587\uff1a\u78ba\u4fdd\u8cc7\u6599\u5eab\u64cd\u4f5c\u7684\u539f\u5b50\u6027\u3002</li> </ol>"},{"location":"dependency-injection/08-external-services/","title":"FastAPI \u4f9d\u8cf4\u6ce8\u5165\u5be6\u6230\uff1a\u5916\u90e8\u670d\u52d9\u6574\u5408","text":""},{"location":"dependency-injection/08-external-services/#_1","title":"\u7c21\u4ecb","text":"<p>\u73fe\u4ee3 Web \u61c9\u7528\u5f88\u5c11\u662f\u5b64\u7acb\u7684\u7cfb\u7d71\uff0c\u5b83\u5011\u901a\u5e38\u9700\u8981\u8207\u5404\u7a2e\u5916\u90e8\u670d\u52d9\u9032\u884c\u4ea4\u4e92\uff0c\u5982\u652f\u4ed8\u8655\u7406\u5668\u3001\u96fb\u5b50\u90f5\u4ef6\u670d\u52d9\u3001\u63a8\u9001\u901a\u77e5\u7cfb\u7d71\u3001\u7b2c\u4e09\u65b9 API \u7b49\u3002FastAPI \u7684\u4f9d\u8cf4\u6ce8\u5165\u7cfb\u7d71\u70ba\u9019\u4e9b\u5916\u90e8\u670d\u52d9\u7684\u6574\u5408\u63d0\u4f9b\u4e86\u512a\u96c5\u4e14\u53ef\u7dad\u8b77\u7684\u89e3\u6c7a\u65b9\u6848\u3002</p>"},{"location":"dependency-injection/08-external-services/#_2","title":"\u5916\u90e8\u670d\u52d9\u6574\u5408\u7684\u6311\u6230","text":"<p>\u6574\u5408\u5916\u90e8\u670d\u52d9\u6642\uff0c\u6211\u5011\u901a\u5e38\u9762\u81e8\u4ee5\u4e0b\u6311\u6230\uff1a</p> <ol> <li>\u5ba2\u6236\u7aef\u751f\u547d\u9031\u671f\u7ba1\u7406\uff1a\u4f55\u6642\u5275\u5efa\u548c\u92b7\u6bc0\u5ba2\u6236\u7aef</li> <li>\u914d\u7f6e\u7ba1\u7406\uff1a\u5b89\u5168\u5730\u5b58\u5132\u548c\u4f7f\u7528 API \u5bc6\u9470\u548c\u5176\u4ed6\u654f\u611f\u4fe1\u606f</li> <li>\u932f\u8aa4\u8655\u7406\uff1a\u512a\u96c5\u5730\u8655\u7406\u5916\u90e8\u670d\u52d9\u7684\u6545\u969c</li> <li>\u6027\u80fd\u512a\u5316\uff1a\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u9023\u63a5\u548c\u8acb\u6c42</li> <li>\u6e2c\u8a66\uff1a\u5728\u4e0d\u5be6\u969b\u8abf\u7528\u5916\u90e8\u670d\u52d9\u7684\u60c5\u6cc1\u4e0b\u9032\u884c\u6e2c\u8a66</li> </ol>"},{"location":"dependency-injection/08-external-services/#_3","title":"\u57fa\u672c\u5916\u90e8\u670d\u52d9\u6574\u5408\u6a21\u5f0f","text":""},{"location":"dependency-injection/08-external-services/#1","title":"1. \u5ba2\u6236\u7aef\u4f5c\u70ba\u4f9d\u8cf4\u9805","text":"<p>\u6700\u7c21\u55ae\u7684\u6574\u5408\u6a21\u5f0f\u662f\u5c07\u5916\u90e8\u670d\u52d9\u7684\u5ba2\u6236\u7aef\u4f5c\u70ba\u4f9d\u8cf4\u9805\u63d0\u4f9b\u3002</p> <ul> <li>\u512a\u9ede\uff1a\u7c21\u55ae\u76f4\u63a5\uff0c\u6613\u65bc\u7406\u89e3\u548c\u5be6\u73fe</li> <li>\u7f3a\u9ede\uff1a\u6bcf\u500b\u8acb\u6c42\u90fd\u5275\u5efa\u65b0\u7684\u5ba2\u6236\u7aef\uff0c\u6c92\u6709\u9023\u63a5\u6c60\u6216\u91cd\u7528\u6a5f\u5236</li> </ul> <pre><code>from fastapi import FastAPI, Depends\nimport httpx\nfrom pydantic import BaseSettings\n\nclass Settings(BaseSettings):\n    weather_api_key: str\n    weather_api_url: str = \"https://api.weatherapi.com/v1\"\n\n    class Config:\n        env_file = \".env\"\n\nsettings = Settings()\napp = FastAPI()\n\n# \u5ba2\u6236\u7aef\u4f9d\u8cf4\u51fd\u6578\ndef get_weather_client():\n    return httpx.Client(\n        base_url=settings.weather_api_url,\n        params={\"key\": settings.weather_api_key}\n    )\n\n@app.get(\"/weather/{city}\")\ndef get_weather(city: str, client: httpx.Client = Depends(get_weather_client)):\n    response = client.get(\"/current.json\", params={\"q\": city})\n    response.raise_for_status()\n\n    weather_data = response.json()\n    return {\n        \"city\": city,\n        \"temperature\": weather_data[\"current\"][\"temp_c\"],\n        \"condition\": weather_data[\"current\"][\"condition\"][\"text\"]\n    }\n</code></pre>"},{"location":"dependency-injection/08-external-services/#2","title":"2. \u5171\u4eab\u5ba2\u6236\u7aef\u5be6\u4f8b","text":"<p>\u5c0d\u65bc\u9700\u8981\u91cd\u7528\u7684\u5ba2\u6236\u7aef\uff0c\u6211\u5011\u53ef\u4ee5\u5728\u61c9\u7528\u555f\u52d5\u6642\u5275\u5efa\u4e00\u500b\u5171\u4eab\u5be6\u4f8b\u3002</p> <ul> <li>\u512a\u9ede\uff1a\u5ba2\u6236\u7aef\u5728\u591a\u500b\u8acb\u6c42\u9593\u5171\u4eab\uff0c\u6e1b\u5c11\u8cc7\u6e90\u4f7f\u7528\uff0c\u652f\u6301\u9023\u63a5\u6c60</li> <li>\u7f3a\u9ede\uff1a\u9700\u8981\u8b39\u614e\u7ba1\u7406\u5168\u5c40\u72c0\u614b\uff0c\u53ef\u80fd\u9700\u8981\u8655\u7406\u4e26\u767c\u554f\u984c</li> </ul> <pre><code>from fastapi import FastAPI, Depends\nimport httpx\nfrom pydantic import BaseSettings\n\nclass Settings(BaseSettings):\n    email_api_key: str\n    email_api_url: str = \"https://api.sendgrid.com/v3\"\n\n    class Config:\n        env_file = \".env\"\n\nsettings = Settings()\napp = FastAPI()\n\n# \u5168\u5c40\u5ba2\u6236\u7aef\nemail_client = None\n\n@app.on_event(\"startup\")\nasync def startup_event():\n    global email_client\n    email_client = httpx.AsyncClient(\n        base_url=settings.email_api_url,\n        headers={\"Authorization\": f\"Bearer {settings.email_api_key}\"}\n    )\n\n@app.on_event(\"shutdown\")\nasync def shutdown_event():\n    global email_client\n    if email_client:\n        await email_client.aclose()\n\n# \u5ba2\u6236\u7aef\u4f9d\u8cf4\u51fd\u6578\nasync def get_email_client():\n    return email_client\n\n@app.post(\"/send-email\")\nasync def send_email(\n    to: str, \n    subject: str, \n    content: str,\n    client: httpx.AsyncClient = Depends(get_email_client)\n):\n    payload = {\n        \"personalizations\": [{\"to\": [{\"email\": to}]}],\n        \"subject\": subject,\n        \"content\": [{\"type\": \"text/plain\", \"value\": content}],\n        \"from\": {\"email\": \"noreply@example.com\"}\n    }\n\n    response = await client.post(\"/mail/send\", json=payload)\n    response.raise_for_status()\n\n    return {\"status\": \"Email sent successfully\"}\n</code></pre>"},{"location":"dependency-injection/08-external-services/#_4","title":"\u9032\u968e\u6574\u5408\u6a21\u5f0f","text":""},{"location":"dependency-injection/08-external-services/#1_1","title":"1. \u670d\u52d9\u985e\u5c01\u88dd","text":"<p>\u4f7f\u7528\u670d\u52d9\u985e\u5c01\u88dd\u5916\u90e8\u670d\u52d9\u7684\u4ea4\u4e92\u908f\u8f2f\uff0c\u63d0\u4f9b\u66f4\u597d\u7684\u62bd\u8c61\u548c\u53ef\u6e2c\u8a66\u6027\u3002</p> <ul> <li>\u512a\u9ede\uff1a\u66f4\u597d\u7684\u95dc\u6ce8\u9ede\u5206\u96e2\uff0c\u589e\u5f37\u53ef\u6e2c\u8a66\u6027\uff0c\u66f4\u597d\u7684\u932f\u8aa4\u8655\u7406\u548c\u985e\u578b\u5b89\u5168</li> <li>\u7f3a\u9ede\uff1a\u4ee3\u78bc\u91cf\u589e\u52a0\uff0c\u9700\u8981\u7dad\u8b77\u66f4\u591a\u7684\u985e\u548c\u63a5\u53e3</li> </ul> <pre><code>from fastapi import FastAPI, Depends, HTTPException\nimport httpx\nfrom pydantic import BaseSettings, BaseModel\nfrom typing import Optional\n\nclass Settings(BaseSettings):\n    payment_api_key: str\n    payment_api_url: str = \"https://api.stripe.com/v1\"\n\n    class Config:\n        env_file = \".env\"\n\nsettings = Settings()\napp = FastAPI()\n\n# \u8acb\u6c42\u548c\u97ff\u61c9\u6a21\u578b\nclass PaymentRequest(BaseModel):\n    amount: int  # \u91d1\u984d\uff08\u5206\uff09\n    currency: str\n    description: Optional[str] = None\n    customer_id: Optional[str] = None\n\nclass PaymentResponse(BaseModel):\n    payment_id: str\n    status: str\n    amount: int\n    currency: str\n\n# \u652f\u4ed8\u670d\u52d9\u985e\nclass PaymentService:\n    def __init__(self, client: httpx.Client):\n        self.client = client\n\n    def create_payment(self, payment: PaymentRequest) -&gt; PaymentResponse:\n        try:\n            response = self.client.post(\n                \"/charges\",\n                data={\n                    \"amount\": payment.amount,\n                    \"currency\": payment.currency,\n                    \"description\": payment.description,\n                    \"customer\": payment.customer_id\n                }\n            )\n            response.raise_for_status()\n\n            payment_data = response.json()\n            return PaymentResponse(\n                payment_id=payment_data[\"id\"],\n                status=payment_data[\"status\"],\n                amount=payment_data[\"amount\"],\n                currency=payment_data[\"currency\"]\n            )\n        except httpx.HTTPStatusError as e:\n            # \u8655\u7406 API \u932f\u8aa4\n            error_data = e.response.json()\n            raise HTTPException(\n                status_code=400,\n                detail=f\"Payment failed: {error_data.get('error', {}).get('message', 'Unknown error')}\"\n            )\n        except httpx.RequestError as e:\n            # \u8655\u7406\u9023\u63a5\u932f\u8aa4\n            raise HTTPException(\n                status_code=503,\n                detail=f\"Service unavailable: {str(e)}\"\n            )\n\n# \u5ba2\u6236\u7aef\u548c\u670d\u52d9\u4f9d\u8cf4\ndef get_payment_client():\n    return httpx.Client(\n        base_url=settings.payment_api_url,\n        headers={\"Authorization\": f\"Bearer {settings.payment_api_key}\"}\n    )\n\ndef get_payment_service(client: httpx.Client = Depends(get_payment_client)):\n    return PaymentService(client)\n\n@app.post(\"/payments\", response_model=PaymentResponse)\ndef create_payment(\n    payment: PaymentRequest,\n    payment_service: PaymentService = Depends(get_payment_service)\n):\n    return payment_service.create_payment(payment)\n</code></pre>"},{"location":"dependency-injection/08-external-services/#2_1","title":"2. \u7570\u6b65\u670d\u52d9\u6574\u5408","text":"<p>\u5c0d\u65bc I/O \u5bc6\u96c6\u578b\u7684\u5916\u90e8\u670d\u52d9\u8abf\u7528\uff0c\u4f7f\u7528\u7570\u6b65\u5ba2\u6236\u7aef\u53ef\u4ee5\u63d0\u9ad8\u6027\u80fd\u3002</p> <ul> <li>\u512a\u9ede\uff1a\u652f\u6301\u4e26\u884c\u8acb\u6c42\uff0c\u63d0\u9ad8 I/O \u5bc6\u96c6\u578b\u64cd\u4f5c\u7684\u6027\u80fd\uff0c\u66f4\u597d\u5730\u5229\u7528\u7cfb\u7d71\u8cc7\u6e90</li> <li>\u7f3a\u9ede\uff1a\u7570\u6b65\u4ee3\u78bc\u53ef\u80fd\u66f4\u96e3\u7406\u89e3\u548c\u8abf\u8a66\uff0c\u9700\u8981\u8655\u7406\u7570\u6b65\u4e0a\u4e0b\u6587\u4e2d\u7684\u932f\u8aa4</li> </ul> <pre><code>from fastapi import FastAPI, Depends, HTTPException\nimport httpx\nimport asyncio\nfrom pydantic import BaseSettings\nfrom typing import List, Dict, Any\n\nclass Settings(BaseSettings):\n    search_api_key: str\n    search_api_url: str = \"https://api.algolia.com/1\"\n\n    class Config:\n        env_file = \".env\"\n\nsettings = Settings()\napp = FastAPI()\n\n# \u5168\u5c40\u7570\u6b65\u5ba2\u6236\u7aef\nsearch_client = None\n\n@app.on_event(\"startup\")\nasync def startup_event():\n    global search_client\n    search_client = httpx.AsyncClient(\n        base_url=settings.search_api_url,\n        headers={\n            \"X-Algolia-API-Key\": settings.search_api_key,\n            \"X-Algolia-Application-Id\": \"YOUR_APP_ID\"\n        }\n    )\n\n@app.on_event(\"shutdown\")\nasync def shutdown_event():\n    global search_client\n    if search_client:\n        await search_client.aclose()\n\nasync def get_search_client():\n    return search_client\n\nclass SearchService:\n    def __init__(self, client: httpx.AsyncClient):\n        self.client = client\n\n    async def search(self, index: str, query: str) -&gt; Dict[str, Any]:\n        response = await self.client.post(\n            f\"/indexes/{index}/query\",\n            json={\"query\": query}\n        )\n        response.raise_for_status()\n        return response.json()\n\n    async def multi_search(self, indexes: List[str], query: str) -&gt; List[Dict[str, Any]]:\n        # \u4e26\u884c\u57f7\u884c\u591a\u500b\u641c\u7d22\n        tasks = [self.search(index, query) for index in indexes]\n        results = await asyncio.gather(*tasks)\n\n        return [\n            {\"index\": index, \"results\": result}\n            for index, result in zip(indexes, results)\n        ]\n\ndef get_search_service(client: httpx.AsyncClient = Depends(get_search_client)):\n    return SearchService(client)\n\n@app.get(\"/search\")\nasync def search(\n    query: str,\n    indexes: str,  # \u9017\u865f\u5206\u9694\u7684\u7d22\u5f15\u5217\u8868\n    search_service: SearchService = Depends(get_search_service)\n):\n    index_list = [index.strip() for index in indexes.split(\",\")]\n\n    try:\n        results = await search_service.multi_search(index_list, query)\n        return {\"query\": query, \"results\": results}\n    except httpx.HTTPStatusError as e:\n        raise HTTPException(status_code=e.response.status_code, detail=str(e))\n    except httpx.RequestError as e:\n        raise HTTPException(status_code=503, detail=f\"Search service unavailable: {str(e)}\")\n</code></pre>"},{"location":"dependency-injection/08-external-services/#3","title":"3. \u91cd\u8a66\u6a5f\u5236\u8207\u65b7\u8def\u5668\u6a21\u5f0f","text":"<p>\u5c0d\u65bc\u4e0d\u53ef\u9760\u7684\u5916\u90e8\u670d\u52d9\uff0c\u5be6\u73fe\u91cd\u8a66\u6a5f\u5236\u548c\u65b7\u8def\u5668\u6a21\u5f0f\u53ef\u4ee5\u63d0\u9ad8\u7cfb\u7d71\u7684\u7a69\u5b9a\u6027\u3002</p> <ul> <li>\u512a\u9ede\uff1a \u63d0\u9ad8\u7cfb\u7d71\u7a69\u5b9a\u6027\uff0c\u9632\u6b62\u5916\u90e8\u670d\u52d9\u6545\u969c\u5c0e\u81f4\u7cfb\u7d71\u5d29\u6f70\uff0c\u63d0\u4f9b\u512a\u96c5\u7684\u964d\u7d1a\u6a5f\u5236</li> <li>\u7f3a\u9ede\uff1a \u589e\u52a0\u4ee3\u78bc\u8907\u96dc\u6027\uff0c\u9700\u8981\u8b39\u614e\u914d\u7f6e\u91cd\u8a66\u53c3\u6578</li> </ul> <pre><code>from fastapi import FastAPI, Depends, HTTPException\nimport httpx\nimport time\nimport random\nfrom functools import wraps\nfrom pydantic import BaseSettings\nfrom typing import Callable, TypeVar, Any\n\n# \u5b9a\u7fa9\u6cdb\u578b\u985e\u578b\nT = TypeVar(\"T\")\n\nclass Settings(BaseSettings):\n    notification_api_key: str\n    notification_api_url: str = \"https://api.pushover.net/1\"\n\n    class Config:\n        env_file = \".env\"\n\nsettings = Settings()\napp = FastAPI()\n\n# \u91cd\u8a66\u88dd\u98fe\u5668\ndef retry(max_retries: int = 3, backoff_factor: float = 0.5):\n    def decorator(func: Callable[..., T]) -&gt; Callable[..., T]:\n        @wraps(func)\n        async def wrapper(*args: Any, **kwargs: Any) -&gt; T:\n            retries = 0\n            while True:\n                try:\n                    return await func(*args, **kwargs)\n                except (httpx.HTTPStatusError, httpx.RequestError) as e:\n                    retries += 1\n                    if retries &gt; max_retries:\n                        raise\n\n                    # \u6307\u6578\u9000\u907f\n                    wait_time = backoff_factor * (2 ** (retries - 1)) * (1 + random.random())\n                    print(f\"Retrying after {wait_time:.2f}s due to {str(e)}\")\n                    await asyncio.sleep(wait_time)\n\n        return wrapper\n    return decorator\n\n# \u65b7\u8def\u5668\u72c0\u614b\nclass CircuitBreaker:\n    def __init__(self, failure_threshold: int = 5, recovery_time: int = 30):\n        self.failure_threshold = failure_threshold\n        self.recovery_time = recovery_time\n        self.failures = 0\n        self.last_failure_time = 0\n        self.state = \"CLOSED\"  # CLOSED, OPEN, HALF-OPEN\n\n    def record_failure(self):\n        self.failures += 1\n        self.last_failure_time = time.time()\n\n        if self.failures &gt;= self.failure_threshold:\n            self.state = \"OPEN\"\n\n    def record_success(self):\n        self.failures = 0\n        self.state = \"CLOSED\"\n\n    def allow_request(self) -&gt; bool:\n        if self.state == \"CLOSED\":\n            return True\n\n        # \u6aa2\u67e5\u662f\u5426\u61c9\u8a72\u5617\u8a66\u6062\u5fa9\n        if self.state == \"OPEN\" and time.time() - self.last_failure_time &gt; self.recovery_time:\n            self.state = \"HALF-OPEN\"\n\n        return self.state == \"HALF-OPEN\"\n\n# \u901a\u77e5\u670d\u52d9\nnotification_circuit_breaker = CircuitBreaker()\n\nclass NotificationService:\n    def __init__(self, client: httpx.AsyncClient):\n        self.client = client\n\n    @retry(max_retries=3)\n    async def send_notification(self, user_key: str, message: str, title: str = None) -&gt; bool:\n        if not notification_circuit_breaker.allow_request():\n            raise HTTPException(\n                status_code=503,\n                detail=\"Notification service is currently unavailable\"\n            )\n\n        try:\n            response = await self.client.post(\n                \"/messages.json\",\n                data={\n                    \"token\": settings.notification_api_key,\n                    \"user\": user_key,\n                    \"message\": message,\n                    \"title\": title\n                }\n            )\n            response.raise_for_status()\n\n            notification_circuit_breaker.record_success()\n            return True\n        except Exception as e:\n            notification_circuit_breaker.record_failure()\n            raise\n\n# \u4f9d\u8cf4\u51fd\u6578\nasync def get_notification_client():\n    return httpx.AsyncClient(base_url=settings.notification_api_url)\n\ndef get_notification_service(client: httpx.AsyncClient = Depends(get_notification_client)):\n    return NotificationService(client)\n\n@app.post(\"/notify\")\nasync def send_notification(\n    user_key: str,\n    message: str,\n    title: str = None,\n    notification_service: NotificationService = Depends(get_notification_service)\n):\n    try:\n        await notification_service.send_notification(user_key, message, title)\n        return {\"status\": \"Notification sent successfully\"}\n    except HTTPException:\n        raise\n    except Exception as e:\n        raise HTTPException(\n            status_code=500,\n            detail=f\"Failed to send notification: {str(e)}\"\n        )\n</code></pre>"},{"location":"dependency-injection/08-external-services/#_5","title":"\u6e2c\u8a66\u5916\u90e8\u670d\u52d9\u4f9d\u8cf4","text":"<p>\u6e2c\u8a66\u8207\u5916\u90e8\u670d\u52d9\u7684\u96c6\u6210\u662f\u4e00\u500b\u6311\u6230\uff0c\u4f46 FastAPI \u7684\u4f9d\u8cf4\u6ce8\u5165\u7cfb\u7d71\u4f7f\u5176\u8b8a\u5f97\u66f4\u5bb9\u6613\u3002</p>"},{"location":"dependency-injection/08-external-services/#1_2","title":"1. \u4f7f\u7528\u6a21\u64ec\u5c0d\u8c61","text":"<pre><code>import pytest\nfrom fastapi.testclient import TestClient\nfrom unittest.mock import MagicMock, patch\nfrom your_app import app, PaymentService\n\n@pytest.fixture\ndef mock_payment_service():\n    # \u5275\u5efa\u6a21\u64ec\u670d\u52d9\n    mock_service = MagicMock(spec=PaymentService)\n\n    # \u914d\u7f6e\u6a21\u64ec\u65b9\u6cd5\n    mock_service.create_payment.return_value = {\n        \"payment_id\": \"test_payment_123\",\n        \"status\": \"succeeded\",\n        \"amount\": 1000,\n        \"currency\": \"usd\"\n    }\n\n    return mock_service\n\n@pytest.fixture\ndef client(mock_payment_service):\n    # \u8986\u84cb\u4f9d\u8cf4\n    app.dependency_overrides[get_payment_service] = lambda: mock_payment_service\n\n    with TestClient(app) as client:\n        yield client\n\n    # \u6e05\u7406\n    app.dependency_overrides = {}\n\ndef test_create_payment(client, mock_payment_service):\n    response = client.post(\n        \"/payments\",\n        json={\n            \"amount\": 1000,\n            \"currency\": \"usd\",\n            \"description\": \"Test payment\"\n        }\n    )\n\n    assert response.status_code == 200\n    data = response.json()\n    assert data[\"payment_id\"] == \"test_payment_123\"\n    assert data[\"status\"] == \"succeeded\"\n\n    # \u9a57\u8b49\u6a21\u64ec\u670d\u52d9\u88ab\u6b63\u78ba\u8abf\u7528\n    mock_payment_service.create_payment.assert_called_once()\n    call_args = mock_payment_service.create_payment.call_args[0][0]\n    assert call_args.amount == 1000\n    assert call_args.currency == \"usd\"\n</code></pre>"},{"location":"dependency-injection/08-external-services/#2-httpx","title":"2. \u4f7f\u7528 httpx \u7684\u97ff\u61c9\u6a21\u64ec","text":"<p>\u5c0d\u65bc\u76f4\u63a5\u4f7f\u7528 httpx \u5ba2\u6236\u7aef\u7684\u4f9d\u8cf4\uff0c\u6211\u5011\u53ef\u4ee5\u4f7f\u7528 <code>httpx.MockResponse</code>\u3002</p> <pre><code>import pytest\nfrom fastapi.testclient import TestClient\nimport httpx\nimport json\nfrom unittest.mock import patch\nfrom your_app import app\n\n# \u6a21\u64ec httpx \u97ff\u61c9\n@pytest.fixture\ndef mock_weather_response():\n    return httpx.Response(\n        status_code=200,\n        json={\n            \"location\": {\"name\": \"London\", \"country\": \"UK\"},\n            \"current\": {\n                \"temp_c\": 15.0,\n                \"condition\": {\"text\": \"Partly cloudy\"}\n            }\n        }\n    )\n\n# \u6e2c\u8a66\u4f7f\u7528\u6a21\u64ec\u97ff\u61c9\n@patch(\"httpx.Client.get\")\ndef test_get_weather(mock_get, mock_weather_response):\n    mock_get.return_value = mock_weather_response\n\n    with TestClient(app) as client:\n        response = client.get(\"/weather/London\")\n\n    assert response.status_code == 200\n    data = response.json()\n    assert data[\"city\"] == \"London\"\n    assert data[\"temperature\"] == 15.0\n    assert data[\"condition\"] == \"Partly cloudy\"\n\n    # \u9a57\u8b49 httpx \u8abf\u7528\n    mock_get.assert_called_once()\n    args, kwargs = mock_get.call_args\n    assert args[0] == \"/current.json\"\n    assert kwargs[\"params\"][\"q\"] == \"London\"\n</code></pre>"},{"location":"dependency-injection/08-external-services/#3_1","title":"3. \u4f7f\u7528\u6e2c\u8a66\u670d\u52d9\u5668","text":"<p>\u5c0d\u65bc\u66f4\u8907\u96dc\u7684\u96c6\u6210\u6e2c\u8a66\uff0c\u6211\u5011\u53ef\u4ee5\u8a2d\u7f6e\u4e00\u500b\u6e2c\u8a66\u670d\u52d9\u5668\u4f86\u6a21\u64ec\u5916\u90e8 API\u3002</p> <pre><code>import pytest\nfrom fastapi import FastAPI\nfrom fastapi.testclient import TestClient\nimport uvicorn\nimport threading\nimport time\nimport requests\nfrom your_app import app as main_app\n\n# \u5275\u5efa\u6a21\u64ec API \u670d\u52d9\u5668\nmock_api = FastAPI()\n\n@mock_api.get(\"/api/products\")\ndef mock_get_products():\n    return [\n        {\"id\": 1, \"name\": \"Product 1\", \"price\": 10.99},\n        {\"id\": 2, \"name\": \"Product 2\", \"price\": 20.99}\n    ]\n\n@mock_api.get(\"/api/products/{product_id}\")\ndef mock_get_product(product_id: int):\n    products = {\n        1: {\"id\": 1, \"name\": \"Product 1\", \"price\": 10.99},\n        2: {\"id\": 2, \"name\": \"Product 2\", \"price\": 20.99}\n    }\n\n    if product_id not in products:\n        return {\"error\": \"Product not found\"}, 404\n\n    return products[product_id]\n\n# \u555f\u52d5\u6a21\u64ec\u670d\u52d9\u5668\n@pytest.fixture(scope=\"module\")\ndef mock_api_server():\n    # \u5728\u55ae\u7368\u7684\u7dda\u7a0b\u4e2d\u555f\u52d5\u670d\u52d9\u5668\n    thread = threading.Thread(\n        target=uvicorn.run,\n        args=(mock_api,),\n        kwargs={\"host\": \"127.0.0.1\", \"port\": 8001, \"log_level\": \"error\"},\n        daemon=True\n    )\n    thread.start()\n\n    # \u7b49\u5f85\u670d\u52d9\u5668\u555f\u52d5\n    time.sleep(1)\n\n    yield \"http://127.0.0.1:8001\"\n\n    # \u4e0d\u9700\u8981\u986f\u5f0f\u505c\u6b62\uff0c\u56e0\u70ba\u4f7f\u7528\u4e86 daemon=True\n\n# \u914d\u7f6e\u4e3b\u61c9\u7528\u4f7f\u7528\u6a21\u64ec\u670d\u52d9\u5668\n@pytest.fixture\ndef client(mock_api_server):\n    # \u8986\u84cb\u914d\u7f6e\n    main_app.dependency_overrides[get_product_api_url] = lambda: mock_api_server\n\n    with TestClient(main_app) as client:\n        yield client\n\n    main_app.dependency_overrides = {}\n\n# \u6e2c\u8a66\u8207\u6a21\u64ec API \u7684\u96c6\u6210\ndef test_get_product_details(client):\n    response = client.get(\"/products/1\")\n\n    assert response.status_code == 200\n    data = response.json()\n    assert data[\"id\"] == 1\n    assert data[\"name\"] == \"Product 1\"\n    assert data[\"price\"] == 10.99\n</code></pre>"},{"location":"dependency-injection/08-external-services/#_6","title":"\u9ad8\u7d1a\u6280\u5de7\u8207\u6700\u4f73\u5be6\u8e10","text":""},{"location":"dependency-injection/08-external-services/#1_3","title":"1. \u4f7f\u7528\u5de5\u5ee0\u6a21\u5f0f\u5275\u5efa\u670d\u52d9\u5ba2\u6236\u7aef","text":"<p>\u5de5\u5ee0\u6a21\u5f0f\u53ef\u4ee5\u5e6b\u52a9\u6211\u5011\u6839\u64da\u4e0d\u540c\u7684\u914d\u7f6e\u6216\u74b0\u5883\u5275\u5efa\u9069\u7576\u7684\u670d\u52d9\u5ba2\u6236\u7aef\u3002</p> <pre><code>from fastapi import FastAPI, Depends\nimport httpx\nfrom pydantic import BaseSettings\nfrom enum import Enum\nfrom typing import Optional\n\nclass Environment(str, Enum):\n    DEVELOPMENT = \"development\"\n    STAGING = \"staging\"\n    PRODUCTION = \"production\"\n\nclass Settings(BaseSettings):\n    environment: Environment = Environment.DEVELOPMENT\n    payment_api_key: str\n    payment_api_url_dev: str = \"https://sandbox.payment.com/v1\"\n    payment_api_url_staging: str = \"https://staging.payment.com/v1\"\n    payment_api_url_prod: str = \"https://api.payment.com/v1\"\n\n    class Config:\n        env_file = \".env\"\n\nsettings = Settings()\napp = FastAPI()\n\n# \u5ba2\u6236\u7aef\u5de5\u5ee0\nclass PaymentClientFactory:\n    @staticmethod\n    def create_client(environment: Environment, api_key: str) -&gt; httpx.Client:\n        base_urls = {\n            Environment.DEVELOPMENT: settings.payment_api_url_dev,\n            Environment.STAGING: settings.payment_api_url_staging,\n            Environment.PRODUCTION: settings.payment_api_url_prod\n        }\n\n        base_url = base_urls.get(environment)\n\n        return httpx.Client(\n            base_url=base_url,\n            headers={\"Authorization\": f\"Bearer {api_key}\"},\n            timeout=30.0\n        )\n\n# \u4f9d\u8cf4\u51fd\u6578\ndef get_payment_client(env: Optional[Environment] = None):\n    # \u4f7f\u7528\u63d0\u4f9b\u7684\u74b0\u5883\u6216\u9ed8\u8a8d\u74b0\u5883\n    environment = env or settings.environment\n\n    return PaymentClientFactory.create_client(\n        environment=environment,\n        api_key=settings.payment_api_key\n    )\n\n@app.get(\"/payment-status/{payment_id}\")\ndef get_payment_status(\n    payment_id: str, \n    client: httpx.Client = Depends(get_payment_client)\n):\n    response = client.get(f\"/payments/{payment_id}\")\n    response.raise_for_status()\n\n    return response.json()\n\n# \u53ef\u4ee5\u70ba\u7279\u5b9a\u8def\u7531\u6307\u5b9a\u74b0\u5883\n@app.post(\"/test-payment\")\ndef create_test_payment(\n    amount: int,\n    client: httpx.Client = Depends(lambda: get_payment_client(Environment.DEVELOPMENT))\n):\n    # \u7e3d\u662f\u4f7f\u7528\u958b\u767c\u74b0\u5883\u9032\u884c\u6e2c\u8a66\u652f\u4ed8\n    response = client.post(\"/payments\", json={\"amount\": amount})\n    response.raise_for_status()\n\n    return response.json()\n</code></pre>"},{"location":"dependency-injection/08-external-services/#2_2","title":"2. \u4f7f\u7528\u7de9\u5b58\u6e1b\u5c11\u5916\u90e8\u8abf\u7528","text":"<p>\u5c0d\u65bc\u983b\u7e41\u8a2a\u554f\u4f46\u4e0d\u5e38\u8b8a\u5316\u7684\u5916\u90e8\u6578\u64da\uff0c\u4f7f\u7528\u7de9\u5b58\u53ef\u4ee5\u6e1b\u5c11\u5916\u90e8\u670d\u52d9\u8abf\u7528\u3002</p> <pre><code>from fastapi import FastAPI, Depends\nimport httpx\nfrom functools import lru_cache\nimport time\nfrom datetime import datetime, timedelta\n\napp = FastAPI()\n\n# \u7de9\u5b58\u7d50\u679c\u7684\u985e\nclass CachedResponse:\n    def __init__(self, data, expires_at):\n        self.data = data\n        self.expires_at = expires_at\n\n    @property\n    def is_expired(self):\n        return datetime.now() &gt; self.expires_at\n\n# \u7de9\u5b58\u88dd\u98fe\u5668\ndef cache_response(ttl_seconds=300):\n    def decorator(func):\n        cache = {}\n\n        async def wrapper(*args, **kwargs):\n            # \u5275\u5efa\u7de9\u5b58\u9375\n            cache_key = str(args) + str(kwargs)\n\n            # \u6aa2\u67e5\u7de9\u5b58\n            if cache_key in cache and not cache[cache_key].is_expired:\n                print(f\"Cache hit for {cache_key}\")\n                return cache[cache_key].data\n\n            # \u8abf\u7528\u539f\u59cb\u51fd\u6578\n            result = await func(*args, **kwargs)\n\n            # \u5b58\u5132\u7d50\u679c\u5230\u7de9\u5b58\n            expires_at = datetime.now() + timedelta(seconds=ttl_seconds)\n            cache[cache_key] = CachedResponse(result, expires_at)\n\n            return result\n\n        return wrapper\n\n    return decorator\n\n# \u5916\u90e8\u670d\u52d9\u5ba2\u6236\u7aef\nclass ExchangeRateService:\n    def __init__(self, client: httpx.AsyncClient):\n        self.client = client\n\n    @cache_response(ttl_seconds=3600)  # \u532f\u7387\u6bcf\u5c0f\u6642\u7de9\u5b58\u4e00\u6b21\n    async def get_exchange_rate(self, from_currency: str, to_currency: str) -&gt; float:\n        response = await self.client.get(\n            \"/latest\",\n            params={\"base\": from_currency, \"symbols\": to_currency}\n        )\n        response.raise_for_status()\n\n        data = response.json()\n        return data[\"rates\"][to_currency]\n\n# \u4f9d\u8cf4\u51fd\u6578\nasync def get_exchange_client():\n    return httpx.AsyncClient(base_url=\"https://api.exchangerate.host\")\n\ndef get_exchange_service(client: httpx.AsyncClient = Depends(get_exchange_client)):\n    return ExchangeRateService(client)\n\n@app.get(\"/convert\")\nasync def convert_currency(\n    amount: float,\n    from_currency: str,\n    to_currency: str,\n    exchange_service: ExchangeRateService = Depends(get_exchange_service)\n):\n    rate = await exchange_service.get_exchange_rate(from_currency, to_currency)\n    converted_amount = amount * rate\n\n    return {\n        \"original\": {\"amount\": amount, \"currency\": from_currency},\n        \"converted\": {\"amount\": converted_amount, \"currency\": to_currency},\n        \"rate\": rate\n    }\n</code></pre>"},{"location":"dependency-injection/08-external-services/#3_2","title":"3. \u8d85\u6642\u548c\u9650\u6d41\u7ba1\u7406","text":"<p>\u5c0d\u5916\u90e8\u670d\u52d9\u7684\u8acb\u6c42\u61c9\u8a72\u8a2d\u7f6e\u9069\u7576\u7684\u8d85\u6642\uff0c\u4e26\u5be6\u65bd\u9650\u6d41\u4ee5\u907f\u514d\u904e\u5ea6\u4f7f\u7528\u5916\u90e8\u8cc7\u6e90\u3002</p> <pre><code>from fastapi import FastAPI, Depends, HTTPException\nimport httpx\nimport asyncio\nimport time\nfrom pydantic import BaseSettings\n\nclass Settings(BaseSettings):\n    api_key: str\n    api_url: str = \"https://api.example.com/v1\"\n\n    class Config:\n        env_file = \".env\"\n\nsettings = Settings()\napp = FastAPI()\n\n# \u9650\u6d41\u5668\nclass RateLimiter:\n    def __init__(self, calls_per_second: float):\n        self.calls_per_second = calls_per_second\n        self.min_interval = 1.0 / calls_per_second\n        self.last_call_time = 0\n\n    async def wait(self):\n        # \u8a08\u7b97\u9700\u8981\u7b49\u5f85\u7684\u6642\u9593\n        now = time.time()\n        elapsed = now - self.last_call_time\n\n        if elapsed &lt; self.min_interval:\n            wait_time = self.min_interval - elapsed\n            await asyncio.sleep(wait_time)\n\n        self.last_call_time = time.time()\n\n# \u5275\u5efa\u670d\u52d9\u985e\nclass ApiService:\n    def __init__(self, client: httpx.AsyncClient, rate_limiter: RateLimiter):\n        self.client = client\n        self.rate_limiter = rate_limiter\n\n    async def make_request(self, endpoint: str, **kwargs):\n        # \u61c9\u7528\u9650\u6d41\n        await self.rate_limiter.wait()\n\n        try:\n            # \u8a2d\u7f6e\u8d85\u6642\n            timeout = httpx.Timeout(10.0, connect=5.0)\n            response = await self.client.get(endpoint, timeout=timeout, **kwargs)\n            response.raise_for_status()\n            return response.json()\n        except httpx.TimeoutException:\n            raise HTTPException(\n                status_code=504,\n                detail=\"Request to external service timed out\"\n            )\n        except httpx.HTTPStatusError as e:\n            raise HTTPException(\n                status_code=502,\n                detail=f\"External service error: {str(e)}\"\n            )\n\n# \u4f9d\u8cf4\u51fd\u6578\nasync def get_api_client():\n    return httpx.AsyncClient(\n        base_url=settings.api_url,\n        headers={\"Authorization\": f\"Bearer {settings.api_key}\"}\n    )\n\ndef get_rate_limiter():\n    # \u9650\u5236\u70ba\u6bcf\u79d2 5 \u500b\u8acb\u6c42\n    return RateLimiter(calls_per_second=5.0)\n\ndef get_api_service(\n    client: httpx.AsyncClient = Depends(get_api_client),\n    rate_limiter: RateLimiter = Depends(get_rate_limiter)\n):\n    return ApiService(client, rate_limiter)\n\n@app.get(\"/api-proxy/{endpoint}\")\nasync def api_proxy(\n    endpoint: str,\n    api_service: ApiService = Depends(get_api_service)\n):\n    return await api_service.make_request(f\"/{endpoint}\")\n</code></pre>"},{"location":"dependency-injection/08-external-services/#_7","title":"\u6700\u4f73\u5be6\u8e10","text":"<ol> <li>\u4f7f\u7528\u9069\u7576\u7684\u62bd\u8c61\uff1a\u901a\u904e\u670d\u52d9\u985e\u6216\u63a5\u53e3\u5c01\u88dd\u5916\u90e8\u670d\u52d9\u7684\u4ea4\u4e92\uff0c\u4f7f\u4ee3\u78bc\u66f4\u6613\u65bc\u6e2c\u8a66\u548c\u7dad\u8b77\u3002</li> <li>\u59a5\u5584\u7ba1\u7406\u5ba2\u6236\u7aef\u751f\u547d\u9031\u671f\uff1a\u6839\u64da\u670d\u52d9\u7279\u6027\u9078\u64c7\u9069\u7576\u7684\u5ba2\u6236\u7aef\u751f\u547d\u9031\u671f\u7ba1\u7406\u7b56\u7565\u3002</li> <li>\u5be6\u65bd\u8d85\u6642\u548c\u91cd\u8a66\u6a5f\u5236\uff1a\u70ba\u6240\u6709\u5916\u90e8\u8abf\u7528\u8a2d\u7f6e\u5408\u7406\u7684\u8d85\u6642\uff0c\u4e26\u5728\u9069\u7576\u7684\u60c5\u6cc1\u4e0b\u5be6\u65bd\u91cd\u8a66\u3002</li> <li>\u4f7f\u7528\u65b7\u8def\u5668\u6a21\u5f0f\uff1a\u9632\u6b62\u5916\u90e8\u670d\u52d9\u6545\u969c\u5f71\u97ff\u6574\u500b\u7cfb\u7d71\u3002</li> <li>\u5be6\u65bd\u9650\u6d41\uff1a\u907f\u514d\u8d85\u904e\u5916\u90e8\u670d\u52d9\u7684\u4f7f\u7528\u9650\u5236\u3002</li> <li>\u7de9\u5b58\u4e0d\u5e38\u8b8a\u5316\u7684\u6578\u64da\uff1a\u6e1b\u5c11\u5c0d\u5916\u90e8\u670d\u52d9\u7684\u8acb\u6c42\u6b21\u6578\u3002</li> <li>\u4f7f\u7528\u975e\u540c\u6b65\u5ba2\u6236\u7aef\uff1a\u5c0d\u65bc I/O \u5bc6\u96c6\u578b\u64cd\u4f5c\uff0c\u4f7f\u7528\u7570\u6b65\u5ba2\u6236\u7aef\u63d0\u9ad8\u6027\u80fd\u3002</li> <li>\u59a5\u5584\u8655\u7406\u932f\u8aa4\uff1a\u6355\u7372\u548c\u8655\u7406\u5916\u90e8\u670d\u52d9\u53ef\u80fd\u8fd4\u56de\u7684\u5404\u7a2e\u932f\u8aa4\u3002</li> <li>\u4f7f\u7528\u74b0\u5883\u8b8a\u6578\u9032\u884c\u914d\u7f6e\uff1a\u4e0d\u8981\u5728\u4ee3\u78bc\u4e2d\u786c\u7de8\u78bc API \u5bc6\u9470\u548c URL\u3002</li> <li>\u7de8\u5beb\u5168\u9762\u7684\u6e2c\u8a66\uff1a\u4f7f\u7528\u6a21\u64ec\u5c0d\u8c61\u6216\u6e2c\u8a66\u670d\u52d9\u5668\u6e2c\u8a66\u8207\u5916\u90e8\u670d\u52d9\u7684\u96c6\u6210\u3002</li> </ol>"},{"location":"dependency-injection/09-best-practice/","title":"FastAPI \u4f9d\u8cf4\u6ce8\u5165\u6700\u4f73\u5be6\u8e10","text":""},{"location":"dependency-injection/09-best-practice/#_1","title":"\u4f9d\u8cf4\u8a2d\u8a08","text":"<ol> <li>\u4fdd\u6301\u4f9d\u8cf4\u51fd\u6578\u7c21\u6f54\u660e\u78ba</li> <li>\u4f7f\u7528\u4f9d\u8cf4\u5c64\u6b21\u7d50\u69cb</li> <li>\u4f7f\u7528\u985e\u4f5c\u70ba\u4f9d\u8cf4</li> <li>\u4f7f\u7528 Pydantic \u6a21\u578b\u9032\u884c\u914d\u7f6e\u7ba1\u7406</li> </ol>"},{"location":"dependency-injection/09-best-practice/#_2","title":"\u6027\u80fd\u512a\u5316","text":"<ol> <li>\u7de9\u5b58\u91cd\u8907\u4f7f\u7528\u7684\u4f9d\u8cf4: \u5c0d\u65bc\u8a08\u7b97\u6210\u672c\u9ad8\u4f46\u7d50\u679c\u4e0d\u5e38\u8b8a\u5316\u7684\u4f9d\u8cf4\uff0c\u4f7f\u7528\u7de9\u5b58\u53ef\u4ee5\u63d0\u9ad8\u6027\u80fd\u3002</li> <li>\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u4f9d\u8cf4\u5d4c\u5957: \u904e\u5ea6\u5d4c\u5957\u7684\u4f9d\u8cf4\u53ef\u80fd\u5c0e\u81f4\u6027\u80fd\u554f\u984c\u548c\u96e3\u4ee5\u8ddf\u8e2a\u7684\u932f\u8aa4\u3002</li> </ol>"},{"location":"dependency-injection/09-best-practice/#_3","title":"\u6e2c\u8a66","text":"<ol> <li>\u8a2d\u8a08\u4fbf\u65bc\u6e2c\u8a66\u7684\u4f9d\u8cf4:\u4f9d\u8cf4\u61c9\u8a72\u6613\u65bc\u5728\u6e2c\u8a66\u4e2d\u66ff\u63db\u6216\u6a21\u64ec\u3002</li> <li>\u4f7f\u7528\u4f9d\u8cf4\u8986\u84cb\u9032\u884c\u6e2c\u8a66: FastAPI \u63d0\u4f9b\u4e86\u4f9d\u8cf4\u8986\u84cb\u6a5f\u5236\uff0c\u4f7f\u5f97\u6e2c\u8a66\u8b8a\u5f97\u7c21\u55ae\u3002</li> <li>\u4f7f\u7528\u5de5\u5ee0\u6a21\u5f0f\u7c21\u5316\u6e2c\u8a66\u914d\u7f6e: \u5de5\u5ee0\u6a21\u5f0f\u53ef\u4ee5\u5e6b\u52a9\u4f60\u5728\u6e2c\u8a66\u4e2d\u66f4\u5bb9\u6613\u5730\u5275\u5efa\u548c\u914d\u7f6e\u4f9d\u8cf4\u3002</li> </ol>"},{"location":"dependency-injection/09-best-practice/#_4","title":"\u5b89\u5168\u6027","text":"<ol> <li>\u5206\u5c64\u8eab\u4efd\u9a57\u8b49\u4f9d\u8cf4: \u69cb\u5efa\u5206\u5c64\u7684\u8eab\u4efd\u9a57\u8b49\u4f9d\u8cf4\uff0c\u4ee5\u5be6\u73fe\u66f4\u7cbe\u7d30\u7684\u8a2a\u554f\u63a7\u5236\u3002</li> <li>\u5b89\u5168\u5730\u8655\u7406\u654f\u611f\u914d\u7f6e: \u78ba\u4fdd\u654f\u611f\u914d\u7f6e\u4e0d\u6703\u88ab\u610f\u5916\u66b4\u9732\u3002</li> </ol>"},{"location":"dependency-injection/09-best-practice/#_5","title":"\u7d44\u7e54\u548c\u7d50\u69cb","text":""},{"location":"dependency-injection/09-best-practice/#1","title":"1. \u6309\u529f\u80fd\u7d44\u7e54\u4f9d\u8cf4","text":"<p>\u5c07\u76f8\u95dc\u7684\u4f9d\u8cf4\u7d44\u7e54\u5728\u4e00\u8d77\uff0c\u4ee5\u63d0\u9ad8\u53ef\u7dad\u8b77\u6027\u3002</p> <pre><code>project/\n\u251c\u2500\u2500 app/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 main.py\n\u2502   \u251c\u2500\u2500 dependencies/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 database.py      # \u8cc7\u6599\u5eab\u4f9d\u8cf4\n\u2502   \u2502   \u251c\u2500\u2500 auth.py          # \u8eab\u4efd\u9a57\u8b49\u4f9d\u8cf4\n\u2502   \u2502   \u251c\u2500\u2500 services.py      # \u5916\u90e8\u670d\u52d9\u4f9d\u8cf4\n\u2502   \u2502   \u2514\u2500\u2500 commons.py       # \u901a\u7528\u4f9d\u8cf4\n\u2502   \u251c\u2500\u2500 routers/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 users.py\n\u2502   \u2502   \u2514\u2500\u2500 items.py\n\u2502   \u2514\u2500\u2500 ...\n</code></pre> <p>\u5728 <code>dependencies/__init__.py</code> \u4e2d\u5c0e\u51fa\u5e38\u7528\u4f9d\u8cf4:</p> <pre><code># dependencies/__init__.py\nfrom .database import get_db\nfrom .auth import get_current_user, get_active_user\nfrom .services import get_email_service, get_payment_service\n\n__all__ = [\n    \"get_db\", \n    \"get_current_user\", \n    \"get_active_user\",\n    \"get_email_service\",\n    \"get_payment_service\"\n]\n</code></pre>"},{"location":"dependency-injection/09-best-practice/#2","title":"2. \u4f7f\u7528\u4f9d\u8cf4\u5bb9\u5668","text":"<p>\u5c0d\u65bc\u5927\u578b\u61c9\u7528\uff0c\u8003\u616e\u4f7f\u7528\u4f9d\u8cf4\u5bb9\u5668\u4f86\u7ba1\u7406\u8907\u96dc\u7684\u4f9d\u8cf4\u95dc\u4fc2\u3002</p> <pre><code>from fastapi import Depends\n\nclass Container:\n    def __init__(self):\n        self._services = {}\n\n    def register(self, name, factory):\n        self._services[name] = factory\n\n    def resolve(self, name):\n        if name not in self._services:\n            raise ValueError(f\"Service {name} not registered\")\n\n        factory = self._services[name]\n        return factory()\n\n# \u5275\u5efa\u5168\u5c40\u5bb9\u5668\ncontainer = Container()\n\n# \u8a3b\u518a\u670d\u52d9\ncontainer.register(\"db\", get_db)\ncontainer.register(\"user_repository\", lambda: UserRepository(next(container.resolve(\"db\"))))\ncontainer.register(\"auth_service\", lambda: AuthService(container.resolve(\"user_repository\")))\n\n# \u4f9d\u8cf4\u51fd\u6578\ndef get_auth_service():\n    return container.resolve(\"auth_service\")\n\n@app.get(\"/users/me\")\ndef read_users_me(auth_service = Depends(get_auth_service)):\n    current_user = auth_service.get_current_user()\n    return current_user\n</code></pre> <p>\u9019\u7a2e\u65b9\u6cd5\u5728\u5927\u578b\u61c9\u7528\u4e2d\u7279\u5225\u6709\u7528\uff0c\u53ef\u4ee5\u96c6\u4e2d\u7ba1\u7406\u4f9d\u8cf4\u95dc\u4fc2\u3002</p>"},{"location":"dependency-injection/09-best-practice/#_6","title":"\u5e38\u898b\u9677\u9631\u8207\u5982\u4f55\u907f\u514d","text":""},{"location":"dependency-injection/09-best-practice/#1_1","title":"1. \u5faa\u74b0\u4f9d\u8cf4","text":"<p>\u5faa\u74b0\u4f9d\u8cf4\u662f\u4e00\u500b\u5e38\u898b\u554f\u984c\uff0c\u53ef\u80fd\u5c0e\u81f4\u96e3\u4ee5\u8a3a\u65b7\u7684\u932f\u8aa4\u3002</p> <ul> <li>\u89e3\u6c7a\u65b9\u6848:<ol> <li>\u91cd\u69cb\u4f9d\u8cf4\u95dc\u4fc2\uff0c\u6d88\u9664\u5faa\u74b0</li> <li>\u4f7f\u7528\u5ef6\u9072\u521d\u59cb\u5316\u6216\u5de5\u5ee0\u6a21\u5f0f</li> </ol> </li> </ul>"},{"location":"dependency-injection/09-best-practice/#2_1","title":"2. \u904e\u5ea6\u4f7f\u7528\u5168\u5c40\u72c0\u614b","text":"<p>\u904e\u5ea6\u4f9d\u8cf4\u5168\u5c40\u72c0\u614b\u6703\u4f7f\u61c9\u7528\u96e3\u4ee5\u6e2c\u8a66\u548c\u7dad\u8b77\u3002</p> <ul> <li>\u89e3\u6c7a\u65b9\u6848: \u4f7f\u7528\u9069\u7576\u7684\u751f\u547d\u9031\u671f\u7ba1\u7406\u548c\u4f9d\u8cf4\u6ce8\u5165\uff0c\u800c\u4e0d\u662f\u5168\u5c40\u8b8a\u6578\u3002</li> </ul>"},{"location":"dependency-injection/09-best-practice/#3","title":"3. \u5ffd\u7565\u8cc7\u6e90\u6e05\u7406","text":"<p>\u672a\u80fd\u6b63\u78ba\u6e05\u7406\u8cc7\u6e90\u53ef\u80fd\u5c0e\u81f4\u8cc7\u6e90\u6d29\u6f0f</p> <ul> <li>\u89e3\u6c7a\u65b9\u6848: \u4f7f\u7528\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u6216 <code>yield</code> \u4f9d\u8cf4\u78ba\u4fdd\u8cc7\u6e90\u88ab\u9069\u7576\u6e05\u7406\u3002</li> </ul>"},{"location":"dependency-injection/09-best-practice/#_7","title":"\u4f9d\u8cf4\u6ce8\u5165\u9032\u968e\u6280\u5de7","text":"<ol> <li>\u689d\u4ef6\u4f9d\u8cf4: \u6839\u64da\u689d\u4ef6\u9078\u64c7\u4e0d\u540c\u7684\u4f9d\u8cf4\u5be6\u73fe\u3002</li> <li>\u53c3\u6578\u5316\u4f9d\u8cf4: \u5275\u5efa\u53ef\u63a5\u53d7\u53c3\u6578\u7684\u4f9d\u8cf4\uff0c\u4ee5\u589e\u52a0\u9748\u6d3b\u6027\u3002</li> <li>\u52d5\u614b\u4f9d\u8cf4\u89e3\u6790: \u5728\u904b\u884c\u6642\u52d5\u614b\u9078\u64c7\u4f9d\u8cf4\u3002</li> </ol>"},{"location":"dependency-injection/09-best-practice/#_8","title":"\u95dc\u9375\u8981\u9ede\u56de\u9867","text":"<ol> <li>\u4fdd\u6301\u4f9d\u8cf4\u7c21\u55ae\u660e\u78ba\uff1a\u6bcf\u500b\u4f9d\u8cf4\u61c9\u8a72\u6709\u4e00\u500b\u660e\u78ba\u7684\u76ee\u7684</li> <li>\u69cb\u5efa\u4f9d\u8cf4\u5c64\u6b21\u7d50\u69cb\uff1a\u4f7f\u7528\u5206\u5c64\u65b9\u6cd5\u7d44\u7e54\u4f9d\u8cf4</li> <li>\u512a\u5316\u6027\u80fd\uff1a\u9069\u7576\u4f7f\u7528\u7de9\u5b58\u548c\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u4f9d\u8cf4\u5d4c\u5957</li> <li>\u8a2d\u8a08\u4fbf\u65bc\u6e2c\u8a66\u7684\u4f9d\u8cf4\uff1a\u4f7f\u4f9d\u8cf4\u6613\u65bc\u5728\u6e2c\u8a66\u4e2d\u66ff\u63db\u6216\u6a21\u64ec</li> <li>\u5b89\u5168\u8655\u7406\u654f\u611f\u914d\u7f6e\uff1a\u78ba\u4fdd\u654f\u611f\u4fe1\u606f\u4e0d\u88ab\u610f\u5916\u66b4\u9732</li> <li>\u7d44\u7e54\u826f\u597d\u7684\u4ee3\u78bc\u7d50\u69cb\uff1a\u6309\u529f\u80fd\u7d44\u7e54\u4f9d\u8cf4\uff0c\u63d0\u9ad8\u53ef\u7dad\u8b77\u6027</li> </ol>"},{"location":"error-handling/01-basic/","title":"FastAPI \u7570\u5e38\u8655\u7406\u57fa\u790e","text":"<p>FastAPI \u662f\u4e00\u500b\u73fe\u4ee3\u5316\u7684 Python Web \u6846\u67b6\uff0c\u5b83\u57fa\u65bc Starlette \u548c Pydantic\uff0c\u63d0\u4f9b\u4e86\u5f37\u5927\u7684\u7570\u5e38\u8655\u7406\u6a5f\u5236\u3002\u5728 FastAPI \u4e2d\uff0c\u7570\u5e38\u8655\u7406\u662f\u78ba\u4fdd API \u7a69\u5b9a\u6027\u548c\u63d0\u4f9b\u826f\u597d\u7528\u6236\u9ad4\u9a57\u7684\u95dc\u9375\u90e8\u5206\u3002</p>"},{"location":"error-handling/01-basic/#_1","title":"\u7570\u5e38\u8655\u7406\u7684\u91cd\u8981\u6027","text":"<p>\u5728 API \u958b\u767c\u4e2d\uff0c\u7570\u5e38\u8655\u7406\u81f3\u95dc\u91cd\u8981\uff0c\u56e0\u70ba\u5b83\u80fd\u5920\u5e36\u4f86\u4ee5\u4e0b\u512a\u52e2\uff1a</p> \u512a\u52e2 \u8aaa\u660e \u63d0\u4f9b\u6e05\u6670\u7684\u932f\u8aa4\u4fe1\u606f \u5411\u5ba2\u6236\u7aef\u63d0\u4f9b\u660e\u78ba\u3001\u7d50\u69cb\u5316\u7684\u932f\u8aa4\u4fe1\u606f\uff0c\u5e6b\u52a9\u958b\u767c\u8005\u5feb\u901f\u7406\u89e3\u554f\u984c\u6240\u5728 \u9632\u6b62\u61c9\u7528\u5d29\u6f70 \u6355\u7372\u4e26\u59a5\u5584\u8655\u7406\u7570\u5e38\uff0c\u78ba\u4fdd\u61c9\u7528\u5728\u9762\u5c0d\u932f\u8aa4\u6642\u4ecd\u80fd\u4fdd\u6301\u7a69\u5b9a\u904b\u884c \u7dad\u8b77\u4e00\u81f4\u7684 API \u97ff\u61c9\u683c\u5f0f \u78ba\u4fdd\u6240\u6709\u932f\u8aa4\u97ff\u61c9\u9075\u5faa\u7d71\u4e00\u7684\u683c\u5f0f\uff0c\u4fbf\u65bc\u5ba2\u6236\u7aef\u8655\u7406 \u63d0\u9ad8\u5b89\u5168\u6027 \u907f\u514d\u5728\u932f\u8aa4\u4fe1\u606f\u4e2d\u6d29\u9732\u654f\u611f\u4fe1\u606f\uff0c\u540c\u6642\u63d0\u4f9b\u8db3\u5920\u7684\u4fe1\u606f\u5e6b\u52a9\u8abf\u8a66 \u6539\u5584\u7528\u6236\u9ad4\u9a57 \u901a\u904e\u53cb\u597d\u7684\u932f\u8aa4\u4fe1\u606f\uff0c\u5e6b\u52a9 API \u6d88\u8cbb\u8005\u66f4\u597d\u5730\u7406\u89e3\u548c\u89e3\u6c7a\u554f\u984c \u7c21\u5316\u8abf\u8a66\u548c\u76e3\u63a7 \u6a19\u6e96\u5316\u7684\u932f\u8aa4\u8655\u7406\u4f7f\u5f97\u65e5\u8a8c\u8a18\u9304\u548c\u76e3\u63a7\u66f4\u52a0\u5bb9\u6613"},{"location":"error-handling/01-basic/#fastapi_1","title":"FastAPI \u7570\u5e38\u8655\u7406\u6a5f\u5236","text":"<p>FastAPI \u7684\u7570\u5e38\u8655\u7406\u6a5f\u5236\u5efa\u7acb\u5728 Starlette \u7684\u57fa\u790e\u4e0a\uff0c\u4e26\u9032\u884c\u4e86\u64f4\u5c55\uff0c\u63d0\u4f9b\u4e86\u66f4\u52a0\u8c50\u5bcc\u548c\u9748\u6d3b\u7684\u529f\u80fd\u3002</p>"},{"location":"error-handling/01-basic/#_2","title":"\u57fa\u672c\u7570\u5e38\u8655\u7406\u6d41\u7a0b","text":"<p>\u7576 FastAPI \u61c9\u7528\u4e2d\u767c\u751f\u7570\u5e38\u6642\uff0c\u8655\u7406\u6d41\u7a0b\u5982\u4e0b\uff1a</p> <ol> <li>\u7570\u5e38\u88ab\u62cb\u51fa\uff08\u986f\u5f0f\u6216\u96b1\u5f0f\uff09</li> <li>FastAPI \u6355\u7372\u7570\u5e38</li> <li>\u67e5\u627e\u5c0d\u61c9\u7684\u7570\u5e38\u8655\u7406\u5668</li> <li>\u5c07\u7570\u5e38\u8f49\u63db\u70ba\u9069\u7576\u7684 HTTP \u97ff\u61c9</li> <li>\u8fd4\u56de\u5305\u542b\u932f\u8aa4\u8a73\u60c5\u7684 JSON \u97ff\u61c9\u7d66\u5ba2\u6236\u7aef</li> </ol>"},{"location":"error-handling/01-basic/#httpexception","title":"HTTPException","text":"<p>FastAPI \u63d0\u4f9b\u4e86 <code>HTTPException</code> \u985e\uff0c\u9019\u662f\u8655\u7406 HTTP \u932f\u8aa4\u6700\u57fa\u672c\u7684\u65b9\u5f0f\uff1a</p> <pre><code>from fastapi import FastAPI, HTTPException\n\napp = FastAPI()\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int):\n    if item_id == 0:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return {\"item_id\": item_id}\n</code></pre> <p>\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u7576 <code>item_id</code> \u70ba 0 \u6642\uff0c\u6703\u62cb\u51fa\u4e00\u500b 404 \u932f\u8aa4\uff0c\u5ba2\u6236\u7aef\u5c07\u6536\u5230\u5982\u4e0b JSON \u97ff\u61c9\uff1a</p> <pre><code>{\n  \"detail\": \"Item not found\"\n}\n</code></pre>"},{"location":"error-handling/01-basic/#httpexception_1","title":"HTTPException \u53c3\u6578","text":"<p><code>HTTPException</code> \u652f\u6301\u4ee5\u4e0b\u53c3\u6578\uff1a</p> \u53c3\u6578 \u985e\u578b \u8aaa\u660e <code>status_code</code> int HTTP \u72c0\u614b\u78bc <code>detail</code> Any \u932f\u8aa4\u8a73\u60c5\uff0c\u5c07\u4f5c\u70ba\u97ff\u61c9\u7684 <code>detail</code> \u5b57\u6bb5 <code>headers</code> dict \u53ef\u9078\uff0c\u8981\u5305\u542b\u5728\u97ff\u61c9\u4e2d\u7684\u984d\u5916 HTTP \u6a19\u982d"},{"location":"error-handling/01-basic/#_3","title":"\u7570\u5e38\u8655\u7406\u5668","text":"<p>FastAPI \u5141\u8a31\u60a8\u8a3b\u518a\u81ea\u5b9a\u7fa9\u7684\u7570\u5e38\u8655\u7406\u5668\uff0c\u7528\u65bc\u6355\u7372\u548c\u8655\u7406\u7279\u5b9a\u985e\u578b\u7684\u7570\u5e38\uff1a</p> <pre><code>from fastapi import FastAPI, Request\nfrom fastapi.responses import JSONResponse\n\napp = FastAPI()\n\nclass CustomException(Exception):\n    def __init__(self, name: str):\n        self.name = name\n\n@app.exception_handler(CustomException)\nasync def custom_exception_handler(request: Request, exc: CustomException):\n    return JSONResponse(\n        status_code=418,\n        content={\"message\": f\"Oops! {exc.name} did something wrong.\"}\n    )\n\n@app.get(\"/custom-error\")\nasync def trigger_custom_error():\n    raise CustomException(name=\"Someone\")\n</code></pre> <p>\u7576\u8a2a\u554f <code>/custom-error</code> \u7aef\u9ede\u6642\uff0c\u5ba2\u6236\u7aef\u5c07\u6536\u5230\u4e00\u500b 418 \u72c0\u614b\u78bc\u548c\u81ea\u5b9a\u7fa9\u7684\u932f\u8aa4\u4fe1\u606f\u3002</p>"},{"location":"error-handling/01-basic/#_4","title":"\u8acb\u6c42\u9a57\u8b49\u7570\u5e38","text":"<p>FastAPI \u4f7f\u7528 Pydantic \u9032\u884c\u8acb\u6c42\u6578\u64da\u9a57\u8b49\u3002\u7576\u8acb\u6c42\u6578\u64da\u4e0d\u7b26\u5408\u6a21\u578b\u5b9a\u7fa9\u6642\uff0c\u6703\u81ea\u52d5\u62cb\u51fa <code>RequestValidationError</code>\uff1a</p> <pre><code>from fastapi import FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\nclass Item(BaseModel):\n    name: str\n    price: float = Field(..., gt=0)\n    is_offer: bool = False\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return item\n</code></pre> <p>\u5982\u679c\u5ba2\u6236\u7aef\u767c\u9001\u7684\u8acb\u6c42\u4e2d <code>price</code> \u5c0f\u65bc\u6216\u7b49\u65bc 0\uff0cFastAPI \u6703\u81ea\u52d5\u8fd4\u56de 422 \u72c0\u614b\u78bc\u548c\u8a73\u7d30\u7684\u9a57\u8b49\u932f\u8aa4\u4fe1\u606f\u3002</p>"},{"location":"error-handling/01-basic/#_5","title":"\u9ed8\u8a8d\u7570\u5e38\u8655\u7406","text":"<p>FastAPI \u70ba\u5e38\u898b\u7684\u932f\u8aa4\u60c5\u6cc1\u63d0\u4f9b\u4e86\u9ed8\u8a8d\u7684\u7570\u5e38\u8655\u7406\u5668\uff1a</p> \u7570\u5e38\u985e\u578b \u8aaa\u660e \u9ed8\u8a8d\u72c0\u614b\u78bc RequestValidationError \u8acb\u6c42\u6578\u64da\u4e0d\u7b26\u5408 Pydantic \u6a21\u578b\u5b9a\u7fa9 422 \u8def\u5f91\u53c3\u6578\u8f49\u63db\u932f\u8aa4 \u8def\u5f91\u53c3\u6578\u7121\u6cd5\u8f49\u63db\u70ba\u6307\u5b9a\u985e\u578b 422 HTTPException \u986f\u5f0f\u62cb\u51fa\u7684 HTTP \u7570\u5e38 \u7531\u7570\u5e38\u6307\u5b9a"},{"location":"error-handling/01-basic/#_6","title":"\u7570\u5e38\u8655\u7406\u7684\u512a\u5148\u7d1a","text":"<p>FastAPI \u6309\u7167\u4ee5\u4e0b\u512a\u5148\u7d1a\u8655\u7406\u7570\u5e38\uff1a</p> \u512a\u5148\u7d1a \u8655\u7406\u5668\u985e\u578b 1 \u70ba\u7279\u5b9a\u7570\u5e38\u985e\u578b\u8a3b\u518a\u7684\u81ea\u5b9a\u7fa9\u7570\u5e38\u8655\u7406\u5668 2 \u70ba\u7570\u5e38\u57fa\u985e\u8a3b\u518a\u7684\u7570\u5e38\u8655\u7406\u5668 3 \u9ed8\u8a8d\u7684\u7570\u5e38\u8655\u7406\u5668"},{"location":"error-handling/01-basic/#_7","title":"\u5e38\u898b\u7570\u5e38\u8207\u72c0\u614b\u78bc\u5c0d\u61c9\u8868","text":"<p>\u4ee5\u4e0b\u662f\u4e00\u4e9b\u5e38\u898b\u7684 HTTP \u72c0\u614b\u78bc\u53ca\u5176\u9069\u7528\u5834\u666f\uff1a</p> \u72c0\u614b\u78bc \u540d\u7a31 \u9069\u7528\u5834\u666f 400 Bad Request \u5ba2\u6236\u7aef\u8acb\u6c42\u6709\u8aa4\uff0c\u5982\u53c3\u6578\u683c\u5f0f\u932f\u8aa4 401 Unauthorized \u672a\u63d0\u4f9b\u8eab\u4efd\u9a57\u8b49\u6216\u8eab\u4efd\u9a57\u8b49\u5931\u6557 403 Forbidden \u5df2\u8a8d\u8b49\u4f46\u7121\u6b0a\u8a2a\u554f\u8cc7\u6e90 404 Not Found \u8acb\u6c42\u7684\u8cc7\u6e90\u4e0d\u5b58\u5728 405 Method Not Allowed \u4e0d\u652f\u6301\u8a72 HTTP \u65b9\u6cd5 409 Conflict \u8acb\u6c42\u8207\u670d\u52d9\u5668\u7576\u524d\u72c0\u614b\u885d\u7a81 422 Unprocessable Entity \u8acb\u6c42\u683c\u5f0f\u6b63\u78ba\u4f46\u8a9e\u7fa9\u932f\u8aa4 429 Too Many Requests \u8acb\u6c42\u983b\u7387\u8d85\u904e\u9650\u5236 500 Internal Server Error \u670d\u52d9\u5668\u5167\u90e8\u932f\u8aa4 503 Service Unavailable \u670d\u52d9\u66ab\u6642\u4e0d\u53ef\u7528"},{"location":"error-handling/01-basic/#_8","title":"\u7c21\u55ae\u793a\u4f8b","text":"<p>\u4e0b\u9762\u662f\u4e00\u500b\u7d50\u5408\u4e86\u591a\u7a2e\u7570\u5e38\u8655\u7406\u6a5f\u5236\u7684\u7c21\u55ae\u793a\u4f8b\uff1a</p> <pre><code>from fastapi import FastAPI, HTTPException, Request, status\nfrom fastapi.exceptions import RequestValidationError\nfrom fastapi.responses import JSONResponse\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n# \u6a21\u578b\u5b9a\u7fa9\nclass Item(BaseModel):\n    name: str\n    price: float = Field(..., gt=0)\n\n# \u81ea\u5b9a\u7fa9\u7570\u5e38\nclass OutOfStockError(Exception):\n    def __init__(self, item_name: str):\n        self.item_name = item_name\n\n# \u8655\u7406\u9a57\u8b49\u932f\u8aa4\n@app.exception_handler(RequestValidationError)\nasync def validation_exception_handler(request: Request, exc: RequestValidationError):\n    return JSONResponse(\n        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,\n        content={\n            \"status\": \"error\",\n            \"message\": \"Validation error\",\n            \"errors\": exc.errors()\n        }\n    )\n\n# \u8655\u7406\u81ea\u5b9a\u7fa9\u7570\u5e38\n@app.exception_handler(OutOfStockError)\nasync def out_of_stock_exception_handler(request: Request, exc: OutOfStockError):\n    return JSONResponse(\n        status_code=status.HTTP_400_BAD_REQUEST,\n        content={\n            \"status\": \"error\",\n            \"message\": f\"The item '{exc.item_name}' is out of stock\"\n        }\n    )\n\n# API \u7aef\u9ede\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    if item.name == \"banana\":\n        raise OutOfStockError(item_name=item.name)\n\n    if item.name == \"error\":\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"You cannot use 'error' as an item name\"\n        )\n\n    return {\"status\": \"success\", \"item\": item.dict()}\n</code></pre>"},{"location":"error-handling/01-basic/#_9","title":"\u7570\u5e38\u8655\u7406\u97ff\u61c9\u793a\u4f8b","text":"<p>\u4e0b\u8868\u5c55\u793a\u4e86\u4e0d\u540c\u60c5\u6cc1\u4e0b\u7684\u8acb\u6c42\u548c\u97ff\u61c9\u793a\u4f8b\uff1a</p> \u8acb\u6c42 \u60c5\u6cc1 \u97ff\u61c9\u72c0\u614b\u78bc \u97ff\u61c9\u5167\u5bb9 <code>POST /items/</code> \u8acb\u6c42\u9ad4: <code>{\"name\": \"apple\", \"price\": 5.99}</code> \u6709\u6548\u8acb\u6c42 200 <code>{\"status\": \"success\", \"item\": {\"name\": \"apple\", \"price\": 5.99}}</code> <code>POST /items/</code> \u8acb\u6c42\u9ad4: <code>{\"name\": \"apple\", \"price\": -5.99}</code> \u9a57\u8b49\u932f\u8aa4 422 <code>{\"status\": \"error\", \"message\": \"Validation error\", \"errors\": [...]}</code> <code>POST /items/</code> \u8acb\u6c42\u9ad4: <code>{\"name\": \"banana\", \"price\": 3.99}</code> \u81ea\u5b9a\u7fa9\u7570\u5e38 400 <code>{\"status\": \"error\", \"message\": \"The item 'banana' is out of stock\"}</code> <code>POST /items/</code> \u8acb\u6c42\u9ad4: <code>{\"name\": \"error\", \"price\": 1.99}</code> HTTP \u7570\u5e38 400 <code>{\"detail\": \"You cannot use 'error' as an item name\"}</code>"},{"location":"error-handling/01-basic/#_10","title":"\u7e3d\u7d50","text":"<p>FastAPI \u63d0\u4f9b\u4e86\u5f37\u5927\u800c\u9748\u6d3b\u7684\u7570\u5e38\u8655\u7406\u6a5f\u5236\uff0c\u4f7f\u958b\u767c\u8005\u80fd\u5920:</p> <ul> <li>\u4f7f\u7528 <code>HTTPException</code> \u8655\u7406\u57fa\u672c\u7684 HTTP \u932f\u8aa4</li> <li>\u5275\u5efa\u81ea\u5b9a\u7fa9\u7570\u5e38\u985e\u578b\u8655\u7406\u7279\u5b9a\u7684\u696d\u52d9\u908f\u8f2f\u932f\u8aa4</li> <li>\u8a3b\u518a\u7570\u5e38\u8655\u7406\u5668\u4f86\u81ea\u5b9a\u7fa9\u932f\u8aa4\u97ff\u61c9\u683c\u5f0f</li> <li>\u5229\u7528 Pydantic \u9032\u884c\u81ea\u52d5\u7684\u8acb\u6c42\u6578\u64da\u9a57\u8b49</li> </ul>"},{"location":"error-handling/02-built-in-exceptions/","title":"\u5167\u5efa\u7570\u5e38\u985e\u578b\u8207 HTTP \u72c0\u614b\u78bc","text":"<p>FastAPI \u63d0\u4f9b\u4e86\u591a\u7a2e\u5167\u5efa\u7684\u7570\u5e38\u985e\u578b\u548c HTTP \u72c0\u614b\u78bc\uff0c\u7528\u65bc\u8655\u7406\u5404\u7a2e\u932f\u8aa4\u60c5\u6cc1\u3002\u4e86\u89e3\u9019\u4e9b\u5167\u5efa\u6a5f\u5236\u5c0d\u65bc\u69cb\u5efa\u5065\u58ef\u7684 API \u81f3\u95dc\u91cd\u8981\u3002</p>"},{"location":"error-handling/02-built-in-exceptions/#httpexception","title":"HTTPException","text":"<p><code>HTTPException</code> \u662f FastAPI \u4e2d\u6700\u5e38\u7528\u7684\u7570\u5e38\u985e\u578b\uff0c\u5b83\u5141\u8a31\u60a8\u6307\u5b9a HTTP \u72c0\u614b\u78bc\u548c\u932f\u8aa4\u8a73\u60c5\uff0c\u4e26\u53ef\u9078\u5730\u6dfb\u52a0\u81ea\u5b9a\u7fa9\u6a19\u982d\u3002</p>"},{"location":"error-handling/02-built-in-exceptions/#_1","title":"\u57fa\u672c\u7528\u6cd5","text":"<pre><code>from fastapi import FastAPI, HTTPException\n\napp = FastAPI()\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int):\n    if item_id &lt; 0:\n        raise HTTPException(status_code=400, detail=\"Item ID must be positive\")\n    if item_id == 0:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return {\"item_id\": item_id, \"name\": f\"Item {item_id}\"}\n</code></pre>"},{"location":"error-handling/02-built-in-exceptions/#httpexception_1","title":"HTTPException \u53c3\u6578\u8a73\u89e3","text":"\u53c3\u6578 \u985e\u578b \u5fc5\u9700 \u8aaa\u660e <code>status_code</code> int \u662f HTTP \u72c0\u614b\u78bc <code>detail</code> Any \u5426 \u932f\u8aa4\u8a73\u60c5\uff0c\u5c07\u4f5c\u70ba\u97ff\u61c9\u7684 <code>detail</code> \u5b57\u6bb5 <code>headers</code> dict \u5426 \u8981\u5305\u542b\u5728\u97ff\u61c9\u4e2d\u7684\u984d\u5916 HTTP \u6a19\u982d"},{"location":"error-handling/02-built-in-exceptions/#_2","title":"\u97ff\u61c9\u683c\u5f0f","text":"<p>\u7576\u62cb\u51fa <code>HTTPException</code> \u6642\uff0cFastAPI \u6703\u81ea\u52d5\u751f\u6210\u4e00\u500b JSON \u97ff\u61c9\uff0c\u683c\u5f0f\u5982\u4e0b\uff1a</p> <pre><code>{\n  \"detail\": \"\u932f\u8aa4\u4fe1\u606f\"\n}\n</code></pre>"},{"location":"error-handling/02-built-in-exceptions/#http_1","title":"\u5e38\u898b HTTP \u72c0\u614b\u78bc","text":"<p>HTTP \u72c0\u614b\u78bc\u5206\u70ba\u4e94\u985e\uff0c\u6bcf\u985e\u7528\u65bc\u8868\u793a\u4e0d\u540c\u985e\u578b\u7684\u97ff\u61c9\uff1a</p> \u985e\u5225 \u7bc4\u570d \u8aaa\u660e 1xx 100-199 \u4fe1\u606f\u6027\u72c0\u614b\u78bc\uff0c\u8868\u793a\u8acb\u6c42\u5df2\u88ab\u63a5\u6536\u4e26\u6b63\u5728\u8655\u7406 2xx 200-299 \u6210\u529f\u72c0\u614b\u78bc\uff0c\u8868\u793a\u8acb\u6c42\u5df2\u6210\u529f\u88ab\u63a5\u6536\u3001\u7406\u89e3\u548c\u8655\u7406 3xx 300-399 \u91cd\u5b9a\u5411\u72c0\u614b\u78bc\uff0c\u8868\u793a\u9700\u8981\u5ba2\u6236\u7aef\u9032\u4e00\u6b65\u64cd\u4f5c\u624d\u80fd\u5b8c\u6210\u8acb\u6c42 4xx 400-499 \u5ba2\u6236\u7aef\u932f\u8aa4\u72c0\u614b\u78bc\uff0c\u8868\u793a\u5ba2\u6236\u7aef\u8acb\u6c42\u5305\u542b\u932f\u8aa4\u6216\u7121\u6cd5\u88ab\u670d\u52d9\u5668\u8655\u7406 5xx 500-599 \u670d\u52d9\u5668\u932f\u8aa4\u72c0\u614b\u78bc\uff0c\u8868\u793a\u670d\u52d9\u5668\u5728\u8655\u7406\u8acb\u6c42\u6642\u767c\u751f\u932f\u8aa4"},{"location":"error-handling/02-built-in-exceptions/#http_2","title":"\u5e38\u7528 HTTP \u72c0\u614b\u78bc\u8a73\u89e3","text":"<p>\u4ee5\u4e0b\u662f API \u958b\u767c\u4e2d\u6700\u5e38\u7528\u7684 HTTP \u72c0\u614b\u78bc\uff1a</p> \u72c0\u614b\u78bc \u540d\u7a31 \u8aaa\u660e \u4f7f\u7528\u5834\u666f 200 OK \u8acb\u6c42\u6210\u529f \u6210\u529f\u7372\u53d6\u8cc7\u6e90\u3001\u6210\u529f\u66f4\u65b0\u8cc7\u6e90 201 Created \u8cc7\u6e90\u5275\u5efa\u6210\u529f \u6210\u529f\u5275\u5efa\u65b0\u8cc7\u6e90 204 No Content \u8acb\u6c42\u6210\u529f\uff0c\u4f46\u7121\u8fd4\u56de\u5167\u5bb9 \u6210\u529f\u522a\u9664\u8cc7\u6e90 400 Bad Request \u5ba2\u6236\u7aef\u8acb\u6c42\u6709\u8aa4 \u8acb\u6c42\u53c3\u6578\u683c\u5f0f\u932f\u8aa4\u3001\u908f\u8f2f\u932f\u8aa4 401 Unauthorized \u672a\u63d0\u4f9b\u8eab\u4efd\u9a57\u8b49\u6216\u8eab\u4efd\u9a57\u8b49\u5931\u6557 \u7f3a\u5c11\u8a8d\u8b49\u4fe1\u606f\u3001\u8a8d\u8b49\u4fe1\u606f\u7121\u6548 403 Forbidden \u5df2\u8a8d\u8b49\u4f46\u7121\u6b0a\u8a2a\u554f\u8cc7\u6e90 \u7528\u6236\u7121\u6b0a\u57f7\u884c\u64cd\u4f5c 404 Not Found \u8acb\u6c42\u7684\u8cc7\u6e90\u4e0d\u5b58\u5728 \u8cc7\u6e90 ID \u4e0d\u5b58\u5728 405 Method Not Allowed \u4e0d\u652f\u6301\u8a72 HTTP \u65b9\u6cd5 \u5617\u8a66\u4f7f\u7528\u4e0d\u652f\u6301\u7684 HTTP \u65b9\u6cd5 409 Conflict \u8acb\u6c42\u8207\u670d\u52d9\u5668\u7576\u524d\u72c0\u614b\u885d\u7a81 \u8cc7\u6e90\u5df2\u5b58\u5728\u3001\u7248\u672c\u885d\u7a81 422 Unprocessable Entity \u8acb\u6c42\u683c\u5f0f\u6b63\u78ba\u4f46\u8a9e\u7fa9\u932f\u8aa4 \u8acb\u6c42\u6578\u64da\u9a57\u8b49\u5931\u6557 429 Too Many Requests \u8acb\u6c42\u983b\u7387\u8d85\u904e\u9650\u5236 \u8d85\u904e API \u901f\u7387\u9650\u5236 500 Internal Server Error \u670d\u52d9\u5668\u5167\u90e8\u932f\u8aa4 \u672a\u6355\u7372\u7684\u7570\u5e38\u3001\u7cfb\u7d71\u932f\u8aa4 503 Service Unavailable \u670d\u52d9\u66ab\u6642\u4e0d\u53ef\u7528 \u670d\u52d9\u5668\u904e\u8f09\u3001\u7dad\u8b77\u4e2d"},{"location":"error-handling/02-built-in-exceptions/#fastapi","title":"\u5728 FastAPI \u4e2d\u4f7f\u7528\u72c0\u614b\u78bc","text":"<p>FastAPI \u63d0\u4f9b\u4e86 <code>status</code> \u6a21\u584a\uff0c\u5305\u542b\u6240\u6709\u6a19\u6e96 HTTP \u72c0\u614b\u78bc\u7684\u5e38\u91cf\uff1a</p> <pre><code>from fastapi import FastAPI, HTTPException, status\n\napp = FastAPI()\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int):\n    if item_id &lt; 0:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"Item ID must be positive\"\n        )\n    if item_id == 0:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Item not found\"\n        )\n    return {\"item_id\": item_id, \"name\": f\"Item {item_id}\"}\n</code></pre> <p>\u4f7f\u7528 <code>status</code> \u6a21\u584a\u7684\u5e38\u91cf\u6bd4\u76f4\u63a5\u4f7f\u7528\u6578\u5b57\u72c0\u614b\u78bc\u66f4\u5177\u53ef\u8b80\u6027\u548c\u53ef\u7dad\u8b77\u6027\u3002</p>"},{"location":"error-handling/02-built-in-exceptions/#_3","title":"\u5e38\u898b\u72c0\u614b\u78bc\u4f7f\u7528\u793a\u4f8b","text":"\u72c0\u614b\u78bc\u5e38\u91cf \u4f7f\u7528\u793a\u4f8b <code>status.HTTP_400_BAD_REQUEST</code> <code>raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=\"Invalid parameter\")</code> <code>status.HTTP_401_UNAUTHORIZED</code> <code>raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail=\"Invalid credentials\")</code> <code>status.HTTP_403_FORBIDDEN</code> <code>raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail=\"Not enough permissions\")</code> <code>status.HTTP_404_NOT_FOUND</code> <code>raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=\"User not found\")</code> <code>status.HTTP_409_CONFLICT</code> <code>raise HTTPException(status_code=status.HTTP_409_CONFLICT, detail=\"Username already exists\")</code> <code>status.HTTP_422_UNPROCESSABLE_ENTITY</code> <code>raise HTTPException(status_code=status.HTTP_422_UNPROCESSABLE_ENTITY, detail=\"Invalid email format\")</code> <code>status.HTTP_500_INTERNAL_SERVER_ERROR</code> <code>raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=\"Database error\")</code>"},{"location":"error-handling/02-built-in-exceptions/#_4","title":"\u5e36\u6709\u81ea\u5b9a\u7fa9\u6a19\u982d\u7684\u7570\u5e38","text":"<p>\u6709\u6642\u60a8\u9700\u8981\u5728\u932f\u8aa4\u97ff\u61c9\u4e2d\u5305\u542b\u984d\u5916\u7684 HTTP \u6a19\u982d\uff0c\u4f8b\u5982\u5728\u8eab\u4efd\u9a57\u8b49\u5931\u6557\u6642\u6307\u793a\u5ba2\u6236\u7aef\u5982\u4f55\u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff1a</p> <pre><code>from fastapi import FastAPI, HTTPException, status\n\napp = FastAPI()\n\n@app.get(\"/protected-resource/\")\nasync def get_protected_resource(token: str = None):\n    if token != \"valid_token\":\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return {\"message\": \"You have access to the protected resource\"}\n</code></pre> <p>\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u7576\u8a8d\u8b49\u5931\u6557\u6642\uff0c\u97ff\u61c9\u4e2d\u6703\u5305\u542b <code>WWW-Authenticate: Bearer</code> \u6a19\u982d\uff0c\u544a\u8a34\u5ba2\u6236\u7aef\u61c9\u8a72\u4f7f\u7528 Bearer \u4ee4\u724c\u9032\u884c\u8eab\u4efd\u9a57\u8b49\u3002</p>"},{"location":"error-handling/02-built-in-exceptions/#_5","title":"\u5e38\u898b\u7684\u81ea\u5b9a\u7fa9\u6a19\u982d\u5834\u666f","text":"\u5834\u666f \u6a19\u982d \u793a\u4f8b \u8eab\u4efd\u9a57\u8b49\u5931\u6557 <code>WWW-Authenticate</code> <code>{\"WWW-Authenticate\": \"Bearer\"}</code> \u91cd\u5b9a\u5411 <code>Location</code> <code>{\"Location\": \"/new-url\"}</code> \u901f\u7387\u9650\u5236 <code>Retry-After</code> <code>{\"Retry-After\": \"60\"}</code> \u8de8\u57df\u8cc7\u6e90\u5171\u4eab <code>Access-Control-Allow-Origin</code> <code>{\"Access-Control-Allow-Origin\": \"*\"}</code>"},{"location":"error-handling/02-built-in-exceptions/#fastapi_1","title":"FastAPI \u5167\u5efa\u7684\u5176\u4ed6\u7570\u5e38\u985e\u578b","text":"<p>\u9664\u4e86 <code>HTTPException</code>\uff0cFastAPI \u9084\u63d0\u4f9b\u4e86\u5176\u4ed6\u5e7e\u7a2e\u5167\u5efa\u7570\u5e38\u985e\u578b\uff1a</p>"},{"location":"error-handling/02-built-in-exceptions/#requestvalidationerror","title":"RequestValidationError","text":"<p>\u7576\u8acb\u6c42\u6578\u64da\u4e0d\u7b26\u5408 Pydantic \u6a21\u578b\u5b9a\u7fa9\u6642\uff0cFastAPI \u6703\u81ea\u52d5\u62cb\u51fa <code>RequestValidationError</code>\uff1a</p> <pre><code>from fastapi import FastAPI, Request\nfrom fastapi.exceptions import RequestValidationError\nfrom fastapi.responses import JSONResponse\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\nclass Item(BaseModel):\n    name: str\n    price: float = Field(..., gt=0)\n\n@app.exception_handler(RequestValidationError)\nasync def validation_exception_handler(request: Request, exc: RequestValidationError):\n    return JSONResponse(\n        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,\n        content={\n            \"status\": \"error\",\n            \"message\": \"Validation error\",\n            \"errors\": exc.errors()\n        }\n    )\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return item\n</code></pre>"},{"location":"error-handling/02-built-in-exceptions/#websocketexception","title":"WebSocketException","text":"<p>\u7528\u65bc WebSocket \u9023\u63a5\u4e2d\u7684\u7570\u5e38\uff1a</p> <pre><code>from fastapi import FastAPI, WebSocket, WebSocketException, status\n\napp = FastAPI()\n\n@app.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    try:\n        while True:\n            data = await websocket.receive_text()\n            if data == \"error\":\n                raise WebSocketException(code=status.WS_1008_POLICY_VIOLATION)\n            await websocket.send_text(f\"Message received: {data}\")\n    except WebSocketException:\n        await websocket.close()\n</code></pre>"},{"location":"error-handling/02-built-in-exceptions/#starlettehttpexception","title":"StarletteHTTPException","text":"<p>FastAPI \u7684 <code>HTTPException</code> \u5be6\u969b\u4e0a\u662f\u57fa\u65bc Starlette \u7684 <code>HTTPException</code>\u3002\u5728\u5927\u591a\u6578\u60c5\u6cc1\u4e0b\uff0c\u60a8\u61c9\u8a72\u4f7f\u7528 FastAPI \u7684 <code>HTTPException</code>\uff0c\u4f46\u5728\u67d0\u4e9b Starlette \u7279\u5b9a\u7684\u4e0a\u4e0b\u6587\u4e2d\uff0c\u53ef\u80fd\u9700\u8981\u4f7f\u7528 <code>StarletteHTTPException</code>\u3002</p>"},{"location":"error-handling/02-built-in-exceptions/#http_3","title":"HTTP \u72c0\u614b\u78bc\u8207\u7570\u5e38\u7684\u6700\u4f73\u5be6\u8e10","text":""},{"location":"error-handling/02-built-in-exceptions/#_6","title":"\u9078\u64c7\u9069\u7576\u7684\u72c0\u614b\u78bc","text":"\u64cd\u4f5c \u6210\u529f\u72c0\u614b\u78bc \u5e38\u898b\u932f\u8aa4\u72c0\u614b\u78bc \u7372\u53d6\u8cc7\u6e90 200 OK 404 Not Found, 403 Forbidden \u5275\u5efa\u8cc7\u6e90 201 Created 400 Bad Request, 409 Conflict \u66f4\u65b0\u8cc7\u6e90 200 OK \u6216 204 No Content 400 Bad Request, 404 Not Found \u522a\u9664\u8cc7\u6e90 204 No Content 404 Not Found, 403 Forbidden \u6279\u91cf\u64cd\u4f5c 200 OK 400 Bad Request, 422 Unprocessable Entity"},{"location":"error-handling/02-built-in-exceptions/#_7","title":"\u63d0\u4f9b\u6709\u7528\u7684\u932f\u8aa4\u4fe1\u606f","text":"<p>\u826f\u597d\u7684\u932f\u8aa4\u4fe1\u606f\u61c9\u8a72\uff1a</p> <ol> <li>\u6e05\u6670\u8aaa\u660e\u932f\u8aa4\u539f\u56e0</li> <li>\u63d0\u4f9b\u8db3\u5920\u7684\u4fe1\u606f\u5e6b\u52a9\u8abf\u8a66</li> <li>\u907f\u514d\u6d29\u9732\u654f\u611f\u4fe1\u606f</li> <li>\u53ef\u80fd\u7684\u8a71\uff0c\u63d0\u4f9b\u89e3\u6c7a\u65b9\u6848</li> </ol> <pre><code># \u4e0d\u597d\u7684\u932f\u8aa4\u4fe1\u606f\nraise HTTPException(status_code=400, detail=\"Invalid input\")\n\n# \u597d\u7684\u932f\u8aa4\u4fe1\u606f\nraise HTTPException(\n    status_code=400,\n    detail=\"Username must be between 3 and 20 characters and contain only letters and numbers\"\n)\n</code></pre>"},{"location":"error-handling/02-built-in-exceptions/#_8","title":"\u7d50\u69cb\u5316\u932f\u8aa4\u97ff\u61c9","text":"<p>\u5c0d\u65bc\u8907\u96dc\u7684 API\uff0c\u8003\u616e\u4f7f\u7528\u7d50\u69cb\u5316\u7684\u932f\u8aa4\u97ff\u61c9\u683c\u5f0f\uff1a</p> <pre><code>from fastapi import FastAPI, HTTPException, Request, status\nfrom fastapi.responses import JSONResponse\n\napp = FastAPI()\n\n@app.exception_handler(HTTPException)\nasync def http_exception_handler(request: Request, exc: HTTPException):\n    return JSONResponse(\n        status_code=exc.status_code,\n        content={\n            \"status\": \"error\",\n            \"code\": exc.status_code,\n            \"message\": exc.detail,\n            \"path\": request.url.path\n        }\n    )\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int):\n    if item_id &lt; 0:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"Item ID must be positive\"\n        )\n    if item_id == 0:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Item not found\"\n        )\n    return {\"item_id\": item_id, \"name\": f\"Item {item_id}\"}\n</code></pre> <p>\u9019\u5c07\u7522\u751f\u5982\u4e0b\u683c\u5f0f\u7684\u932f\u8aa4\u97ff\u61c9\uff1a</p> <pre><code>{\n  \"status\": \"error\",\n  \"code\": 404,\n  \"message\": \"Item not found\",\n  \"path\": \"/items/0\"\n}\n</code></pre>"},{"location":"error-handling/02-built-in-exceptions/#_9","title":"\u72c0\u614b\u78bc\u9078\u64c7\u6c7a\u7b56\u6a39","text":"<p>\u4ee5\u4e0b\u6c7a\u7b56\u6a39\u53ef\u5e6b\u52a9\u60a8\u9078\u64c7\u9069\u7576\u7684 HTTP \u72c0\u614b\u78bc\uff1a</p> \u554f\u984c \u662f \u5426 \u5ba2\u6236\u7aef\u8acb\u6c42\u683c\u5f0f\u6709\u8aa4\uff1f 400 Bad Request \u7e7c\u7e8c \u9700\u8981\u8eab\u4efd\u9a57\u8b49\uff1f 401 Unauthorized \u7e7c\u7e8c \u5df2\u8a8d\u8b49\u4f46\u7121\u6b0a\u8a2a\u554f\uff1f 403 Forbidden \u7e7c\u7e8c \u8acb\u6c42\u7684\u8cc7\u6e90\u4e0d\u5b58\u5728\uff1f 404 Not Found \u7e7c\u7e8c \u4f7f\u7528\u4e86\u4e0d\u652f\u6301\u7684 HTTP \u65b9\u6cd5\uff1f 405 Method Not Allowed \u7e7c\u7e8c \u8acb\u6c42\u8207\u670d\u52d9\u5668\u72c0\u614b\u885d\u7a81\uff1f 409 Conflict \u7e7c\u7e8c \u8acb\u6c42\u6578\u64da\u9a57\u8b49\u5931\u6557\uff1f 422 Unprocessable Entity \u7e7c\u7e8c \u8acb\u6c42\u983b\u7387\u8d85\u904e\u9650\u5236\uff1f 429 Too Many Requests \u7e7c\u7e8c \u670d\u52d9\u5668\u767c\u751f\u932f\u8aa4\uff1f 500 Internal Server Error \u7e7c\u7e8c \u670d\u52d9\u66ab\u6642\u4e0d\u53ef\u7528\uff1f 503 Service Unavailable 200 OK"},{"location":"error-handling/02-built-in-exceptions/#_10","title":"\u7e3d\u7d50","text":"<p>FastAPI \u7684\u5167\u5efa\u7570\u5e38\u985e\u578b\u548c HTTP \u72c0\u614b\u78bc\u63d0\u4f9b\u4e86\u5f37\u5927\u7684\u932f\u8aa4\u8655\u7406\u57fa\u790e\uff1a</p> <ul> <li><code>HTTPException</code> \u662f\u6700\u5e38\u7528\u7684\u7570\u5e38\u985e\u578b\uff0c\u7528\u65bc\u8fd4\u56de\u7279\u5b9a\u7684 HTTP \u72c0\u614b\u78bc\u548c\u932f\u8aa4\u4fe1\u606f</li> <li>\u4f7f\u7528 <code>status</code> \u6a21\u584a\u4e2d\u7684\u5e38\u91cf\u53ef\u63d0\u9ad8\u4ee3\u78bc\u53ef\u8b80\u6027</li> <li>\u9078\u64c7\u9069\u7576\u7684 HTTP \u72c0\u614b\u78bc\u5c0d\u65bc\u69cb\u5efa\u7b26\u5408 RESTful \u539f\u5247\u7684 API \u81f3\u95dc\u91cd\u8981</li> <li>\u63d0\u4f9b\u6e05\u6670\u3001\u7d50\u69cb\u5316\u7684\u932f\u8aa4\u4fe1\u606f\u6709\u52a9\u65bc\u6539\u5584 API \u7684\u53ef\u7528\u6027</li> <li>\u81ea\u5b9a\u7fa9\u6a19\u982d\u53ef\u7528\u65bc\u63d0\u4f9b\u984d\u5916\u7684\u932f\u8aa4\u8655\u7406\u6307\u5c0e</li> </ul>"},{"location":"error-handling/03-custom-exceptions/","title":"\u81ea\u5b9a\u7fa9\u7570\u5e38\u8655\u7406","text":"<p>\u5728\u5be6\u969b\u61c9\u7528\u958b\u767c\u4e2d\uff0cFastAPI \u7684\u5167\u5efa\u7570\u5e38\u8655\u7406\u6a5f\u5236\u96d6\u7136\u5f37\u5927\uff0c\u4f46\u5f80\u5f80\u7121\u6cd5\u5b8c\u5168\u6eff\u8db3\u8907\u96dc\u696d\u52d9\u908f\u8f2f\u7684\u9700\u6c42\u3002\u81ea\u5b9a\u7fa9\u7570\u5e38\u8655\u7406\u5141\u8a31\u60a8\u6839\u64da\u61c9\u7528\u7684\u7279\u5b9a\u9700\u6c42\uff0c\u5275\u5efa\u66f4\u8cbc\u5408\u696d\u52d9\u5834\u666f\u7684\u932f\u8aa4\u8655\u7406\u6a5f\u5236\u3002</p>"},{"location":"error-handling/03-custom-exceptions/#_2","title":"\u81ea\u5b9a\u7fa9\u7570\u5e38\u985e","text":"<p>\u81ea\u5b9a\u7fa9\u7570\u5e38\u985e\u662f\u8655\u7406\u7279\u5b9a\u696d\u52d9\u908f\u8f2f\u932f\u8aa4\u7684\u57fa\u790e\u3002\u901a\u904e\u7e7c\u627f Python \u7684 <code>Exception</code> \u985e\u6216\u5176\u5b50\u985e\uff0c\u60a8\u53ef\u4ee5\u5275\u5efa\u5c08\u9580\u7528\u65bc\u8655\u7406\u7279\u5b9a\u932f\u8aa4\u60c5\u6cc1\u7684\u7570\u5e38\u985e\u578b\u3002</p>"},{"location":"error-handling/03-custom-exceptions/#_3","title":"\u57fa\u672c\u81ea\u5b9a\u7fa9\u7570\u5e38","text":"<pre><code>class ItemNotFoundError(Exception):\n    def __init__(self, item_id: int, message: str = None):\n        self.item_id = item_id\n        self.message = message or f\"Item with ID {item_id} not found\"\n        super().__init__(self.message)\n\nclass InsufficientFundsError(Exception):\n    def __init__(self, account_id: str, required: float, available: float):\n        self.account_id = account_id\n        self.required = required\n        self.available = available\n        self.message = f\"Account {account_id} has insufficient funds: required {required}, available {available}\"\n        super().__init__(self.message)\n</code></pre>"},{"location":"error-handling/03-custom-exceptions/#_4","title":"\u7570\u5e38\u5c64\u6b21\u7d50\u69cb","text":"<p>\u70ba\u4e86\u66f4\u597d\u5730\u7d44\u7e54\u7570\u5e38\uff0c\u53ef\u4ee5\u5275\u5efa\u4e00\u500b\u7570\u5e38\u5c64\u6b21\u7d50\u69cb\uff1a</p> <pre><code># \u57fa\u790e\u7570\u5e38\u985e\nclass AppException(Exception):\n    \"\"\"\u57fa\u790e\u61c9\u7528\u7570\u5e38\u985e\"\"\"\n    def __init__(self, message: str = \"An application error occurred\"):\n        self.message = message\n        super().__init__(self.message)\n\n# \u8cc7\u6e90\u7570\u5e38\nclass ResourceException(AppException):\n    \"\"\"\u8cc7\u6e90\u76f8\u95dc\u7684\u7570\u5e38\u57fa\u985e\"\"\"\n    pass\n\nclass ResourceNotFoundError(ResourceException):\n    \"\"\"\u8cc7\u6e90\u672a\u627e\u5230\u7570\u5e38\"\"\"\n    def __init__(self, resource_type: str, resource_id: str):\n        self.resource_type = resource_type\n        self.resource_id = resource_id\n        message = f\"{resource_type} with ID {resource_id} not found\"\n        super().__init__(message)\n\nclass ResourceAlreadyExistsError(ResourceException):\n    \"\"\"\u8cc7\u6e90\u5df2\u5b58\u5728\u7570\u5e38\"\"\"\n    def __init__(self, resource_type: str, identifier: str):\n        self.resource_type = resource_type\n        self.identifier = identifier\n        message = f\"{resource_type} with identifier {identifier} already exists\"\n        super().__init__(message)\n\n# \u6b0a\u9650\u7570\u5e38\nclass PermissionException(AppException):\n    \"\"\"\u6b0a\u9650\u76f8\u95dc\u7684\u7570\u5e38\u57fa\u985e\"\"\"\n    pass\n\nclass InsufficientPermissionsError(PermissionException):\n    \"\"\"\u6b0a\u9650\u4e0d\u8db3\u7570\u5e38\"\"\"\n    def __init__(self, user_id: str, required_permission: str):\n        self.user_id = user_id\n        self.required_permission = required_permission\n        message = f\"User {user_id} does not have the required permission: {required_permission}\"\n        super().__init__(message)\n</code></pre> <p>\u9019\u7a2e\u5c64\u6b21\u7d50\u69cb\u4f7f\u5f97\u7570\u5e38\u8655\u7406\u66f4\u52a0\u9748\u6d3b\uff0c\u60a8\u53ef\u4ee5\u9078\u64c7\u6355\u7372\u7279\u5b9a\u7684\u7570\u5e38\u6216\u66f4\u901a\u7528\u7684\u57fa\u985e\u7570\u5e38\u3002</p> \u7570\u5e38\u985e\u578b \u8aaa\u660e \u4f7f\u7528\u5834\u666f <code>AppException</code> \u57fa\u790e\u61c9\u7528\u7570\u5e38\u985e \u6355\u7372\u6240\u6709\u61c9\u7528\u7d1a\u7570\u5e38 <code>ResourceException</code> \u8cc7\u6e90\u76f8\u95dc\u7570\u5e38\u57fa\u985e \u6355\u7372\u6240\u6709\u8cc7\u6e90\u76f8\u95dc\u7570\u5e38 <code>ResourceNotFoundError</code> \u8cc7\u6e90\u672a\u627e\u5230\u7570\u5e38 \u7576\u8acb\u6c42\u7684\u8cc7\u6e90\u4e0d\u5b58\u5728\u6642 <code>ResourceAlreadyExistsError</code> \u8cc7\u6e90\u5df2\u5b58\u5728\u7570\u5e38 \u7576\u5617\u8a66\u5275\u5efa\u5df2\u5b58\u5728\u7684\u8cc7\u6e90\u6642 <code>PermissionException</code> \u6b0a\u9650\u76f8\u95dc\u7570\u5e38\u57fa\u985e \u6355\u7372\u6240\u6709\u6b0a\u9650\u76f8\u95dc\u7570\u5e38 <code>InsufficientPermissionsError</code> \u6b0a\u9650\u4e0d\u8db3\u7570\u5e38 \u7576\u7528\u6236\u6c92\u6709\u57f7\u884c\u64cd\u4f5c\u7684\u6b0a\u9650\u6642"},{"location":"error-handling/03-custom-exceptions/#_5","title":"\u8a3b\u518a\u7570\u5e38\u8655\u7406\u5668","text":"<p>\u5728 FastAPI \u4e2d\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 <code>@app.exception_handler()</code> \u88dd\u98fe\u5668\u8a3b\u518a\u81ea\u5b9a\u7fa9\u7570\u5e38\u8655\u7406\u5668\uff0c\u5c07\u81ea\u5b9a\u7fa9\u7570\u5e38\u8f49\u63db\u70ba\u9069\u7576\u7684 HTTP \u97ff\u61c9\u3002</p>"},{"location":"error-handling/03-custom-exceptions/#_6","title":"\u57fa\u672c\u7570\u5e38\u8655\u7406\u5668","text":"<pre><code>from fastapi import FastAPI, Request, status\nfrom fastapi.responses import JSONResponse\n\napp = FastAPI()\n\nclass ItemNotFoundError(Exception):\n    def __init__(self, item_id: int):\n        self.item_id = item_id\n\n@app.exception_handler(ItemNotFoundError)\nasync def item_not_found_exception_handler(request: Request, exc: ItemNotFoundError):\n    return JSONResponse(\n        status_code=status.HTTP_404_NOT_FOUND,\n        content={\n            \"status\": \"error\",\n            \"message\": f\"Item with ID {exc.item_id} not found\"\n        }\n    )\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int):\n    if item_id == 0:\n        raise ItemNotFoundError(item_id)\n    return {\"item_id\": item_id, \"name\": f\"Item {item_id}\"}\n</code></pre>"},{"location":"error-handling/03-custom-exceptions/#_7","title":"\u70ba\u7570\u5e38\u5c64\u6b21\u7d50\u69cb\u8a3b\u518a\u8655\u7406\u5668","text":"<p>\u60a8\u53ef\u4ee5\u70ba\u7570\u5e38\u5c64\u6b21\u7d50\u69cb\u4e2d\u7684\u4e0d\u540c\u7d1a\u5225\u8a3b\u518a\u8655\u7406\u5668\uff0c\u5f9e\u800c\u5be6\u73fe\u66f4\u9748\u6d3b\u7684\u932f\u8aa4\u8655\u7406\uff1a</p> <pre><code>from fastapi import FastAPI, Request, status\nfrom fastapi.responses import JSONResponse\n\napp = FastAPI()\n\n# \u57fa\u790e\u7570\u5e38\u985e\nclass AppException(Exception):\n    \"\"\"\u57fa\u790e\u61c9\u7528\u7570\u5e38\u985e\"\"\"\n    def __init__(self, message: str = \"An application error occurred\"):\n        self.message = message\n        super().__init__(self.message)\n\n# \u8cc7\u6e90\u7570\u5e38\nclass ResourceException(AppException):\n    \"\"\"\u8cc7\u6e90\u76f8\u95dc\u7684\u7570\u5e38\u57fa\u985e\"\"\"\n    pass\n\nclass ResourceNotFoundError(ResourceException):\n    \"\"\"\u8cc7\u6e90\u672a\u627e\u5230\u7570\u5e38\"\"\"\n    def __init__(self, resource_type: str, resource_id: str):\n        self.resource_type = resource_type\n        self.resource_id = resource_id\n        self.message = f\"{resource_type} with ID {resource_id} not found\"\n        super().__init__(self.message)\n\n# \u57fa\u790e\u7570\u5e38\u8655\u7406\u5668\n@app.exception_handler(AppException)\nasync def app_exception_handler(request: Request, exc: AppException):\n    return JSONResponse(\n        status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n        content={\n            \"status\": \"error\",\n            \"message\": exc.message\n        }\n    )\n\n# \u8cc7\u6e90\u7570\u5e38\u8655\u7406\u5668\n@app.exception_handler(ResourceException)\nasync def resource_exception_handler(request: Request, exc: ResourceException):\n    return JSONResponse(\n        status_code=status.HTTP_400_BAD_REQUEST,\n        content={\n            \"status\": \"error\",\n            \"message\": exc.message\n        }\n    )\n\n# \u8cc7\u6e90\u672a\u627e\u5230\u7570\u5e38\u8655\u7406\u5668\n@app.exception_handler(ResourceNotFoundError)\nasync def resource_not_found_exception_handler(request: Request, exc: ResourceNotFoundError):\n    return JSONResponse(\n        status_code=status.HTTP_404_NOT_FOUND,\n        content={\n            \"status\": \"error\",\n            \"message\": exc.message,\n            \"resource_type\": exc.resource_type,\n            \"resource_id\": exc.resource_id\n        }\n    )\n\n@app.get(\"/users/{user_id}\")\nasync def read_user(user_id: str):\n    if user_id == \"0\":\n        raise ResourceNotFoundError(resource_type=\"User\", resource_id=user_id)\n    return {\"user_id\": user_id, \"name\": f\"User {user_id}\"}\n</code></pre> <p>\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d</p> <ul> <li>\u5982\u679c\u62cb\u51fa <code>ResourceNotFoundError</code>\uff0c\u5c07\u7531 <code>resource_not_found_exception_handler</code> \u8655\u7406\uff1b</li> <li>\u5982\u679c\u62cb\u51fa\u5176\u4ed6 <code>ResourceException</code> \u5b50\u985e\uff0c\u5c07\u7531 <code>resource_exception_handler</code> \u8655\u7406\uff1b</li> <li>\u5982\u679c\u62cb\u51fa\u5176\u4ed6 <code>AppException</code> \u5b50\u985e\uff0c\u5c07\u7531 <code>app_exception_handler</code> \u8655\u7406\u3002</li> </ul>"},{"location":"error-handling/03-custom-exceptions/#_8","title":"\u7d50\u69cb\u5316\u932f\u8aa4\u97ff\u61c9","text":"<p>\u70ba\u4e86\u63d0\u4f9b\u4e00\u81f4\u7684 API \u932f\u8aa4\u97ff\u61c9\uff0c\u53ef\u4ee5\u5b9a\u7fa9\u4e00\u500b\u6a19\u6e96\u7684\u932f\u8aa4\u97ff\u61c9\u6a21\u578b\uff1a</p> <pre><code>from fastapi import FastAPI, Request, status\nfrom fastapi.responses import JSONResponse\nfrom pydantic import BaseModel\nfrom typing import Any, Dict, Optional, List\n\napp = FastAPI()\n\n# \u932f\u8aa4\u97ff\u61c9\u6a21\u578b\nclass ErrorDetail(BaseModel):\n    loc: Optional[List[str]] = None\n    msg: str\n    type: str\n\nclass ErrorResponse(BaseModel):\n    status: str = \"error\"\n    code: int\n    message: str\n    details: Optional[List[ErrorDetail]] = None\n    path: Optional[str] = None\n\n# \u81ea\u5b9a\u7fa9\u7570\u5e38\nclass ValidationError(Exception):\n    def __init__(self, field: str, message: str):\n        self.field = field\n        self.message = message\n        super().__init__(self.message)\n\n# \u7570\u5e38\u8655\u7406\u5668\n@app.exception_handler(ValidationError)\nasync def validation_error_handler(request: Request, exc: ValidationError):\n    error_detail = ErrorDetail(\n        loc=[exc.field],\n        msg=exc.message,\n        type=\"validation_error\"\n    )\n\n    error_response = ErrorResponse(\n        code=status.HTTP_422_UNPROCESSABLE_ENTITY,\n        message=\"Validation error\",\n        details=[error_detail],\n        path=request.url.path\n    )\n\n    return JSONResponse(\n        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,\n        content=error_response.dict()\n    )\n\n@app.post(\"/users/\")\nasync def create_user(name: str, age: int):\n    if len(name) &lt; 3:\n        raise ValidationError(field=\"name\", message=\"Name must be at least 3 characters long\")\n    if age &lt; 18:\n        raise ValidationError(field=\"age\", message=\"Age must be at least 18\")\n    return {\"name\": name, \"age\": age}\n</code></pre> <p>\u9019\u5c07\u7522\u751f\u5982\u4e0b\u683c\u5f0f\u7684\u932f\u8aa4\u97ff\u61c9\uff1a</p> <pre><code>{\n  \"status\": \"error\",\n  \"code\": 422,\n  \"message\": \"Validation error\",\n  \"details\": [\n    {\n      \"loc\": [\"name\"],\n      \"msg\": \"Name must be at least 3 characters long\",\n      \"type\": \"validation_error\"\n    }\n  ],\n  \"path\": \"/users/\"\n}\n</code></pre>"},{"location":"error-handling/03-custom-exceptions/#_9","title":"\u81ea\u5b9a\u7fa9\u7570\u5e38\u8207\u696d\u52d9\u908f\u8f2f","text":"<p>\u81ea\u5b9a\u7fa9\u7570\u5e38\u7279\u5225\u9069\u5408\u8655\u7406\u696d\u52d9\u908f\u8f2f\u932f\u8aa4\uff0c\u9019\u4e9b\u932f\u8aa4\u901a\u5e38\u8207\u61c9\u7528\u7684\u7279\u5b9a\u9818\u57df\u76f8\u95dc\u3002</p>"},{"location":"error-handling/03-custom-exceptions/#_10","title":"\u696d\u52d9\u908f\u8f2f\u7570\u5e38\u793a\u4f8b","text":"<pre><code>from fastapi import FastAPI, Request, status\nfrom fastapi.responses import JSONResponse\nfrom datetime import datetime\nfrom enum import Enum\n\napp = FastAPI()\n\n# \u8a02\u55ae\u72c0\u614b\u679a\u8209\nclass OrderStatus(str, Enum):\n    PENDING = \"pending\"\n    PAID = \"paid\"\n    SHIPPED = \"shipped\"\n    DELIVERED = \"delivered\"\n    CANCELLED = \"cancelled\"\n\n# \u696d\u52d9\u908f\u8f2f\u7570\u5e38\nclass OrderError(Exception):\n    \"\"\"\u8a02\u55ae\u76f8\u95dc\u7570\u5e38\u57fa\u985e\"\"\"\n    def __init__(self, order_id: str, message: str):\n        self.order_id = order_id\n        self.message = message\n        super().__init__(self.message)\n\nclass OrderNotFoundError(OrderError):\n    \"\"\"\u8a02\u55ae\u672a\u627e\u5230\u7570\u5e38\"\"\"\n    def __init__(self, order_id: str):\n        super().__init__(order_id, f\"Order with ID {order_id} not found\")\n\nclass InvalidOrderStatusTransitionError(OrderError):\n    \"\"\"\u8a02\u55ae\u72c0\u614b\u8f49\u63db\u7121\u6548\u7570\u5e38\"\"\"\n    def __init__(self, order_id: str, current_status: OrderStatus, target_status: OrderStatus):\n        self.current_status = current_status\n        self.target_status = target_status\n        message = f\"Cannot transition order {order_id} from {current_status} to {target_status}\"\n        super().__init__(order_id, message)\n\nclass OrderAlreadyCancelledError(OrderError):\n    \"\"\"\u8a02\u55ae\u5df2\u53d6\u6d88\u7570\u5e38\"\"\"\n    def __init__(self, order_id: str, cancelled_at: datetime):\n        self.cancelled_at = cancelled_at\n        message = f\"Order {order_id} was already cancelled at {cancelled_at}\"\n        super().__init__(order_id, message)\n\n# \u7570\u5e38\u8655\u7406\u5668\n@app.exception_handler(OrderError)\nasync def order_exception_handler(request: Request, exc: OrderError):\n    status_code = status.HTTP_400_BAD_REQUEST\n\n    # \u6839\u64da\u7570\u5e38\u985e\u578b\u8a2d\u7f6e\u4e0d\u540c\u7684\u72c0\u614b\u78bc\n    if isinstance(exc, OrderNotFoundError):\n        status_code = status.HTTP_404_NOT_FOUND\n\n    return JSONResponse(\n        status_code=status_code,\n        content={\n            \"status\": \"error\",\n            \"message\": exc.message,\n            \"order_id\": exc.order_id,\n            \"error_type\": exc.__class__.__name__\n        }\n    )\n\n# API \u7aef\u9ede\n@app.put(\"/orders/{order_id}/status\")\nasync def update_order_status(order_id: str, new_status: OrderStatus):\n    # \u6a21\u64ec\u6578\u64da\u5eab\u67e5\u8a62\n    if order_id == \"not-found\":\n        raise OrderNotFoundError(order_id)\n\n    # \u6a21\u64ec\u8a02\u55ae\u72c0\u614b\n    current_status = OrderStatus.PAID\n\n    # \u696d\u52d9\u908f\u8f2f\u6aa2\u67e5\n    if current_status == OrderStatus.CANCELLED:\n        raise OrderAlreadyCancelledError(\n            order_id=order_id,\n            cancelled_at=datetime.now()\n        )\n\n    # \u6aa2\u67e5\u72c0\u614b\u8f49\u63db\u662f\u5426\u6709\u6548\n    valid_transitions = {\n        OrderStatus.PENDING: [OrderStatus.PAID, OrderStatus.CANCELLED],\n        OrderStatus.PAID: [OrderStatus.SHIPPED, OrderStatus.CANCELLED],\n        OrderStatus.SHIPPED: [OrderStatus.DELIVERED, OrderStatus.CANCELLED],\n        OrderStatus.DELIVERED: [],\n        OrderStatus.CANCELLED: []\n    }\n\n    if new_status not in valid_transitions[current_status]:\n        raise InvalidOrderStatusTransitionError(\n            order_id=order_id,\n            current_status=current_status,\n            target_status=new_status\n        )\n\n    # \u66f4\u65b0\u8a02\u55ae\u72c0\u614b\n    return {\n        \"order_id\": order_id,\n        \"previous_status\": current_status,\n        \"current_status\": new_status,\n        \"updated_at\": datetime.now().isoformat()\n    }\n</code></pre>"},{"location":"error-handling/03-custom-exceptions/#_11","title":"\u7570\u5e38\u8655\u7406\u7684\u6700\u4f73\u5be6\u8e10","text":""},{"location":"error-handling/03-custom-exceptions/#_12","title":"\u7570\u5e38\u547d\u540d\u7d04\u5b9a","text":"\u7d04\u5b9a \u793a\u4f8b \u8aaa\u660e \u4f7f\u7528 <code>Error</code> \u5f8c\u7db4 <code>ResourceNotFoundError</code> \u6e05\u6670\u5730\u8868\u660e\u9019\u662f\u4e00\u500b\u932f\u8aa4\u985e\u578b \u4f7f\u7528\u63cf\u8ff0\u6027\u540d\u7a31 <code>InsufficientFundsError</code> \u540d\u7a31\u61c9\u8a72\u6e05\u6670\u63cf\u8ff0\u932f\u8aa4\u60c5\u6cc1 \u4f7f\u7528\u5c64\u6b21\u7d50\u69cb <code>PaymentError</code> \u2192 <code>PaymentProcessingError</code> \u4f7f\u7528\u7e7c\u627f\u5275\u5efa\u6709\u610f\u7fa9\u7684\u5c64\u6b21\u7d50\u69cb"},{"location":"error-handling/03-custom-exceptions/#_13","title":"\u7570\u5e38\u8655\u7406\u7684\u6700\u4f73\u5be6\u8e10","text":"\u6700\u4f73\u5be6\u8e10 \u8aaa\u660e \u63d0\u4f9b\u6709\u7528\u7684\u932f\u8aa4\u4fe1\u606f \u932f\u8aa4\u4fe1\u606f\u61c9\u8a72\u6e05\u6670\u3001\u5177\u9ad4\uff0c\u4e26\u5e6b\u52a9\u7528\u6236\u7406\u89e3\u548c\u89e3\u6c7a\u554f\u984c \u5305\u542b\u76f8\u95dc\u4e0a\u4e0b\u6587 \u5728\u7570\u5e38\u4e2d\u5305\u542b\u76f8\u95dc\u7684\u4e0a\u4e0b\u6587\u4fe1\u606f\uff0c\u5982\u8cc7\u6e90 ID\u3001\u7528\u6236 ID \u7b49 \u4f7f\u7528\u9069\u7576\u7684 HTTP \u72c0\u614b\u78bc \u78ba\u4fdd\u6bcf\u7a2e\u7570\u5e38\u985e\u578b\u6620\u5c04\u5230\u9069\u7576\u7684 HTTP \u72c0\u614b\u78bc \u4fdd\u6301\u4e00\u81f4\u7684\u97ff\u61c9\u683c\u5f0f \u6240\u6709\u932f\u8aa4\u97ff\u61c9\u61c9\u9075\u5faa\u4e00\u81f4\u7684\u683c\u5f0f\uff0c\u4fbf\u65bc\u5ba2\u6236\u7aef\u8655\u7406 \u907f\u514d\u6d29\u9732\u654f\u611f\u4fe1\u606f \u78ba\u4fdd\u932f\u8aa4\u4fe1\u606f\u4e0d\u5305\u542b\u654f\u611f\u6578\u64da\uff0c\u5982\u5bc6\u78bc\u3001\u5167\u90e8\u8def\u5f91\u7b49 \u8a18\u9304\u7570\u5e38 \u5728\u8fd4\u56de\u932f\u8aa4\u97ff\u61c9\u524d\u8a18\u9304\u7570\u5e38\uff0c\u4fbf\u65bc\u8abf\u8a66\u548c\u76e3\u63a7 \u5340\u5206\u5ba2\u6236\u7aef\u548c\u670d\u52d9\u5668\u932f\u8aa4 \u4f7f\u7528 4xx \u72c0\u614b\u78bc\u8868\u793a\u5ba2\u6236\u7aef\u932f\u8aa4\uff0c5xx \u8868\u793a\u670d\u52d9\u5668\u932f\u8aa4"},{"location":"error-handling/03-custom-exceptions/#_14","title":"\u5b8c\u6574\u793a\u4f8b\uff1a\u7d9c\u5408\u81ea\u5b9a\u7fa9\u7570\u5e38\u8655\u7406","text":"<pre><code>from fastapi import FastAPI, Request, status, Depends\nfrom fastapi.responses import JSONResponse\nfrom typing import Dict, List, Optional\nimport logging\nfrom datetime import datetime\n\n# \u914d\u7f6e\u65e5\u8a8c\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\napp = FastAPI()\n\n# \u57fa\u790e\u7570\u5e38\u985e\nclass AppException(Exception):\n    \"\"\"\u57fa\u790e\u61c9\u7528\u7570\u5e38\u985e\"\"\"\n    def __init__(\n        self, \n        message: str = \"An application error occurred\",\n        status_code: int = status.HTTP_500_INTERNAL_SERVER_ERROR,\n        error_code: str = \"internal_error\",\n        details: Optional[Dict] = None\n    ):\n        self.message = message\n        self.status_code = status_code\n        self.error_code = error_code\n        self.details = details or {}\n        super().__init__(self.message)\n\n# \u8cc7\u6e90\u7570\u5e38\nclass ResourceException(AppException):\n    \"\"\"\u8cc7\u6e90\u76f8\u95dc\u7684\u7570\u5e38\u57fa\u985e\"\"\"\n    def __init__(\n        self, \n        message: str, \n        status_code: int = status.HTTP_400_BAD_REQUEST,\n        error_code: str = \"resource_error\",\n        details: Optional[Dict] = None\n    ):\n        super().__init__(message, status_code, error_code, details)\n\nclass ResourceNotFoundError(ResourceException):\n    \"\"\"\u8cc7\u6e90\u672a\u627e\u5230\u7570\u5e38\"\"\"\n    def __init__(self, resource_type: str, resource_id: str):\n        self.resource_type = resource_type\n        self.resource_id = resource_id\n        message = f\"{resource_type} with ID {resource_id} not found\"\n        details = {\"resource_type\": resource_type, \"resource_id\": resource_id}\n        super().__init__(\n            message=message,\n            status_code=status.HTTP_404_NOT_FOUND,\n            error_code=\"resource_not_found\",\n            details=details\n        )\n\n# \u6b0a\u9650\u7570\u5e38\nclass PermissionException(AppException):\n    \"\"\"\u6b0a\u9650\u76f8\u95dc\u7684\u7570\u5e38\u57fa\u985e\"\"\"\n    def __init__(\n        self, \n        message: str, \n        status_code: int = status.HTTP_403_FORBIDDEN,\n        error_code: str = \"permission_error\",\n        details: Optional[Dict] = None\n    ):\n        super().__init__(message, status_code, error_code, details)\n\nclass InsufficientPermissionsError(PermissionException):\n    \"\"\"\u6b0a\u9650\u4e0d\u8db3\u7570\u5e38\"\"\"\n    def __init__(self, user_id: str, required_permission: str):\n        self.user_id = user_id\n        self.required_permission = required_permission\n        message = f\"User {user_id} does not have the required permission: {required_permission}\"\n        details = {\"user_id\": user_id, \"required_permission\": required_permission}\n        super().__init__(\n            message=message,\n            error_code=\"insufficient_permissions\",\n            details=details\n        )\n\n# \u9a57\u8b49\u7570\u5e38\nclass ValidationException(AppException):\n    \"\"\"\u9a57\u8b49\u76f8\u95dc\u7684\u7570\u5e38\u57fa\u985e\"\"\"\n    def __init__(\n        self, \n        message: str, \n        status_code: int = status.HTTP_422_UNPROCESSABLE_ENTITY,\n        error_code: str = \"validation_error\",\n        details: Optional[Dict] = None\n    ):\n        super().__init__(message, status_code, error_code, details)\n\nclass InvalidInputError(ValidationException):\n    \"\"\"\u8f38\u5165\u7121\u6548\u7570\u5e38\"\"\"\n    def __init__(self, field: str, reason: str):\n        self.field = field\n        self.reason = reason\n        message = f\"Invalid input for field '{field}': {reason}\"\n        details = {\"field\": field, \"reason\": reason}\n        super().__init__(\n            message=message,\n            error_code=\"invalid_input\",\n            details=details\n        )\n\n# \u901a\u7528\u7570\u5e38\u8655\u7406\u5668\n@app.exception_handler(AppException)\nasync def app_exception_handler(request: Request, exc: AppException):\n    # \u8a18\u9304\u7570\u5e38\n    logger.error(\n        f\"Exception occurred: {exc.__class__.__name__}, \"\n        f\"Message: {exc.message}, \"\n        f\"Path: {request.url.path}\"\n    )\n\n    response_content = {\n        \"status\": \"error\",\n        \"error\": {\n            \"code\": exc.error_code,\n            \"message\": exc.message,\n            \"details\": exc.details,\n            \"timestamp\": datetime.now().isoformat()\n        },\n        \"path\": request.url.path\n    }\n\n    return JSONResponse(\n        status_code=exc.status_code,\n        content=response_content\n    )\n\n# \u6a21\u64ec\u8a8d\u8b49\u4f9d\u8cf4\ndef get_current_user(user_id: str = None):\n    if not user_id:\n        raise AppException(\n            message=\"Authentication required\",\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            error_code=\"authentication_required\"\n        )\n    return {\"user_id\": user_id, \"name\": f\"User {user_id}\"}\n\n# API \u7aef\u9ede\n@app.get(\"/users/{user_id}\")\nasync def read_user(user_id: str):\n    if user_id == \"0\":\n        raise ResourceNotFoundError(resource_type=\"User\", resource_id=user_id)\n    return {\"user_id\": user_id, \"name\": f\"User {user_id}\"}\n\n@app.post(\"/items/\")\nasync def create_item(name: str, price: float, current_user: Dict = Depends(get_current_user)):\n    if len(name) &lt; 3:\n        raise InvalidInputError(field=\"name\", reason=\"Must be at least 3 characters long\")\n    if price &lt;= 0:\n        raise InvalidInputError(field=\"price\", reason=\"Must be greater than 0\")\n    return {\n        \"id\": \"123\",\n        \"name\": name,\n        \"price\": price,\n        \"created_by\": current_user[\"user_id\"]\n    }\n\n@app.delete(\"/admin/users/{user_id}\")\nasync def delete_user(user_id: str, current_user: Dict = Depends(get_current_user)):\n    # \u6aa2\u67e5\u6b0a\u9650\n    if current_user[\"user_id\"] != \"admin\":\n        raise InsufficientPermissionsError(\n            user_id=current_user[\"user_id\"],\n            required_permission=\"admin\"\n        )\n\n    # \u6aa2\u67e5\u7528\u6236\u662f\u5426\u5b58\u5728\n    if user_id == \"0\":\n        raise ResourceNotFoundError(resource_type=\"User\", resource_id=user_id)\n\n    return {\"status\": \"success\", \"message\": f\"User {user_id} deleted\"}\n</code></pre>"},{"location":"error-handling/03-custom-exceptions/#_15","title":"\u81ea\u5b9a\u7fa9\u7570\u5e38\u8207\u4f9d\u8cf4\u9805","text":"<p>\u81ea\u5b9a\u7fa9\u7570\u5e38\u53ef\u4ee5\u8207 FastAPI \u7684\u4f9d\u8cf4\u9805\u7cfb\u7d71\u7d50\u5408\u4f7f\u7528\uff0c\u5be6\u73fe\u66f4\u8907\u96dc\u7684\u932f\u8aa4\u8655\u7406\u908f\u8f2f\uff1a</p> <pre><code>from fastapi import FastAPI, Depends, Header\nfrom typing import Optional\n\napp = FastAPI()\n\n# \u81ea\u5b9a\u7fa9\u7570\u5e38\nclass AuthenticationError(Exception):\n    def __init__(self, message: str = \"Authentication failed\"):\n        self.message = message\n        super().__init__(self.message)\n\nclass AuthorizationError(Exception):\n    def __init__(self, message: str = \"Authorization failed\"):\n        self.message = message\n        super().__init__(self.message)\n\n# \u4f9d\u8cf4\u9805\ndef verify_token(token: Optional[str] = Header(None)):\n    if not token:\n        raise AuthenticationError(\"Token is missing\")\n    if token != \"valid_token\":\n        raise AuthenticationError(\"Invalid token\")\n    return {\"user_id\": \"123\"}\n\ndef verify_admin(user = Depends(verify_token)):\n    if user[\"user_id\"] != \"admin\":\n        raise AuthorizationError(\"Admin privileges required\")\n    return user\n\n# \u7570\u5e38\u8655\u7406\u5668\n@app.exception_handler(AuthenticationError)\nasync def authentication_error_handler(request, exc):\n    return JSONResponse(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        content={\"status\": \"error\", \"message\": exc.message}\n    )\n\n@app.exception_handler(AuthorizationError)\nasync def authorization_error_handler(request, exc):\n    return JSONResponse(\n        status_code=status.HTTP_403_FORBIDDEN,\n        content={\"status\": \"error\", \"message\": exc.message}\n    )\n\n# API \u7aef\u9ede\n@app.get(\"/users/me\", dependencies=[Depends(verify_token)])\nasync def read_user_me():\n    return {\"user_id\": \"123\", \"name\": \"Current User\"}\n\n@app.get(\"/admin\", dependencies=[Depends(verify_admin)])\nasync def admin_panel():\n    return {\"status\": \"success\", \"message\": \"Welcome to admin panel\"}\n</code></pre>"},{"location":"error-handling/03-custom-exceptions/#_16","title":"\u81ea\u5b9a\u7fa9\u7570\u5e38\u8207\u8acb\u6c42\u9a57\u8b49","text":"<p>\u81ea\u5b9a\u7fa9\u7570\u5e38\u53ef\u4ee5\u8207 Pydantic \u6a21\u578b\u7d50\u5408\uff0c\u5be6\u73fe\u66f4\u5f37\u5927\u7684\u8acb\u6c42\u9a57\u8b49\uff1a</p> <pre><code>from fastapi import FastAPI, Request\nfrom fastapi.responses import JSONResponse\nfrom pydantic import BaseModel, validator\nfrom typing import List\n\napp = FastAPI()\n\n# \u81ea\u5b9a\u7fa9\u9a57\u8b49\u7570\u5e38\nclass ProductValidationError(Exception):\n    def __init__(self, field: str, message: str):\n        self.field = field\n        self.message = message\n        super().__init__(f\"{field}: {message}\")\n\n# Pydantic \u6a21\u578b\nclass Product(BaseModel):\n    name: str\n    price: float\n    categories: List[str]\n\n    @validator('name')\n    def name_must_be_valid(cls, v):\n        if len(v) &lt; 3:\n            raise ProductValidationError(\"name\", \"Product name must be at least 3 characters long\")\n        if len(v) &gt; 50:\n            raise ProductValidationError(\"name\", \"Product name must be at most 50 characters long\")\n        return v\n\n    @validator('price')\n    def price_must_be_positive(cls, v):\n        if v &lt;= 0:\n            raise ProductValidationError(\"price\", \"Product price must be positive\")\n        return v\n\n    @validator('categories')\n    def categories_must_not_be_empty(cls, v):\n        if not v:\n            raise ProductValidationError(\"categories\", \"Product must have at least one category\")\n        return v\n\n# \u7570\u5e38\u8655\u7406\u5668\n@app.exception_handler(ProductValidationError)\nasync def product_validation_error_handler(request: Request, exc: ProductValidationError):\n    return JSONResponse(\n        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,\n        content={\n            \"status\": \"error\",\n            \"message\": \"Product validation error\",\n            \"field\": exc.field,\n            \"detail\": exc.message\n        }\n    )\n\n# API \u7aef\u9ede\n@app.post(\"/products/\")\nasync def create_product(product: Product):\n    return {\"status\": \"success\", \"product\": product.dict()}\n</code></pre>"},{"location":"error-handling/03-custom-exceptions/#_17","title":"\u7e3d\u7d50","text":"<p>\u81ea\u5b9a\u7fa9\u7570\u5e38\u8655\u7406\u662f\u69cb\u5efa\u5065\u58ef\u3001\u6613\u65bc\u7dad\u8b77\u7684 FastAPI \u61c9\u7528\u7684\u95dc\u9375\u90e8\u5206\uff1a</p> <ul> <li>\u81ea\u5b9a\u7fa9\u7570\u5e38\u985e\uff1a\u5275\u5efa\u7279\u5b9a\u65bc\u696d\u52d9\u908f\u8f2f\u7684\u7570\u5e38\u985e\u578b\uff0c\u5305\u542b\u76f8\u95dc\u4e0a\u4e0b\u6587\u4fe1\u606f</li> <li>\u7570\u5e38\u5c64\u6b21\u7d50\u69cb\uff1a\u4f7f\u7528\u7e7c\u627f\u5275\u5efa\u6709\u610f\u7fa9\u7684\u7570\u5e38\u5c64\u6b21\u7d50\u69cb\uff0c\u4fbf\u65bc\u7d44\u7e54\u548c\u8655\u7406</li> <li>\u8a3b\u518a\u7570\u5e38\u8655\u7406\u5668\uff1a\u4f7f\u7528 <code>@app.exception_handler()</code> \u88dd\u98fe\u5668\u5c07\u81ea\u5b9a\u7fa9\u7570\u5e38\u6620\u5c04\u5230 HTTP \u97ff\u61c9</li> <li>\u7d50\u69cb\u5316\u932f\u8aa4\u97ff\u61c9\uff1a\u63d0\u4f9b\u4e00\u81f4\u3001\u4fe1\u606f\u8c50\u5bcc\u7684\u932f\u8aa4\u97ff\u61c9\u683c\u5f0f</li> <li>\u8207\u696d\u52d9\u908f\u8f2f\u7d50\u5408\uff1a\u4f7f\u7528\u81ea\u5b9a\u7fa9\u7570\u5e38\u8868\u9054\u696d\u52d9\u898f\u5247\u548c\u7d04\u675f</li> <li>\u8207\u4f9d\u8cf4\u9805\u7d50\u5408\uff1a\u5728\u4f9d\u8cf4\u9805\u4e2d\u4f7f\u7528\u81ea\u5b9a\u7fa9\u7570\u5e38\u9032\u884c\u8eab\u4efd\u9a57\u8b49\u548c\u6388\u6b0a</li> <li>\u8207\u8acb\u6c42\u9a57\u8b49\u7d50\u5408\uff1a\u5728 Pydantic \u6a21\u578b\u4e2d\u4f7f\u7528\u81ea\u5b9a\u7fa9\u7570\u5e38\u9032\u884c\u9ad8\u7d1a\u6578\u64da\u9a57\u8b49</li> </ul> <p>\u901a\u904e\u5be6\u65bd\u9019\u4e9b\u5be6\u8e10\uff0c\u60a8\u53ef\u4ee5\u5275\u5efa\u5177\u6709\u6e05\u6670\u3001\u4e00\u81f4\u7684\u932f\u8aa4\u8655\u7406\u6a5f\u5236\u7684 API\uff0c\u63d0\u4f9b\u826f\u597d\u7684\u958b\u767c\u8005\u9ad4\u9a57\uff0c\u4e26\u7c21\u5316\u8abf\u8a66\u548c\u7dad\u8b77\u3002</p>"},{"location":"error-handling/04-global-error-handling/","title":"\u5168\u5c40\u7570\u5e38\u8655\u7406\u5668","text":"<p>\u5728 FastAPI \u61c9\u7528\u4e2d\uff0c\u5168\u5c40\u7570\u5e38\u8655\u7406\u5668\u662f\u78ba\u4fdd\u6240\u6709\u7570\u5e38\u90fd\u5f97\u5230\u9069\u7576\u8655\u7406\u7684\u6700\u5f8c\u4e00\u9053\u9632\u7dda\u3002\u7121\u8ad6\u662f\u9810\u671f\u7684\u7570\u5e38\u9084\u662f\u672a\u9810\u671f\u7684\u7570\u5e38\uff0c\u5168\u5c40\u8655\u7406\u5668\u90fd\u80fd\u6355\u7372\u5b83\u5011\uff0c\u4e26\u5c07\u5176\u8f49\u63db\u70ba\u4e00\u81f4\u7684 HTTP \u97ff\u61c9\u3002</p>"},{"location":"error-handling/04-global-error-handling/#_2","title":"\u5168\u5c40\u7570\u5e38\u8655\u7406\u7684\u91cd\u8981\u6027","text":"<p>\u5168\u5c40\u7570\u5e38\u8655\u7406\u5728 API \u958b\u767c\u4e2d\u626e\u6f14\u8457\u95dc\u9375\u89d2\u8272\uff0c\u5177\u6709\u4ee5\u4e0b\u512a\u52e2\uff1a</p> \u512a\u52e2 \u8aaa\u660e \u9632\u6b62\u61c9\u7528\u5d29\u6f70 \u6355\u7372\u6240\u6709\u672a\u8655\u7406\u7684\u7570\u5e38\uff0c\u78ba\u4fdd\u61c9\u7528\u4e0d\u6703\u56e0\u70ba\u610f\u5916\u932f\u8aa4\u800c\u5d29\u6f70 \u63d0\u4f9b\u4e00\u81f4\u7684\u932f\u8aa4\u97ff\u61c9 \u78ba\u4fdd\u6240\u6709\u932f\u8aa4\u90fd\u4ee5\u4e00\u81f4\u7684\u683c\u5f0f\u8fd4\u56de\u7d66\u5ba2\u6236\u7aef \u7c21\u5316\u932f\u8aa4\u8655\u7406 \u96c6\u4e2d\u8655\u7406\u5e38\u898b\u932f\u8aa4\uff0c\u6e1b\u5c11\u5728\u6bcf\u500b\u7aef\u9ede\u4e2d\u91cd\u8907\u7de8\u5beb\u932f\u8aa4\u8655\u7406\u4ee3\u78bc \u6539\u5584\u8abf\u8a66\u9ad4\u9a57 \u63d0\u4f9b\u8a73\u7d30\u7684\u932f\u8aa4\u4fe1\u606f\uff0c\u4fbf\u65bc\u958b\u767c\u548c\u8abf\u8a66 \u589e\u5f37\u5b89\u5168\u6027 \u5728\u751f\u7522\u74b0\u5883\u4e2d\u96b1\u85cf\u654f\u611f\u7684\u932f\u8aa4\u8a73\u60c5\uff0c\u9632\u6b62\u4fe1\u606f\u6d29\u9732 \u652f\u6301\u65e5\u8a8c\u8a18\u9304\u548c\u76e3\u63a7 \u96c6\u4e2d\u8a18\u9304\u6240\u6709\u932f\u8aa4\uff0c\u4fbf\u65bc\u76e3\u63a7\u548c\u5206\u6790"},{"location":"error-handling/04-global-error-handling/#_3","title":"\u8655\u7406\u5167\u5efa\u7570\u5e38","text":"<p>FastAPI \u63d0\u4f9b\u4e86\u591a\u7a2e\u65b9\u6cd5\u4f86\u8655\u7406\u5167\u5efa\u7570\u5e38\uff0c\u5982 <code>RequestValidationError</code>\u3001<code>HTTPException</code> \u7b49\u3002</p>"},{"location":"error-handling/04-global-error-handling/#requestvalidationerror","title":"\u8655\u7406 RequestValidationError","text":"<p><code>RequestValidationError</code> \u662f\u7576\u8acb\u6c42\u6578\u64da\u4e0d\u7b26\u5408 Pydantic \u6a21\u578b\u5b9a\u7fa9\u6642\u62cb\u51fa\u7684\u7570\u5e38\uff1a</p> <pre><code>from fastapi import FastAPI, Request, status\nfrom fastapi.exceptions import RequestValidationError\nfrom fastapi.responses import JSONResponse\nimport logging\n\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\napp = FastAPI()\n\n@app.exception_handler(RequestValidationError)\nasync def validation_exception_handler(request: Request, exc: RequestValidationError):\n    logger.error(f\"Validation error: {exc.errors()}\")\n\n    error_messages = []\n    for error in exc.errors():\n        error_messages.append({\n            \"field\": \".\".join(str(loc) for loc in error[\"loc\"]),\n            \"message\": error[\"msg\"],\n            \"type\": error[\"type\"]\n        })\n\n    return JSONResponse(\n        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,\n        content={\n            \"status\": \"error\",\n            \"message\": \"Validation error\",\n            \"errors\": error_messages,\n            \"path\": request.url.path\n        }\n    )\n</code></pre>"},{"location":"error-handling/04-global-error-handling/#httpexception","title":"\u8655\u7406 HTTPException","text":"<p><code>HTTPException</code> \u662f FastAPI \u4e2d\u6700\u5e38\u7528\u7684\u7570\u5e38\u985e\u578b\uff1a</p> <pre><code>from fastapi import FastAPI, Request, HTTPException\nfrom fastapi.responses import JSONResponse\nimport logging\n\napp = FastAPI()\n\n@app.exception_handler(HTTPException)\nasync def http_exception_handler(request: Request, exc: HTTPException):\n    logger.error(f\"HTTP error {exc.status_code}: {exc.detail}\")\n\n    content = {\n        \"status\": \"error\",\n        \"message\": exc.detail,\n        \"path\": request.url.path\n    }\n\n    headers = getattr(exc, \"headers\", None)\n\n    return JSONResponse(\n        status_code=exc.status_code,\n        content=content,\n        headers=headers\n    )\n</code></pre>"},{"location":"error-handling/04-global-error-handling/#_4","title":"\u8655\u7406\u672a\u6355\u7372\u7684\u7570\u5e38","text":"<p>\u6355\u7372\u6240\u6709\u672a\u8655\u7406\u7684\u7570\u5e38\u662f\u5168\u5c40\u7570\u5e38\u8655\u7406\u7684\u95dc\u9375\u90e8\u5206\uff1a</p> <pre><code>from fastapi import FastAPI, Request\nfrom fastapi.responses import JSONResponse\nimport logging\nimport traceback\nimport os\n\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\nDEBUG = os.getenv(\"DEBUG\", \"false\").lower() == \"true\"\n\napp = FastAPI()\n\n@app.exception_handler(Exception)\nasync def unhandled_exception_handler(request: Request, exc: Exception):\n    error_msg = f\"Unhandled error occurred: {str(exc)}\"\n    logger.error(error_msg)\n    logger.error(traceback.format_exc())\n\n    if DEBUG:\n        # \u958b\u767c\u74b0\u5883\uff1a\u8fd4\u56de\u8a73\u7d30\u932f\u8aa4\u4fe1\u606f\n        return JSONResponse(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            content={\n                \"status\": \"error\",\n                \"message\": str(exc),\n                \"traceback\": traceback.format_exc().split(\"\\n\"),\n                \"path\": request.url.path\n            }\n        )\n    else:\n        # \u751f\u7522\u74b0\u5883\uff1a\u8fd4\u56de\u901a\u7528\u932f\u8aa4\u4fe1\u606f\n        return JSONResponse(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            content={\n                \"status\": \"error\",\n                \"message\": \"An unexpected error occurred. Please try again later.\",\n                \"path\": request.url.path\n            }\n        )\n</code></pre>"},{"location":"error-handling/04-global-error-handling/#_5","title":"\u81ea\u5b9a\u7fa9\u5168\u5c40\u7570\u5e38\u8655\u7406\u4e2d\u9593\u4ef6","text":"<p>\u9664\u4e86\u4f7f\u7528 <code>@app.exception_handler()</code> \u88dd\u98fe\u5668\u5916\uff0c\u60a8\u9084\u53ef\u4ee5\u4f7f\u7528\u4e2d\u9593\u4ef6\u4f86\u5be6\u73fe\u5168\u5c40\u7570\u5e38\u8655\u7406\uff1a</p> <pre><code>from fastapi import FastAPI, Request\nfrom fastapi.responses import JSONResponse\nfrom starlette.middleware.base import BaseHTTPMiddleware\nimport logging\nimport traceback\nimport time\n\napp = FastAPI()\n\nclass ExceptionMiddleware(BaseHTTPMiddleware):\n    async def dispatch(self, request: Request, call_next):\n        start_time = time.time()\n        try:\n            response = await call_next(request)\n            return response\n        except Exception as exc:\n            error_msg = f\"Unhandled error occurred: {str(exc)}\"\n            logger.error(error_msg)\n            logger.error(traceback.format_exc())\n\n            return JSONResponse(\n                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n                content={\n                    \"status\": \"error\",\n                    \"message\": \"An unexpected error occurred.\",\n                    \"path\": request.url.path,\n                    \"request_id\": request.headers.get(\"X-Request-ID\", \"unknown\"),\n                    \"timestamp\": time.time(),\n                    \"processing_time\": time.time() - start_time\n                }\n            )\n\napp.add_middleware(ExceptionMiddleware)\n</code></pre>"},{"location":"error-handling/04-global-error-handling/#_6","title":"\u5168\u5c40\u7570\u5e38\u8655\u7406\u7684\u6700\u4f73\u5be6\u8e10","text":""},{"location":"error-handling/04-global-error-handling/#_7","title":"\u6a19\u6e96\u5316\u932f\u8aa4\u97ff\u61c9\u683c\u5f0f","text":"<p>\u5b9a\u7fa9\u4e00\u500b\u6a19\u6e96\u7684\u932f\u8aa4\u97ff\u61c9\u683c\u5f0f\uff0c\u78ba\u4fdd\u6240\u6709\u932f\u8aa4\u97ff\u61c9\u90fd\u9075\u5faa\u76f8\u540c\u7684\u7d50\u69cb\uff1a</p> <pre><code>from fastapi import FastAPI, Request\nfrom fastapi.responses import JSONResponse\nfrom pydantic import BaseModel\nfrom typing import Optional, List\nfrom datetime import datetime\n\napp = FastAPI()\n\n# \u6a19\u6e96\u932f\u8aa4\u97ff\u61c9\u6a21\u578b\nclass ErrorDetail(BaseModel):\n    field: Optional[str] = None\n    message: str\n    type: str\n\nclass ErrorResponse(BaseModel):\n    status: str = \"error\"\n    code: int\n    message: str\n    details: Optional[List[ErrorDetail]] = None\n    path: str\n    timestamp: str\n    request_id: Optional[str] = None\n\n# \u5275\u5efa\u6a19\u6e96\u932f\u8aa4\u97ff\u61c9\ndef create_error_response(\n    status_code: int,\n    message: str,\n    request: Request,\n    details: Optional[List[ErrorDetail]] = None\n) -&gt; JSONResponse:\n    response = ErrorResponse(\n        code=status_code,\n        message=message,\n        details=details,\n        path=request.url.path,\n        timestamp=datetime.now().isoformat(),\n        request_id=request.headers.get(\"X-Request-ID\")\n    )\n\n    return JSONResponse(\n        status_code=status_code,\n        content=response.dict()\n    )\n\n# \u4f7f\u7528\u6a19\u6e96\u932f\u8aa4\u97ff\u61c9\n@app.exception_handler(Exception)\nasync def global_exception_handler(request: Request, exc: Exception):\n    logger.error(f\"Unhandled exception: {str(exc)}\")\n    logger.error(traceback.format_exc())\n\n    return create_error_response(\n        status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n        message=\"An unexpected error occurred\",\n        request=request\n    )\n</code></pre>"},{"location":"error-handling/04-global-error-handling/#_8","title":"\u5168\u9762\u7684\u7570\u5e38\u8655\u7406\u7b56\u7565","text":"<p>\u5be6\u73fe\u4e00\u500b\u5168\u9762\u7684\u7570\u5e38\u8655\u7406\u7b56\u7565\uff0c\u8655\u7406\u5404\u7a2e\u53ef\u80fd\u7684\u7570\u5e38\u60c5\u6cc1\uff1a</p> <pre><code>from fastapi import FastAPI, Request, status, HTTPException\nfrom fastapi.exceptions import RequestValidationError\nfrom fastapi.responses import JSONResponse\nfrom starlette.exceptions import HTTPException as StarletteHTTPException\nfrom pydantic import ValidationError\nimport logging\nimport traceback\nimport os\nfrom datetime import datetime\n\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\nDEBUG = os.getenv(\"DEBUG\", \"false\").lower() == \"true\"\n\napp = FastAPI()\n\n# \u6a19\u6e96\u932f\u8aa4\u97ff\u61c9\u51fd\u6578\ndef create_error_response(\n    status_code: int,\n    message: str,\n    request: Request,\n    details=None,\n    exception_type=None,\n    traceback_info=None\n) -&gt; JSONResponse:\n    content = {\n        \"status\": \"error\",\n        \"code\": status_code,\n        \"message\": message,\n        \"path\": request.url.path,\n        \"timestamp\": datetime.now().isoformat(),\n        \"request_id\": request.headers.get(\"X-Request-ID\")\n    }\n\n    if details:\n        content[\"details\"] = details\n\n    if DEBUG and exception_type:\n        content[\"exception_type\"] = exception_type\n\n    if DEBUG and traceback_info:\n        content[\"traceback\"] = traceback_info\n\n    return JSONResponse(\n        status_code=status_code,\n        content=content\n    )\n\n# \u8655\u7406 RequestValidationError\n@app.exception_handler(RequestValidationError)\nasync def validation_exception_handler(request: Request, exc: RequestValidationError):\n    logger.error(f\"Validation error: {exc.errors()}\")\n\n    details = []\n    for error in exc.errors():\n        details.append({\n            \"field\": \".\".join(str(loc) for loc in error[\"loc\"]),\n            \"message\": error[\"msg\"],\n            \"type\": error[\"type\"]\n        })\n\n    return create_error_response(\n        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,\n        message=\"Validation error\",\n        request=request,\n        details=details,\n        exception_type=\"RequestValidationError\"\n    )\n\n# \u8655\u7406 HTTPException\n@app.exception_handler(HTTPException)\nasync def http_exception_handler(request: Request, exc: HTTPException):\n    logger.error(f\"HTTP error {exc.status_code}: {exc.detail}\")\n\n    response = create_error_response(\n        status_code=exc.status_code,\n        message=exc.detail,\n        request=request,\n        exception_type=\"HTTPException\"\n    )\n\n    if hasattr(exc, \"headers\") and exc.headers:\n        for key, value in exc.headers.items():\n            response.headers[key] = value\n\n    return response\n\n# \u8655\u7406\u6240\u6709\u672a\u6355\u7372\u7684\u7570\u5e38\n@app.exception_handler(Exception)\nasync def global_exception_handler(request: Request, exc: Exception):\n    logger.error(f\"Unhandled exception: {str(exc)}\")\n    logger.error(traceback.format_exc())\n\n    return create_error_response(\n        status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n        message=\"An unexpected error occurred\" if not DEBUG else str(exc),\n        request=request,\n        exception_type=exc.__class__.__name__ if DEBUG else None,\n        traceback_info=traceback.format_exc().split(\"\\n\") if DEBUG else None\n    )\n</code></pre>"},{"location":"error-handling/04-global-error-handling/#_9","title":"\u6574\u5408\u65e5\u8a8c\u8a18\u9304\u8207\u76e3\u63a7","text":"<p>\u5168\u5c40\u7570\u5e38\u8655\u7406\u5668\u662f\u96c6\u4e2d\u8a18\u9304\u548c\u76e3\u63a7\u932f\u8aa4\u7684\u7406\u60f3\u5834\u6240\uff1a</p> <pre><code>from fastapi import FastAPI, Request\nfrom fastapi.responses import JSONResponse\nimport logging\nimport traceback\nimport json\nimport time\nfrom datetime import datetime\nimport uuid\n\n# \u914d\u7f6e\u65e5\u8a8c\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n)\nlogger = logging.getLogger(__name__)\n\n# \u6dfb\u52a0\u6587\u4ef6\u8655\u7406\u5668\nfile_handler = logging.FileHandler(\"errors.log\")\nfile_handler.setLevel(logging.ERROR)\nlogger.addHandler(file_handler)\n\napp = FastAPI()\n\n# \u751f\u6210\u8acb\u6c42 ID\n@app.middleware(\"http\")\nasync def add_request_id(request: Request, call_next):\n    request_id = request.headers.get(\"X-Request-ID\", str(uuid.uuid4()))\n    request.state.request_id = request_id\n\n    start_time = time.time()\n    try:\n        response = await call_next(request)\n        response.headers[\"X-Request-ID\"] = request_id\n        return response\n    except Exception as exc:\n        # \u8a18\u9304\u8a73\u7d30\u7684\u932f\u8aa4\u4fe1\u606f\n        error_data = {\n            \"timestamp\": datetime.now().isoformat(),\n            \"request_id\": request_id,\n            \"path\": request.url.path,\n            \"method\": request.method,\n            \"client_host\": request.client.host if request.client else \"unknown\",\n            \"exception_type\": exc.__class__.__name__,\n            \"exception_message\": str(exc),\n            \"traceback\": traceback.format_exc()\n        }\n\n        # \u8a18\u9304\u7d50\u69cb\u5316\u932f\u8aa4\u4fe1\u606f\n        logger.error(f\"Request error: {json.dumps(error_data)}\")\n\n        # \u8fd4\u56de\u932f\u8aa4\u97ff\u61c9\n        return JSONResponse(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            content={\n                \"status\": \"error\",\n                \"message\": \"An unexpected error occurred\",\n                \"request_id\": request_id\n            }\n        )\n</code></pre>"},{"location":"error-handling/04-global-error-handling/#_10","title":"\u9ad8\u7d1a\u5168\u5c40\u7570\u5e38\u8655\u7406\u6280\u8853","text":""},{"location":"error-handling/04-global-error-handling/#_11","title":"\u6309\u74b0\u5883\u5b9a\u5236\u932f\u8aa4\u97ff\u61c9","text":"<pre><code>from fastapi import FastAPI, Request\nfrom fastapi.responses import JSONResponse\nimport logging\nimport os\nimport traceback\n\n# \u74b0\u5883\u914d\u7f6e\nENV = os.getenv(\"ENVIRONMENT\", \"development\")\n\napp = FastAPI()\n\n@app.exception_handler(Exception)\nasync def environment_aware_exception_handler(request: Request, exc: Exception):\n    # \u8a18\u9304\u932f\u8aa4\n    logger.error(f\"Unhandled exception: {str(exc)}\")\n    logger.error(traceback.format_exc())\n\n    # \u6839\u64da\u74b0\u5883\u5b9a\u5236\u932f\u8aa4\u97ff\u61c9\n    if ENV == \"development\":\n        # \u958b\u767c\u74b0\u5883\uff1a\u8fd4\u56de\u8a73\u7d30\u4fe1\u606f\n        return JSONResponse(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            content={\n                \"status\": \"error\",\n                \"message\": str(exc),\n                \"exception_type\": exc.__class__.__name__,\n                \"traceback\": traceback.format_exc().split(\"\\n\"),\n                \"path\": request.url.path\n            }\n        )\n    elif ENV == \"testing\":\n        # \u6e2c\u8a66\u74b0\u5883\uff1a\u8fd4\u56de\u4e2d\u7b49\u8a73\u7d30\u7a0b\u5ea6\u7684\u4fe1\u606f\n        return JSONResponse(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            content={\n                \"status\": \"error\",\n                \"message\": str(exc),\n                \"exception_type\": exc.__class__.__name__,\n                \"path\": request.url.path\n            }\n        )\n    else:\n        # \u751f\u7522\u74b0\u5883\uff1a\u8fd4\u56de\u6700\u5c11\u4fe1\u606f\n        return JSONResponse(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            content={\n                \"status\": \"error\",\n                \"message\": \"An unexpected error occurred. Please try again later.\",\n                \"path\": request.url.path\n            }\n        )\n</code></pre>"},{"location":"error-handling/04-global-error-handling/#_12","title":"\u7570\u5e38\u5206\u985e\u8207\u8655\u7406","text":"<p>\u5c07\u7570\u5e38\u5206\u985e\u4e26\u6839\u64da\u985e\u5225\u9032\u884c\u4e0d\u540c\u7684\u8655\u7406\uff1a</p> <pre><code>from fastapi import FastAPI, Request, status\nfrom fastapi.responses import JSONResponse\nimport logging\nimport traceback\n\napp = FastAPI()\n\n# \u7570\u5e38\u5206\u985e\ndef classify_exception(exc: Exception) -&gt; tuple:\n    \"\"\"\u5c07\u7570\u5e38\u5206\u985e\u4e26\u8fd4\u56de\u9069\u7576\u7684\u72c0\u614b\u78bc\u548c\u932f\u8aa4\u4fe1\u606f\"\"\"\n    # \u6578\u64da\u5eab\u76f8\u95dc\u7570\u5e38\n    if \"sqlalchemy\" in exc.__class__.__module__:\n        return status.HTTP_503_SERVICE_UNAVAILABLE, \"Database error occurred\"\n\n    # \u7db2\u7d61\u76f8\u95dc\u7570\u5e38\n    if isinstance(exc, (ConnectionError, TimeoutError)):\n        return status.HTTP_503_SERVICE_UNAVAILABLE, \"Network error occurred\"\n\n    # IO \u76f8\u95dc\u7570\u5e38\n    if isinstance(exc, (IOError, FileNotFoundError)):\n        return status.HTTP_500_INTERNAL_SERVER_ERROR, \"File system error occurred\"\n\n    # JSON \u89e3\u6790\u932f\u8aa4\n    if isinstance(exc, json.JSONDecodeError):\n        return status.HTTP_400_BAD_REQUEST, \"Invalid JSON format\"\n\n    # \u9ed8\u8a8d\u70ba\u670d\u52d9\u5668\u932f\u8aa4\n    return status.HTTP_500_INTERNAL_SERVER_ERROR, \"An unexpected error occurred\"\n\n@app.exception_handler(Exception)\nasync def classified_exception_handler(request: Request, exc: Exception):\n    # \u8a18\u9304\u932f\u8aa4\n    logger.error(f\"Unhandled exception: {str(exc)}\")\n    logger.error(traceback.format_exc())\n\n    # \u5206\u985e\u7570\u5e38\n    status_code, error_message = classify_exception(exc)\n\n    # \u8fd4\u56de\u9069\u7576\u7684\u97ff\u61c9\n    return JSONResponse(\n        status_code=status_code,\n        content={\n            \"status\": \"error\",\n            \"message\": error_message,\n            \"path\": request.url.path\n        }\n    )\n</code></pre>"},{"location":"error-handling/04-global-error-handling/#_13","title":"\u6574\u5408\u932f\u8aa4\u5831\u544a\u670d\u52d9","text":"<p>\u5c07\u672a\u6355\u7372\u7684\u7570\u5e38\u767c\u9001\u5230\u932f\u8aa4\u5831\u544a\u670d\u52d9\uff0c\u5982 Sentry\uff1a</p> <pre><code>from fastapi import FastAPI, Request\nfrom fastapi.responses import JSONResponse\nimport logging\nimport traceback\nimport sentry_sdk\nfrom sentry_sdk.integrations.asgi import SentryAsgiMiddleware\n\n# \u914d\u7f6e Sentry\nsentry_sdk.init(\n    dsn=\"https://your-sentry-dsn@sentry.io/project\",\n    traces_sample_rate=1.0,\n    environment=os.getenv(\"ENVIRONMENT\", \"development\")\n)\n\napp = FastAPI()\n\n@app.exception_handler(Exception)\nasync def sentry_exception_handler(request: Request, exc: Exception):\n    # \u8a18\u9304\u932f\u8aa4\n    logger.error(f\"Unhandled exception: {str(exc)}\")\n    logger.error(traceback.format_exc())\n\n    # Sentry \u6703\u81ea\u52d5\u6355\u7372\u7570\u5e38\uff0c\u4f46\u6211\u5011\u53ef\u4ee5\u6dfb\u52a0\u984d\u5916\u4e0a\u4e0b\u6587\n    with sentry_sdk.push_scope() as scope:\n        scope.set_context(\"request\", {\n            \"url\": str(request.url),\n            \"method\": request.method,\n            \"headers\": dict(request.headers)\n        })\n        sentry_sdk.capture_exception(exc)\n\n    # \u8fd4\u56de\u932f\u8aa4\u97ff\u61c9\n    return JSONResponse(\n        status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n        content={\n            \"status\": \"error\",\n            \"message\": \"An unexpected error occurred. Our team has been notified.\",\n            \"error_id\": sentry_sdk.last_event_id(),\n            \"path\": request.url.path\n        }\n    )\n\n# \u6dfb\u52a0 Sentry \u4e2d\u9593\u4ef6\napp.add_middleware(SentryAsgiMiddleware)\n</code></pre>"},{"location":"error-handling/04-global-error-handling/#_14","title":"\u5be6\u7528\u7684\u5168\u5c40\u7570\u5e38\u8655\u7406\u793a\u4f8b","text":"<p>\u4ee5\u4e0b\u662f\u4e00\u500b\u5be6\u7528\u7684\u5168\u5c40\u7570\u5e38\u8655\u7406\u793a\u4f8b\uff0c\u9069\u5408\u5927\u591a\u6578 FastAPI \u61c9\u7528\uff1a</p> <pre><code>from fastapi import FastAPI, Request, status, HTTPException\nfrom fastapi.exceptions import RequestValidationError\nfrom fastapi.responses import JSONResponse\nimport logging\nimport traceback\nimport os\nfrom datetime import datetime\n\n# \u914d\u7f6e\u65e5\u8a8c\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\n# \u74b0\u5883\u914d\u7f6e\nDEBUG = os.getenv(\"DEBUG\", \"false\").lower() == \"true\"\n\napp = FastAPI()\n\n# \u8655\u7406\u8acb\u6c42\u9a57\u8b49\u932f\u8aa4\n@app.exception_handler(RequestValidationError)\nasync def validation_exception_handler(request: Request, exc: RequestValidationError):\n    logger.error(f\"Validation error: {exc.errors()}\")\n\n    errors = []\n    for error in exc.errors():\n        errors.append({\n            \"field\": \".\".join(str(loc) for loc in error[\"loc\"]),\n            \"message\": error[\"msg\"],\n            \"type\": error[\"type\"]\n        })\n\n    return JSONResponse(\n        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,\n        content={\n            \"status\": \"error\",\n            \"message\": \"Validation error\",\n            \"errors\": errors,\n            \"timestamp\": datetime.now().isoformat(),\n            \"path\": request.url.path\n        }\n    )\n\n# \u8655\u7406 HTTP \u7570\u5e38\n@app.exception_handler(HTTPException)\nasync def http_exception_handler(request: Request, exc: HTTPException):\n    logger.error(f\"HTTP error {exc.status_code}: {exc.detail}\")\n\n    response = JSONResponse(\n        status_code=exc.status_code,\n        content={\n            \"status\": \"error\",\n            \"message\": exc.detail,\n            \"timestamp\": datetime.now().isoformat(),\n            \"path\": request.url.path\n        }\n    )\n\n    # \u6dfb\u52a0\u6a19\u982d\uff08\u5982\u679c\u6709\uff09\n    if hasattr(exc, \"headers\") and exc.headers:\n        for key, value in exc.headers.items():\n            response.headers[key] = value\n\n    return response\n\n# \u8655\u7406\u6240\u6709\u5176\u4ed6\u7570\u5e38\n@app.exception_handler(Exception)\nasync def global_exception_handler(request: Request, exc: Exception):\n    logger.error(f\"Unhandled exception: {str(exc)}\")\n    logger.error(traceback.format_exc())\n\n    content = {\n        \"status\": \"error\",\n        \"message\": \"An unexpected error occurred\",\n        \"timestamp\": datetime.now().isoformat(),\n        \"path\": request.url.path\n    }\n\n    # \u5728\u958b\u767c\u74b0\u5883\u4e2d\u6dfb\u52a0\u8a73\u7d30\u932f\u8aa4\u4fe1\u606f\n    if DEBUG:\n        content.update({\n            \"detail\": str(exc),\n            \"exception_type\": exc.__class__.__name__,\n            \"traceback\": traceback.format_exc().split(\"\\n\")\n        })\n\n    return JSONResponse(\n        status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n        content=content\n    )\n\n# \u793a\u4f8b\u8def\u7531\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int):\n    if item_id &lt; 0:\n        raise HTTPException(status_code=400, detail=\"Item ID must be positive\")\n    if item_id == 0:\n        raise ValueError(\"Zero is not a valid item ID\")\n    return {\"item_id\": item_id, \"name\": f\"Item {item_id}\"}\n</code></pre>"},{"location":"error-handling/04-global-error-handling/#_15","title":"\u7e3d\u7d50","text":"<p>\u5168\u5c40\u7570\u5e38\u8655\u7406\u662f\u69cb\u5efa\u5065\u58ef FastAPI \u61c9\u7528\u7684\u95dc\u9375\u90e8\u5206\uff1a</p> <ul> <li>\u8655\u7406\u5167\u5efa\u7570\u5e38\uff1a\u70ba <code>RequestValidationError</code>\u3001<code>HTTPException</code> \u7b49\u5167\u5efa\u7570\u5e38\u63d0\u4f9b\u81ea\u5b9a\u7fa9\u8655\u7406\u5668</li> <li>\u6355\u7372\u672a\u8655\u7406\u7684\u7570\u5e38\uff1a\u4f7f\u7528\u5168\u5c40\u7570\u5e38\u8655\u7406\u5668\u6355\u7372\u6240\u6709\u672a\u8655\u7406\u7684\u7570\u5e38\uff0c\u9632\u6b62\u61c9\u7528\u5d29\u6f70</li> <li>\u63d0\u4f9b\u4e00\u81f4\u7684\u932f\u8aa4\u97ff\u61c9\uff1a\u78ba\u4fdd\u6240\u6709\u932f\u8aa4\u97ff\u61c9\u9075\u5faa\u4e00\u81f4\u7684\u683c\u5f0f\uff0c\u4fbf\u65bc\u5ba2\u6236\u7aef\u8655\u7406</li> <li>\u5340\u5206\u74b0\u5883\uff1a\u5728\u958b\u767c\u74b0\u5883\u4e2d\u63d0\u4f9b\u8a73\u7d30\u7684\u932f\u8aa4\u4fe1\u606f\uff0c\u5728\u751f\u7522\u74b0\u5883\u4e2d\u96b1\u85cf\u654f\u611f\u4fe1\u606f</li> <li>\u6574\u5408\u65e5\u8a8c\u8a18\u9304\uff1a\u8a18\u9304\u6240\u6709\u932f\u8aa4\uff0c\u4fbf\u65bc\u8abf\u8a66\u548c\u76e3\u63a7</li> <li>\u7570\u5e38\u5206\u985e\uff1a\u6839\u64da\u7570\u5e38\u985e\u578b\u63d0\u4f9b\u4e0d\u540c\u7684\u932f\u8aa4\u97ff\u61c9</li> <li>\u6574\u5408\u932f\u8aa4\u5831\u544a\u670d\u52d9\uff1a\u5c07\u932f\u8aa4\u767c\u9001\u5230 Sentry \u7b49\u932f\u8aa4\u5831\u544a\u670d\u52d9</li> </ul> <p>\u901a\u904e\u5be6\u65bd\u5168\u9762\u7684\u5168\u5c40\u7570\u5e38\u8655\u7406\u7b56\u7565\uff0c\u60a8\u53ef\u4ee5\u5275\u5efa\u66f4\u5065\u58ef\u3001\u66f4\u6613\u65bc\u7dad\u8b77\u7684 FastAPI \u61c9\u7528\uff0c\u63d0\u4f9b\u66f4\u597d\u7684\u958b\u767c\u8005\u548c\u7528\u6236\u9ad4\u9a57\u3002</p>"},{"location":"error-handling/05-api-routing/","title":"API Router \u8207\u7570\u5e38\u8655\u7406","text":"<p>\u5728\u5927\u578b FastAPI \u61c9\u7528\u4e2d\uff0c\u901a\u5e38\u6703\u4f7f\u7528 APIRouter \u4f86\u7d44\u7e54\u548c\u6a21\u584a\u5316\u8def\u7531\u3002APIRouter \u5141\u8a31\u5c07\u76f8\u95dc\u7684\u7aef\u9ede\u5206\u7d44\u5230\u4e0d\u540c\u7684\u8def\u7531\u5668\u4e2d\uff0c\u4f7f\u4ee3\u78bc\u66f4\u52a0\u7d50\u69cb\u5316\u548c\u53ef\u7dad\u8b77\u3002\u672c\u7ae0\u5c07\u63a2\u8a0e\u5982\u4f55\u5728\u4f7f\u7528 APIRouter \u6642\u5be6\u73fe\u6709\u6548\u7684\u7570\u5e38\u8655\u7406\u7b56\u7565\u3002</p>"},{"location":"error-handling/05-api-routing/#apirouter","title":"APIRouter \u57fa\u790e\u77e5\u8b58","text":"<p>APIRouter \u662f FastAPI \u63d0\u4f9b\u7684\u4e00\u500b\u5de5\u5177\uff0c\u7528\u65bc\u5c07\u76f8\u95dc\u7684\u7aef\u9ede\u7d44\u7e54\u5728\u4e00\u8d77\uff0c\u4e26\u53ef\u4ee5\u5728\u4e3b\u61c9\u7528\u4e2d\u8a3b\u518a\u9019\u4e9b\u8def\u7531\u5668\u3002</p>"},{"location":"error-handling/05-api-routing/#_1","title":"\u57fa\u672c\u7528\u6cd5","text":"<pre><code>from fastapi import APIRouter, FastAPI\n\n# \u5275\u5efa\u8def\u7531\u5668\nrouter = APIRouter(\n    prefix=\"/items\",\n    tags=[\"items\"],\n    responses={404: {\"description\": \"Item not found\"}}\n)\n\n# \u5728\u8def\u7531\u5668\u4e0a\u5b9a\u7fa9\u7aef\u9ede\n@router.get(\"/{item_id}\")\nasync def read_item(item_id: int):\n    return {\"item_id\": item_id, \"name\": f\"Item {item_id}\"}\n\n# \u5275\u5efa\u4e3b\u61c9\u7528\napp = FastAPI()\n\n# \u5c07\u8def\u7531\u5668\u5305\u542b\u5728\u61c9\u7528\u4e2d\napp.include_router(router)\n</code></pre> <p>\u5728\u9019\u500b\u4f8b\u5b50\u4e2d\uff0c\u6211\u5011\u5275\u5efa\u4e86\u4e00\u500b\u524d\u7db4\u70ba <code>/items</code> \u7684\u8def\u7531\u5668\uff0c\u4e26\u5b9a\u7fa9\u4e86\u4e00\u500b\u7aef\u9ede\u4f86\u8b80\u53d6\u9805\u76ee\u3002\u7136\u5f8c\uff0c\u6211\u5011\u5c07\u8a72\u8def\u7531\u5668\u5305\u542b\u5728\u4e3b\u61c9\u7528\u4e2d\u3002</p>"},{"location":"error-handling/05-api-routing/#_2","title":"\u8def\u7531\u5668\u7d1a\u5225\u7684\u7570\u5e38\u8655\u7406","text":"<p>\u6bcf\u500b APIRouter \u53ef\u4ee5\u6709\u81ea\u5df1\u7684\u7570\u5e38\u8655\u7406\u5668\uff0c\u7528\u65bc\u8655\u7406\u8a72\u8def\u7531\u5668\u4e2d\u7684\u7aef\u9ede\u62cb\u51fa\u7684\u7570\u5e38\u3002</p>"},{"location":"error-handling/05-api-routing/#_3","title":"\u70ba\u8def\u7531\u5668\u5b9a\u7fa9\u7570\u5e38\u8655\u7406\u5668","text":"<pre><code>from fastapi import APIRouter, FastAPI, HTTPException, Request\nfrom fastapi.responses import JSONResponse\nimport logging\n\n# \u914d\u7f6e\u65e5\u8a8c\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\n# \u5275\u5efa\u8def\u7531\u5668\nrouter = APIRouter(\n    prefix=\"/users\",\n    tags=[\"users\"]\n)\n\n# \u81ea\u5b9a\u7fa9\u7570\u5e38\nclass UserNotFoundError(Exception):\n    def __init__(self, user_id: int):\n        self.user_id = user_id\n        self.message = f\"User with ID {user_id} not found\"\n        super().__init__(self.message)\n\n# \u8def\u7531\u5668\u7d1a\u5225\u7684\u7570\u5e38\u8655\u7406\u5668\n@router.exception_handler(UserNotFoundError)\nasync def user_not_found_exception_handler(request: Request, exc: UserNotFoundError):\n    logger.error(f\"User not found: {exc.user_id}\")\n    return JSONResponse(\n        status_code=404,\n        content={\n            \"status\": \"error\",\n            \"message\": exc.message,\n            \"user_id\": exc.user_id\n        }\n    )\n\n# \u8def\u7531\u5668\u7aef\u9ede\n@router.get(\"/{user_id}\")\nasync def read_user(user_id: int):\n    if user_id &lt;= 0:\n        raise UserNotFoundError(user_id)\n    return {\"user_id\": user_id, \"name\": f\"User {user_id}\"}\n\n# \u5275\u5efa\u4e3b\u61c9\u7528\napp = FastAPI()\n\n# \u5c07\u8def\u7531\u5668\u5305\u542b\u5728\u61c9\u7528\u4e2d\napp.include_router(router)\n</code></pre> <p>\u5728\u9019\u500b\u4f8b\u5b50\u4e2d\uff0c\u6211\u5011\u70ba <code>/users</code> \u8def\u7531\u5668\u5b9a\u7fa9\u4e86\u4e00\u500b\u7570\u5e38\u8655\u7406\u5668\uff0c\u5c08\u9580\u8655\u7406 <code>UserNotFoundError</code> \u7570\u5e38\u3002\u7576\u8def\u7531\u5668\u4e2d\u7684\u7aef\u9ede\u62cb\u51fa\u9019\u500b\u7570\u5e38\u6642\uff0c\u5c07\u7531\u9019\u500b\u8655\u7406\u5668\u8655\u7406\u3002</p>"},{"location":"error-handling/05-api-routing/#_4","title":"\u8def\u7531\u5668\u8207\u5168\u5c40\u7570\u5e38\u8655\u7406\u7684\u95dc\u4fc2","text":"<p>\u7576\u4e00\u500b\u61c9\u7528\u5305\u542b\u591a\u500b\u8def\u7531\u5668\u6642\uff0c\u7570\u5e38\u8655\u7406\u9075\u5faa\u4ee5\u4e0b\u512a\u5148\u9806\u5e8f\uff1a</p> <ol> <li>\u8def\u7531\u5668\u7d1a\u5225\u7684\u7570\u5e38\u8655\u7406\u5668</li> <li>\u61c9\u7528\u7d1a\u5225\u7684\u7570\u5e38\u8655\u7406\u5668</li> <li>FastAPI \u9ed8\u8a8d\u7684\u7570\u5e38\u8655\u7406</li> </ol> <p>\u9019\u610f\u5473\u8457\u5982\u679c\u8def\u7531\u5668\u5b9a\u7fa9\u4e86\u4e00\u500b\u7570\u5e38\u8655\u7406\u5668\uff0c\u90a3\u9ebc\u8a72\u8655\u7406\u5668\u5c07\u512a\u5148\u65bc\u61c9\u7528\u7d1a\u5225\u7684\u8655\u7406\u5668\u3002\u5982\u679c\u8def\u7531\u5668\u6c92\u6709\u5b9a\u7fa9\u8655\u7406\u5668\uff0c\u5247\u7570\u5e38\u5c07\u50b3\u905e\u7d66\u61c9\u7528\u7d1a\u5225\u7684\u8655\u7406\u5668\u3002</p> <pre><code>from fastapi import APIRouter, FastAPI, HTTPException, Request\nfrom fastapi.responses import JSONResponse\nimport logging\n\n# \u914d\u7f6e\u65e5\u8a8c\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\n# \u5275\u5efa\u8def\u7531\u5668\nusers_router = APIRouter(\n    prefix=\"/users\",\n    tags=[\"users\"]\n)\n\n# \u81ea\u5b9a\u7fa9\u7570\u5e38\nclass UserNotFoundError(Exception):\n    def __init__(self, user_id: int):\n        self.user_id = user_id\n        self.message = f\"User with ID {user_id} not found\"\n        super().__init__(self.message)\n\n# \u8def\u7531\u5668\u7d1a\u5225\u7684\u7570\u5e38\u8655\u7406\u5668\n@users_router.exception_handler(UserNotFoundError)\nasync def user_not_found_exception_handler(request: Request, exc: UserNotFoundError):\n    logger.error(f\"User not found: {exc.user_id}\")\n    return JSONResponse(\n        status_code=404,\n        content={\n            \"status\": \"error\",\n            \"message\": exc.message,\n            \"user_id\": exc.user_id\n        }\n    )\n\n# \u8def\u7531\u5668\u7aef\u9ede\n@users_router.get(\"/{user_id}\")\nasync def read_user(user_id: int):\n    if user_id &lt;= 0:\n        raise UserNotFoundError(user_id)\n    return {\"user_id\": user_id, \"name\": f\"User {user_id}\"}\n\n# \u5275\u5efa\u53e6\u4e00\u500b\u8def\u7531\u5668\nitems_router = APIRouter(\n    prefix=\"/items\",\n    tags=[\"items\"]\n)\n\n# \u81ea\u5b9a\u7fa9\u7570\u5e38\nclass ItemNotFoundError(Exception):\n    def __init__(self, item_id: int):\n        self.item_id = item_id\n        self.message = f\"Item with ID {item_id} not found\"\n        super().__init__(self.message)\n\n# \u8def\u7531\u5668\u7aef\u9ede\n@items_router.get(\"/{item_id}\")\nasync def read_item(item_id: int):\n    if item_id &lt;= 0:\n        raise ItemNotFoundError(item_id)\n    return {\"item_id\": item_id, \"name\": f\"Item {item_id}\"}\n\n# \u5275\u5efa\u4e3b\u61c9\u7528\napp = FastAPI()\n\n# \u61c9\u7528\u7d1a\u5225\u7684\u7570\u5e38\u8655\u7406\u5668\n@app.exception_handler(ItemNotFoundError)\nasync def item_not_found_exception_handler(request: Request, exc: ItemNotFoundError):\n    logger.error(f\"Item not found: {exc.item_id}\")\n    return JSONResponse(\n        status_code=404,\n        content={\n            \"status\": \"error\",\n            \"message\": exc.message,\n            \"item_id\": exc.item_id\n        }\n    )\n\n# \u5c07\u8def\u7531\u5668\u5305\u542b\u5728\u61c9\u7528\u4e2d\napp.include_router(users_router)\napp.include_router(items_router)\n</code></pre> <p>\u5728\u9019\u500b\u4f8b\u5b50\u4e2d\uff1a - <code>UserNotFoundError</code> \u7531 <code>users_router</code> \u7684\u7570\u5e38\u8655\u7406\u5668\u8655\u7406 - <code>ItemNotFoundError</code> \u7531\u61c9\u7528\u7d1a\u5225\u7684\u7570\u5e38\u8655\u7406\u5668\u8655\u7406\uff0c\u56e0\u70ba <code>items_router</code> \u6c92\u6709\u70ba\u8a72\u7570\u5e38\u5b9a\u7fa9\u8655\u7406\u5668</p>"},{"location":"error-handling/05-api-routing/#_5","title":"\u5728\u8def\u7531\u5668\u4e2d\u4f7f\u7528\u4f9d\u8cf4\u9805\u9032\u884c\u7570\u5e38\u8655\u7406","text":"<p>\u4f9d\u8cf4\u9805\u662f FastAPI \u7684\u4e00\u500b\u5f37\u5927\u529f\u80fd\uff0c\u53ef\u4ee5\u7528\u65bc\u5be6\u73fe\u6a6b\u5207\u95dc\u6ce8\u9ede\uff0c\u5982\u8eab\u4efd\u9a57\u8b49\u3001\u6388\u6b0a\u548c\u8f38\u5165\u9a57\u8b49\u3002\u60a8\u53ef\u4ee5\u5728\u8def\u7531\u5668\u7d1a\u5225\u5b9a\u7fa9\u4f9d\u8cf4\u9805\uff0c\u9019\u4e9b\u4f9d\u8cf4\u9805\u5c07\u61c9\u7528\u65bc\u8a72\u8def\u7531\u5668\u4e2d\u7684\u6240\u6709\u7aef\u9ede\u3002</p>"},{"location":"error-handling/05-api-routing/#_6","title":"\u4f7f\u7528\u8def\u7531\u5668\u4f9d\u8cf4\u9805\u9032\u884c\u932f\u8aa4\u8655\u7406","text":"<pre><code>from fastapi import APIRouter, Depends, FastAPI, HTTPException, Request, Header\nfrom typing import Optional\nimport logging\n\n# \u914d\u7f6e\u65e5\u8a8c\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\n# \u5275\u5efa\u8def\u7531\u5668\nrouter = APIRouter(\n    prefix=\"/admin\",\n    tags=[\"admin\"]\n)\n\n# \u6388\u6b0a\u4f9d\u8cf4\u9805\ndef verify_admin_token(x_token: Optional[str] = Header(None)):\n    if not x_token:\n        raise HTTPException(status_code=401, detail=\"X-Token header missing\")\n    if x_token != \"admin-secret-token\":\n        raise HTTPException(status_code=403, detail=\"Invalid admin token\")\n    return x_token\n\n# \u5c07\u4f9d\u8cf4\u9805\u61c9\u7528\u65bc\u6574\u500b\u8def\u7531\u5668\nrouter = APIRouter(\n    prefix=\"/admin\",\n    tags=[\"admin\"],\n    dependencies=[Depends(verify_admin_token)],\n    responses={\n        401: {\"description\": \"Missing token\"},\n        403: {\"description\": \"Invalid token\"}\n    }\n)\n\n# \u8def\u7531\u5668\u7aef\u9ede\n@router.get(\"/dashboard\")\nasync def admin_dashboard():\n    return {\"status\": \"success\", \"message\": \"Welcome to admin dashboard\"}\n\n@router.get(\"/users\")\nasync def list_all_users():\n    return {\"status\": \"success\", \"users\": [\"user1\", \"user2\", \"user3\"]}\n\n# \u5275\u5efa\u4e3b\u61c9\u7528\napp = FastAPI()\n\n# \u5c07\u8def\u7531\u5668\u5305\u542b\u5728\u61c9\u7528\u4e2d\napp.include_router(router)\n</code></pre> <p>\u5728\u9019\u500b\u4f8b\u5b50\u4e2d\uff0c\u6211\u5011\u70ba <code>/admin</code> \u8def\u7531\u5668\u5b9a\u7fa9\u4e86\u4e00\u500b\u4f9d\u8cf4\u9805 <code>verify_admin_token</code>\uff0c\u7528\u65bc\u9a57\u8b49\u7ba1\u7406\u54e1\u4ee4\u724c\u3002\u8a72\u4f9d\u8cf4\u9805\u5c07\u61c9\u7528\u65bc\u8def\u7531\u5668\u4e2d\u7684\u6240\u6709\u7aef\u9ede\uff0c\u5982\u679c\u9a57\u8b49\u5931\u6557\uff0c\u5c07\u62cb\u51fa <code>HTTPException</code>\u3002</p>"},{"location":"error-handling/05-api-routing/#_7","title":"\u8def\u7531\u5668\u7279\u5b9a\u7684\u932f\u8aa4\u97ff\u61c9","text":"<p>\u60a8\u53ef\u4ee5\u5728\u8def\u7531\u5668\u7d1a\u5225\u5b9a\u7fa9\u9ed8\u8a8d\u7684\u932f\u8aa4\u97ff\u61c9\uff0c\u9019\u4e9b\u97ff\u61c9\u5c07\u5305\u542b\u5728 API \u6587\u6a94\u4e2d\uff1a</p> <pre><code>from fastapi import APIRouter, FastAPI, HTTPException\nfrom pydantic import BaseModel\n\n# \u932f\u8aa4\u97ff\u61c9\u6a21\u578b\nclass ErrorResponse(BaseModel):\n    status: str = \"error\"\n    message: str\n\n# \u5275\u5efa\u8def\u7531\u5668\nrouter = APIRouter(\n    prefix=\"/products\",\n    tags=[\"products\"],\n    responses={\n        404: {\n            \"model\": ErrorResponse,\n            \"description\": \"Product not found\",\n            \"content\": {\n                \"application/json\": {\n                    \"example\": {\"status\": \"error\", \"message\": \"Product not found\"}\n                }\n            }\n        },\n        400: {\n            \"model\": ErrorResponse,\n            \"description\": \"Bad request\",\n            \"content\": {\n                \"application/json\": {\n                    \"example\": {\"status\": \"error\", \"message\": \"Invalid product data\"}\n                }\n            }\n        }\n    }\n)\n\n# \u8def\u7531\u5668\u7aef\u9ede\n@router.get(\"/{product_id}\")\nasync def read_product(product_id: int):\n    if product_id &lt;= 0:\n        raise HTTPException(status_code=404, detail=\"Product not found\")\n    return {\"product_id\": product_id, \"name\": f\"Product {product_id}\"}\n\n# \u5275\u5efa\u4e3b\u61c9\u7528\napp = FastAPI()\n\n# \u5c07\u8def\u7531\u5668\u5305\u542b\u5728\u61c9\u7528\u4e2d\napp.include_router(router)\n</code></pre> <p>\u5728\u9019\u500b\u4f8b\u5b50\u4e2d\uff0c\u6211\u5011\u70ba <code>/products</code> \u8def\u7531\u5668\u5b9a\u7fa9\u4e86\u5169\u500b\u9ed8\u8a8d\u7684\u932f\u8aa4\u97ff\u61c9\uff1a404 \u548c 400\u3002\u9019\u4e9b\u97ff\u61c9\u5c07\u986f\u793a\u5728 API \u6587\u6a94\u4e2d\uff0c\u5e6b\u52a9 API \u6d88\u8cbb\u8005\u7406\u89e3\u53ef\u80fd\u7684\u932f\u8aa4\u60c5\u6cc1\u3002</p>"},{"location":"error-handling/05-api-routing/#_8","title":"\u8def\u7531\u5668\u8207\u932f\u8aa4\u78bc\u7684\u6a19\u6e96\u5316","text":"<p>\u5728\u5927\u578b\u61c9\u7528\u4e2d\uff0c\u4fdd\u6301\u932f\u8aa4\u78bc\u7684\u4e00\u81f4\u6027\u975e\u5e38\u91cd\u8981\u3002\u60a8\u53ef\u4ee5\u5275\u5efa\u4e00\u500b\u932f\u8aa4\u78bc\u6a21\u584a\uff0c\u4e26\u5728\u6240\u6709\u8def\u7531\u5668\u4e2d\u4f7f\u7528\u5b83\uff1a</p> <pre><code>from enum import Enum\nfrom fastapi import APIRouter, FastAPI, HTTPException, Request\nfrom fastapi.responses import JSONResponse\nimport logging\n\n# \u914d\u7f6e\u65e5\u8a8c\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\n# \u932f\u8aa4\u78bc\u679a\u8209\nclass ErrorCode(str, Enum):\n    # \u7528\u6236\u932f\u8aa4\n    USER_NOT_FOUND = \"USER_NOT_FOUND\"\n    USER_ALREADY_EXISTS = \"USER_ALREADY_EXISTS\"\n    INVALID_USER_DATA = \"INVALID_USER_DATA\"\n\n    # \u9805\u76ee\u932f\u8aa4\n    ITEM_NOT_FOUND = \"ITEM_NOT_FOUND\"\n    ITEM_ALREADY_EXISTS = \"ITEM_ALREADY_EXISTS\"\n    INVALID_ITEM_DATA = \"INVALID_ITEM_DATA\"\n\n    # \u6388\u6b0a\u932f\u8aa4\n    UNAUTHORIZED = \"UNAUTHORIZED\"\n    FORBIDDEN = \"FORBIDDEN\"\n\n# \u81ea\u5b9a\u7fa9\u7570\u5e38\nclass AppException(Exception):\n    def __init__(self, code: ErrorCode, message: str, status_code: int = 400):\n        self.code = code\n        self.message = message\n        self.status_code = status_code\n        super().__init__(self.message)\n\n# \u5275\u5efa\u7528\u6236\u8def\u7531\u5668\nusers_router = APIRouter(\n    prefix=\"/users\",\n    tags=[\"users\"]\n)\n\n# \u7528\u6236\u8def\u7531\u5668\u7aef\u9ede\n@users_router.get(\"/{user_id}\")\nasync def read_user(user_id: int):\n    if user_id &lt;= 0:\n        raise AppException(\n            code=ErrorCode.USER_NOT_FOUND,\n            message=f\"User with ID {user_id} not found\",\n            status_code=404\n        )\n    return {\"user_id\": user_id, \"name\": f\"User {user_id}\"}\n\n# \u5275\u5efa\u9805\u76ee\u8def\u7531\u5668\nitems_router = APIRouter(\n    prefix=\"/items\",\n    tags=[\"items\"]\n)\n\n# \u9805\u76ee\u8def\u7531\u5668\u7aef\u9ede\n@items_router.get(\"/{item_id}\")\nasync def read_item(item_id: int):\n    if item_id &lt;= 0:\n        raise AppException(\n            code=ErrorCode.ITEM_NOT_FOUND,\n            message=f\"Item with ID {item_id} not found\",\n            status_code=404\n        )\n    return {\"item_id\": item_id, \"name\": f\"Item {item_id}\"}\n\n# \u5275\u5efa\u4e3b\u61c9\u7528\napp = FastAPI()\n\n# \u61c9\u7528\u7d1a\u5225\u7684\u7570\u5e38\u8655\u7406\u5668\n@app.exception_handler(AppException)\nasync def app_exception_handler(request: Request, exc: AppException):\n    logger.error(f\"App exception: {exc.code} - {exc.message}\")\n    return JSONResponse(\n        status_code=exc.status_code,\n        content={\n            \"status\": \"error\",\n            \"code\": exc.code,\n            \"message\": exc.message\n        }\n    )\n\n# \u5c07\u8def\u7531\u5668\u5305\u542b\u5728\u61c9\u7528\u4e2d\napp.include_router(users_router)\napp.include_router(items_router)\n</code></pre> <p>\u5728\u9019\u500b\u4f8b\u5b50\u4e2d\uff0c\u6211\u5011\u5b9a\u7fa9\u4e86\u4e00\u500b <code>ErrorCode</code> \u679a\u8209\uff0c\u5305\u542b\u6240\u6709\u53ef\u80fd\u7684\u932f\u8aa4\u78bc\uff0c\u4e26\u5275\u5efa\u4e86\u4e00\u500b <code>AppException</code> \u7570\u5e38\u985e\uff0c\u7528\u65bc\u5728\u61c9\u7528\u4e2d\u62cb\u51fa\u6a19\u6e96\u5316\u7684\u7570\u5e38\u3002\u7136\u5f8c\uff0c\u6211\u5011\u5728\u61c9\u7528\u7d1a\u5225\u5b9a\u7fa9\u4e86\u4e00\u500b\u7570\u5e38\u8655\u7406\u5668\uff0c\u8655\u7406\u6240\u6709 <code>AppException</code> \u7570\u5e38\u3002</p>"},{"location":"error-handling/05-api-routing/#_9","title":"\u6a21\u584a\u5316\u7684\u7570\u5e38\u8655\u7406","text":"<p>\u5728\u5927\u578b\u61c9\u7528\u4e2d\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u5c07\u7570\u5e38\u8655\u7406\u908f\u8f2f\u6a21\u584a\u5316\uff0c\u4ee5\u4fbf\u5728\u591a\u500b\u8def\u7531\u5668\u4e4b\u9593\u5171\u4eab\u3002\u4ee5\u4e0b\u662f\u4e00\u7a2e\u53ef\u80fd\u7684\u7d44\u7e54\u65b9\u5f0f\uff1a</p>"},{"location":"error-handling/05-api-routing/#_10","title":"\u9805\u76ee\u7d50\u69cb","text":"<pre><code>app/\n\u251c\u2500\u2500 main.py                  # \u4e3b\u61c9\u7528\n\u251c\u2500\u2500 exceptions/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 base.py              # \u57fa\u790e\u7570\u5e38\u985e\n\u2502   \u251c\u2500\u2500 handlers.py          # \u7570\u5e38\u8655\u7406\u5668\n\u2502   \u2514\u2500\u2500 error_codes.py       # \u932f\u8aa4\u78bc\n\u251c\u2500\u2500 routers/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 users.py             # \u7528\u6236\u8def\u7531\u5668\n\u2502   \u2514\u2500\u2500 items.py             # \u9805\u76ee\u8def\u7531\u5668\n\u2514\u2500\u2500 dependencies/\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 auth.py              # \u8eab\u4efd\u9a57\u8b49\u4f9d\u8cf4\u9805\n</code></pre>"},{"location":"error-handling/05-api-routing/#_11","title":"\u5be6\u73fe","text":"<pre><code># app/exceptions/error_codes.py\nfrom enum import Enum\n\nclass ErrorCode(str, Enum):\n    # \u7528\u6236\u932f\u8aa4\n    USER_NOT_FOUND = \"USER_NOT_FOUND\"\n    USER_ALREADY_EXISTS = \"USER_ALREADY_EXISTS\"\n    INVALID_USER_DATA = \"INVALID_USER_DATA\"\n\n    # \u9805\u76ee\u932f\u8aa4\n    ITEM_NOT_FOUND = \"ITEM_NOT_FOUND\"\n    ITEM_ALREADY_EXISTS = \"ITEM_ALREADY_EXISTS\"\n    INVALID_ITEM_DATA = \"INVALID_ITEM_DATA\"\n\n    # \u6388\u6b0a\u932f\u8aa4\n    UNAUTHORIZED = \"UNAUTHORIZED\"\n    FORBIDDEN = \"FORBIDDEN\"\n</code></pre> <pre><code># app/exceptions/base.py\nfrom .error_codes import ErrorCode\n\nclass AppException(Exception):\n    def __init__(self, code: ErrorCode, message: str, status_code: int = 400):\n        self.code = code\n        self.message = message\n        self.status_code = status_code\n        super().__init__(self.message)\n\nclass UserException(AppException):\n    \"\"\"\u7528\u6236\u76f8\u95dc\u7570\u5e38\u7684\u57fa\u985e\"\"\"\n    pass\n\nclass UserNotFoundError(UserException):\n    def __init__(self, user_id: int):\n        super().__init__(\n            code=ErrorCode.USER_NOT_FOUND,\n            message=f\"User with ID {user_id} not found\",\n            status_code=404\n        )\n\nclass ItemException(AppException):\n    \"\"\"\u9805\u76ee\u76f8\u95dc\u7570\u5e38\u7684\u57fa\u985e\"\"\"\n    pass\n\nclass ItemNotFoundError(ItemException):\n    def __init__(self, item_id: int):\n        super().__init__(\n            code=ErrorCode.ITEM_NOT_FOUND,\n            message=f\"Item with ID {item_id} not found\",\n            status_code=404\n        )\n</code></pre> <pre><code># app/exceptions/handlers.py\nfrom fastapi import Request\nfrom fastapi.responses import JSONResponse\nimport logging\nfrom .base import AppException, UserException, ItemException\n\n# \u914d\u7f6e\u65e5\u8a8c\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\n# \u61c9\u7528\u7570\u5e38\u8655\u7406\u5668\nasync def app_exception_handler(request: Request, exc: AppException):\n    logger.error(f\"App exception: {exc.code} - {exc.message}\")\n    return JSONResponse(\n        status_code=exc.status_code,\n        content={\n            \"status\": \"error\",\n            \"code\": exc.code,\n            \"message\": exc.message\n        }\n    )\n\n# \u7528\u6236\u7570\u5e38\u8655\u7406\u5668\nasync def user_exception_handler(request: Request, exc: UserException):\n    logger.error(f\"User exception: {exc.code} - {exc.message}\")\n    return JSONResponse(\n        status_code=exc.status_code,\n        content={\n            \"status\": \"error\",\n            \"code\": exc.code,\n            \"message\": exc.message,\n            \"entity_type\": \"user\"\n        }\n    )\n\n# \u9805\u76ee\u7570\u5e38\u8655\u7406\u5668\nasync def item_exception_handler(request: Request, exc: ItemException):\n    logger.error(f\"Item exception: {exc.code} - {exc.message}\")\n    return JSONResponse(\n        status_code=exc.status_code,\n        content={\n            \"status\": \"error\",\n            \"code\": exc.code,\n            \"message\": exc.message,\n            \"entity_type\": \"item\"\n        }\n    )\n</code></pre> <pre><code># app/routers/users.py\nfrom fastapi import APIRouter\nfrom app.exceptions.base import UserNotFoundError\n\nrouter = APIRouter(\n    prefix=\"/users\",\n    tags=[\"users\"]\n)\n\n@router.get(\"/{user_id}\")\nasync def read_user(user_id: int):\n    if user_id &lt;= 0:\n        raise UserNotFoundError(user_id)\n    return {\"user_id\": user_id, \"name\": f\"User {user_id}\"}\n</code></pre> <pre><code># app/routers/items.py\nfrom fastapi import APIRouter\nfrom app.exceptions.base import ItemNotFoundError\n\nrouter = APIRouter(\n    prefix=\"/items\",\n    tags=[\"items\"]\n)\n\n@router.get(\"/{item_id}\")\nasync def read_item(item_id: int):\n    if item_id &lt;= 0:\n        raise ItemNotFoundError(item_id)\n    return {\"item_id\": item_id, \"name\": f\"Item {item_id}\"}\n</code></pre> <pre><code># app/main.py\nfrom fastapi import FastAPI\nfrom app.exceptions.base import AppException, UserException, ItemException\nfrom app.exceptions.handlers import (\n    app_exception_handler,\n    user_exception_handler,\n    item_exception_handler\n)\nfrom app.routers import users, items\n\napp = FastAPI()\n\n# \u8a3b\u518a\u7570\u5e38\u8655\u7406\u5668\napp.add_exception_handler(AppException, app_exception_handler)\napp.add_exception_handler(UserException, user_exception_handler)\napp.add_exception_handler(ItemException, item_exception_handler)\n\n# \u5305\u542b\u8def\u7531\u5668\napp.include_router(users.router)\napp.include_router(items.router)\n</code></pre> <p>\u9019\u7a2e\u6a21\u584a\u5316\u7684\u65b9\u6cd5\u4f7f\u5f97\u7570\u5e38\u8655\u7406\u908f\u8f2f\u66f4\u52a0\u6e05\u6670\u548c\u53ef\u7dad\u8b77\uff0c\u7279\u5225\u662f\u5728\u5927\u578b\u61c9\u7528\u4e2d\u3002</p>"},{"location":"error-handling/05-api-routing/#_12","title":"\u8def\u7531\u5668\u8207\u7570\u5e38\u8655\u7406\u7684\u6700\u4f73\u5be6\u8e10","text":""},{"location":"error-handling/05-api-routing/#_13","title":"\u6309\u9818\u57df\u7d44\u7e54\u8def\u7531\u5668","text":"<p>\u5c07\u76f8\u95dc\u7684\u7aef\u9ede\u7d44\u7e54\u5230\u540c\u4e00\u500b\u8def\u7531\u5668\u4e2d\uff0c\u4e26\u70ba\u6bcf\u500b\u9818\u57df\u5b9a\u7fa9\u7279\u5b9a\u7684\u7570\u5e38\uff1a</p> <pre><code># \u7528\u6236\u8def\u7531\u5668\nusers_router = APIRouter(\n    prefix=\"/users\",\n    tags=[\"users\"]\n)\n\n# \u9805\u76ee\u8def\u7531\u5668\nitems_router = APIRouter(\n    prefix=\"/items\",\n    tags=[\"items\"]\n)\n\n# \u8a02\u55ae\u8def\u7531\u5668\norders_router = APIRouter(\n    prefix=\"/orders\",\n    tags=[\"orders\"]\n)\n</code></pre>"},{"location":"error-handling/05-api-routing/#_14","title":"\u4f7f\u7528\u8def\u7531\u5668\u6a19\u7c64\u548c\u63cf\u8ff0","text":"<p>\u70ba\u8def\u7531\u5668\u6dfb\u52a0\u6a19\u7c64\u548c\u63cf\u8ff0\uff0c\u4ee5\u6539\u5584 API \u6587\u6a94\uff1a</p> <pre><code>users_router = APIRouter(\n    prefix=\"/users\",\n    tags=[\"users\"],\n    responses={404: {\"description\": \"User not found\"}},\n    dependencies=[Depends(get_token_header)],\n)\n</code></pre>"},{"location":"error-handling/05-api-routing/#_15","title":"\u8def\u7531\u5668\u7279\u5b9a\u7684\u4f9d\u8cf4\u9805","text":"<p>\u70ba\u8def\u7531\u5668\u5b9a\u7fa9\u7279\u5b9a\u7684\u4f9d\u8cf4\u9805\uff0c\u4ee5\u5be6\u73fe\u6a6b\u5207\u95dc\u6ce8\u9ede\uff1a</p> <pre><code>users_router = APIRouter(\n    prefix=\"/users\",\n    tags=[\"users\"],\n    dependencies=[Depends(verify_user_token)]\n)\n\nadmin_router = APIRouter(\n    prefix=\"/admin\",\n    tags=[\"admin\"],\n    dependencies=[Depends(verify_admin_token)]\n)\n</code></pre>"},{"location":"error-handling/05-api-routing/#_16","title":"\u8def\u7531\u5668\u7279\u5b9a\u7684\u932f\u8aa4\u97ff\u61c9","text":"<p>\u70ba\u6bcf\u500b\u8def\u7531\u5668\u5b9a\u7fa9\u7279\u5b9a\u7684\u932f\u8aa4\u97ff\u61c9\uff0c\u4ee5\u63d0\u4f9b\u66f4\u8a73\u7d30\u7684 API \u6587\u6a94\uff1a</p> <pre><code>users_router = APIRouter(\n    prefix=\"/users\",\n    tags=[\"users\"],\n    responses={\n        404: {\"description\": \"User not found\"},\n        400: {\"description\": \"Invalid user data\"},\n        403: {\"description\": \"Forbidden\"}\n    }\n)\n</code></pre>"},{"location":"error-handling/05-api-routing/#_17","title":"\u8def\u7531\u5668\u7279\u5b9a\u7684\u7570\u5e38\u8655\u7406\u5668","text":"<p>\u70ba\u6bcf\u500b\u8def\u7531\u5668\u5b9a\u7fa9\u7279\u5b9a\u7684\u7570\u5e38\u8655\u7406\u5668\uff0c\u4ee5\u8655\u7406\u9818\u57df\u7279\u5b9a\u7684\u7570\u5e38\uff1a</p> <pre><code>@users_router.exception_handler(UserNotFoundError)\nasync def user_not_found_exception_handler(request: Request, exc: UserNotFoundError):\n    return JSONResponse(\n        status_code=404,\n        content={\n            \"status\": \"error\",\n            \"message\": exc.message,\n            \"user_id\": exc.user_id\n        }\n    )\n</code></pre>"},{"location":"error-handling/05-api-routing/#api","title":"\u5be6\u969b\u6848\u4f8b\uff1a\u96fb\u5b50\u5546\u52d9 API","text":"<p>\u4ee5\u4e0b\u662f\u4e00\u500b\u96fb\u5b50\u5546\u52d9 API \u7684\u7c21\u5316\u7248\u672c\uff0c\u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528 APIRouter \u548c\u7570\u5e38\u8655\u7406\uff1a</p> <pre><code>from fastapi import APIRouter, FastAPI, HTTPException, Depends, Request\nfrom fastapi.responses import JSONResponse\nfrom pydantic import BaseModel\nfrom enum import Enum\nfrom typing import List, Optional\nimport logging\n\n# \u914d\u7f6e\u65e5\u8a8c\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\n# \u932f\u8aa4\u78bc\u679a\u8209\nclass ErrorCode(str, Enum):\n    # \u7522\u54c1\u932f\u8aa4\n    PRODUCT_NOT_FOUND = \"PRODUCT_NOT_FOUND\"\n    PRODUCT_OUT_OF_STOCK = \"PRODUCT_OUT_OF_STOCK\"\n\n    # \u8cfc\u7269\u8eca\u932f\u8aa4\n    CART_NOT_FOUND = \"CART_NOT_FOUND\"\n    CART_EMPTY = \"CART_EMPTY\"\n\n    # \u8a02\u55ae\u932f\u8aa4\n    ORDER_NOT_FOUND = \"ORDER_NOT_FOUND\"\n    PAYMENT_FAILED = \"PAYMENT_FAILED\"\n\n# \u81ea\u5b9a\u7fa9\u7570\u5e38\nclass AppException(Exception):\n    def __init__(self, code: ErrorCode, message: str, status_code: int = 400):\n        self.code = code\n        self.message = message\n        self.status_code = status_code\n        super().__init__(self.message)\n\nclass ProductException(AppException):\n    \"\"\"\u7522\u54c1\u76f8\u95dc\u7570\u5e38\u7684\u57fa\u985e\"\"\"\n    pass\n\nclass ProductNotFoundError(ProductException):\n    def __init__(self, product_id: int):\n        super().__init__(\n            code=ErrorCode.PRODUCT_NOT_FOUND,\n            message=f\"Product with ID {product_id} not found\",\n            status_code=404\n        )\n\nclass ProductOutOfStockError(ProductException):\n    def __init__(self, product_id: int):\n        super().__init__(\n            code=ErrorCode.PRODUCT_OUT_OF_STOCK,\n            message=f\"Product with ID {product_id} is out of stock\",\n            status_code=400\n        )\n\n# \u6a21\u578b\nclass Product(BaseModel):\n    id: int\n    name: str\n    price: float\n    stock: int\n\nclass CartItem(BaseModel):\n    product_id: int\n    quantity: int\n\nclass Cart(BaseModel):\n    id: int\n    items: List[CartItem]\n\n# \u7522\u54c1\u8def\u7531\u5668\nproducts_router = APIRouter(\n    prefix=\"/products\",\n    tags=[\"products\"]\n)\n\n@products_router.get(\"/\", response_model=List[Product])\nasync def list_products():\n    # \u6a21\u64ec\u7522\u54c1\u5217\u8868\n    return [\n        {\"id\": 1, \"name\": \"Product 1\", \"price\": 10.0, \"stock\": 5},\n        {\"id\": 2, \"name\": \"Product 2\", \"price\": 20.0, \"stock\": 10},\n        {\"id\": 3, \"name\": \"Product 3\", \"price\": 30.0, \"stock\": 0}\n    ]\n\n@products_router.get(\"/{product_id}\", response_model=Product)\nasync def get_product(product_id: int):\n    # \u6a21\u64ec\u7522\u54c1\u67e5\u8a62\n    if product_id &lt;= 0 or product_id &gt; 3:\n        raise ProductNotFoundError(product_id)\n\n    products = {\n        1: {\"id\": 1, \"name\": \"Product 1\", \"price\": 10.0, \"stock\": 5},\n        2: {\"id\": 2, \"name\": \"Product 2\", \"price\": 20.0, \"stock\": 10},\n        3: {\"id\": 3, \"name\": \"Product 3\", \"price\": 30.0, \"stock\": 0}\n    }\n\n    return products[product_id]\n\n# \u8cfc\u7269\u8eca\u8def\u7531\u5668\ncart_router = APIRouter(\n    prefix=\"/cart\",\n    tags=[\"cart\"]\n)\n\n@cart_router.post(\"/add/{product_id}\")\nasync def add_to_cart(product_id: int, quantity: int = 1):\n    # \u6a21\u64ec\u6dfb\u52a0\u5230\u8cfc\u7269\u8eca\n    if product_id &lt;= 0 or product_id &gt; 3:\n        raise ProductNotFoundError(product_id)\n\n    products = {\n        1: {\"id\": 1, \"name\": \"Product 1\", \"price\": 10.0, \"stock\": 5},\n        2: {\"id\": 2, \"name\": \"Product 2\", \"price\": 20.0, \"stock\": 10},\n        3: {\"id\": 3, \"name\": \"Product 3\", \"price\": 30.0, \"stock\": 0}\n    }\n\n    if products[product_id][\"stock\"] == 0:\n        raise ProductOutOfStockError(product_id)\n\n    if quantity &gt; products[product_id][\"stock\"]:\n        raise AppException(\n            code=ErrorCode.PRODUCT_OUT_OF_STOCK,\n            message=f\"Not enough stock for product {product_id}. Requested: {quantity}, Available: {products[product_id]['stock']}\",\n            status_code=400\n        )\n\n    return {\"status\": \"success\", \"message\": f\"Added {quantity} of product {product_id} to cart\"}\n\n# \u5275\u5efa\u4e3b\u61c9\u7528\napp = FastAPI(title=\"E-Commerce API\")\n\n# \u61c9\u7528\u7d1a\u5225\u7684\u7570\u5e38\u8655\u7406\u5668\n@app.exception_handler(AppException)\nasync def app_exception_handler(request: Request, exc: AppException):\n    logger.error(f\"App exception: {exc.code} - {exc.message}\")\n    return JSONResponse(\n        status_code=exc.status_code,\n        content={\n            \"status\": \"error\",\n            \"code\": exc.code,\n            \"message\": exc.message\n        }\n    )\n\n# \u7522\u54c1\u7570\u5e38\u8655\u7406\u5668\n@app.exception_handler(ProductException)\nasync def product_exception_handler(request: Request, exc: ProductException):\n    logger.error(f\"Product exception: {exc.code} - {exc.message}\")\n    return JSONResponse(\n        status_code=exc.status_code,\n        content={\n            \"status\": \"error\",\n            \"code\": exc.code,\n            \"message\": exc.message,\n            \"entity_type\": \"product\"\n        }\n    )\n\n# \u5305\u542b\u8def\u7531\u5668\napp.include_router(products_router)\napp.include_router(cart_router)\n</code></pre> <p>\u5728\u9019\u500b\u4f8b\u5b50\u4e2d\uff0c\u6211\u5011\u5275\u5efa\u4e86\u4e00\u500b\u7c21\u55ae\u7684\u96fb\u5b50\u5546\u52d9 API\uff0c\u5305\u542b\u7522\u54c1\u548c\u8cfc\u7269\u8eca\u8def\u7531\u5668\u3002\u6211\u5011\u5b9a\u7fa9\u4e86\u7279\u5b9a\u9818\u57df\u7684\u7570\u5e38\uff0c\u5982 <code>ProductNotFoundError</code> \u548c <code>ProductOutOfStockError</code>\uff0c\u4e26\u5728\u61c9\u7528\u7d1a\u5225\u8a3b\u518a\u4e86\u7570\u5e38\u8655\u7406\u5668\u3002</p>"},{"location":"error-handling/05-api-routing/#_18","title":"\u7e3d\u7d50","text":"<p>APIRouter \u662f\u7d44\u7e54\u5927\u578b FastAPI \u61c9\u7528\u7684\u5f37\u5927\u5de5\u5177\uff0c\u8207\u7570\u5e38\u8655\u7406\u7d50\u5408\u4f7f\u7528\u6642\uff0c\u53ef\u4ee5\u5be6\u73fe\u66f4\u6a21\u584a\u5316\u3001\u66f4\u53ef\u7dad\u8b77\u7684\u4ee3\u78bc\uff1a</p> <ul> <li>\u6a21\u584a\u5316\u8def\u7531\uff1a\u5c07\u76f8\u95dc\u7aef\u9ede\u7d44\u7e54\u5230\u4e0d\u540c\u7684\u8def\u7531\u5668\u4e2d\uff0c\u4f7f\u4ee3\u78bc\u7d50\u69cb\u66f4\u6e05\u6670</li> <li>\u8def\u7531\u5668\u7d1a\u5225\u7684\u7570\u5e38\u8655\u7406\uff1a\u70ba\u7279\u5b9a\u8def\u7531\u5668\u5b9a\u7fa9\u5c08\u9580\u7684\u7570\u5e38\u8655\u7406\u5668\uff0c\u8655\u7406\u9818\u57df\u7279\u5b9a\u7684\u7570\u5e38</li> <li>\u7570\u5e38\u8655\u7406\u512a\u5148\u9806\u5e8f\uff1a\u8def\u7531\u5668\u7d1a\u5225\u7684\u8655\u7406\u5668\u512a\u5148\u65bc\u61c9\u7528\u7d1a\u5225\u7684\u8655\u7406\u5668\uff0c\u63d0\u4f9b\u66f4\u7cbe\u7d30\u7684\u63a7\u5236</li> <li>\u4f9d\u8cf4\u9805\u8207\u7570\u5e38\u8655\u7406\uff1a\u4f7f\u7528\u8def\u7531\u5668\u4f9d\u8cf4\u9805\u5be6\u73fe\u6a6b\u5207\u95dc\u6ce8\u9ede\uff0c\u5982\u8eab\u4efd\u9a57\u8b49\u548c\u6388\u6b0a</li> <li>\u6a19\u6e96\u5316\u932f\u8aa4\u78bc\uff1a\u5728\u6240\u6709\u8def\u7531\u5668\u4e2d\u4f7f\u7528\u4e00\u81f4\u7684\u932f\u8aa4\u78bc\uff0c\u63d0\u9ad8 API \u7684\u4e00\u81f4\u6027</li> <li>\u6a21\u584a\u5316\u7570\u5e38\u5b9a\u7fa9\uff1a\u5c07\u7570\u5e38\u5b9a\u7fa9\u548c\u8655\u7406\u908f\u8f2f\u6a21\u584a\u5316\uff0c\u4fbf\u65bc\u5728\u591a\u500b\u8def\u7531\u5668\u4e4b\u9593\u5171\u4eab</li> <li>\u9818\u57df\u7279\u5b9a\u7570\u5e38\uff1a\u70ba\u6bcf\u500b\u696d\u52d9\u9818\u57df\u5b9a\u7fa9\u7279\u5b9a\u7684\u7570\u5e38\uff0c\u66f4\u6e96\u78ba\u5730\u53cd\u6620\u932f\u8aa4\u60c5\u6cc1</li> </ul>"},{"location":"error-handling/06-best-practice/","title":"\u7570\u5e38\u8655\u7406: \u6700\u4f73\u5be6\u8e10","text":"<p>\u672c\u7ae0\u5c07\u63a2\u8a0e FastAPI \u7570\u5e38\u8655\u7406\u7684\u6700\u4f73\u5be6\u8e10\uff0c\u5305\u62ec\u8a2d\u8a08\u539f\u5247\u3001\u6027\u80fd\u8003\u91cf\u3001\u5b89\u5168\u6027\u5efa\u8b70\u548c\u7dad\u8b77\u7b56\u7565\u7b49\uff0c\u5e6b\u52a9\u60a8\u69cb\u5efa\u9ad8\u8cea\u91cf\u3001\u53ef\u7dad\u8b77\u7684\u7570\u5e38\u8655\u7406\u7cfb\u7d71\u3002</p>"},{"location":"error-handling/06-best-practice/#_2","title":"\u7570\u5e38\u8655\u7406\u8a2d\u8a08\u539f\u5247","text":"<p>\u8a2d\u8a08\u826f\u597d\u7684\u7570\u5e38\u8655\u7406\u7cfb\u7d71\u61c9\u9075\u5faa\u4ee5\u4e0b\u539f\u5247\uff1a</p>"},{"location":"error-handling/06-best-practice/#_3","title":"\u4e00\u81f4\u6027\u539f\u5247","text":"<p>API \u7684\u932f\u8aa4\u97ff\u61c9\u61c9\u4fdd\u6301\u4e00\u81f4\u7684\u683c\u5f0f\u548c\u8a9e\u7fa9\uff0c\u8b93\u5ba2\u6236\u7aef\u80fd\u5920\u53ef\u9760\u5730\u8655\u7406\u932f\u8aa4\u3002</p> <pre><code>from fastapi import FastAPI, HTTPException, Request\nfrom fastapi.responses import JSONResponse\nfrom pydantic import BaseModel\nfrom enum import Enum\nfrom typing import Optional, Dict, Any\nimport uuid\n\n# \u932f\u8aa4\u78bc\u679a\u8209\nclass ErrorCode(str, Enum):\n    VALIDATION_ERROR = \"VALIDATION_ERROR\"\n    AUTHENTICATION_ERROR = \"AUTHENTICATION_ERROR\"\n    RESOURCE_NOT_FOUND = \"RESOURCE_NOT_FOUND\"\n    INTERNAL_SERVER_ERROR = \"INTERNAL_SERVER_ERROR\"\n\n# \u932f\u8aa4\u97ff\u61c9\u6a21\u578b\nclass ErrorResponse(BaseModel):\n    status: str = \"error\"\n    code: ErrorCode\n    message: str\n    details: Optional[Dict[str, Any]] = None\n    request_id: str\n\napp = FastAPI()\n\n# \u5168\u5c40\u7570\u5e38\u8655\u7406\u5668\n@app.exception_handler(Exception)\nasync def global_exception_handler(request: Request, exc: Exception):\n    # \u751f\u6210\u8acb\u6c42 ID\n    request_id = getattr(request.state, \"request_id\", str(uuid.uuid4()))\n\n    # \u8fd4\u56de\u4e00\u81f4\u7684\u932f\u8aa4\u97ff\u61c9\n    return JSONResponse(\n        status_code=500,\n        content=ErrorResponse(\n            code=ErrorCode.INTERNAL_SERVER_ERROR,\n            message=\"An unexpected error occurred\",\n            details=None,\n            request_id=request_id\n        ).dict()\n    )\n</code></pre>"},{"location":"error-handling/06-best-practice/#_4","title":"\u5206\u5c64\u539f\u5247","text":"<p>\u5c07\u7570\u5e38\u8655\u7406\u5206\u70ba\u591a\u500b\u5c64\u6b21\uff0c\u6bcf\u500b\u5c64\u6b21\u8655\u7406\u7279\u5b9a\u985e\u578b\u7684\u7570\u5e38\u3002</p> <pre><code># 1. \u61c9\u7528\u5c64\u7570\u5e38 - \u8655\u7406\u696d\u52d9\u908f\u8f2f\u932f\u8aa4\nclass AppException(Exception):\n    def __init__(self, code: ErrorCode, message: str, status_code: int = 400, details: Optional[Dict[str, Any]] = None):\n        self.code = code\n        self.message = message\n        self.status_code = status_code\n        self.details = details\n        super().__init__(self.message)\n\n# 2. \u57fa\u790e\u8a2d\u65bd\u5c64\u7570\u5e38 - \u8655\u7406\u6578\u64da\u5eab\u3001\u7de9\u5b58\u7b49\u932f\u8aa4\nclass InfrastructureException(Exception):\n    def __init__(self, code: ErrorCode, message: str, status_code: int = 500, details: Optional[Dict[str, Any]] = None):\n        self.code = code\n        self.message = message\n        self.status_code = status_code\n        self.details = details\n        super().__init__(self.message)\n\n# \u7570\u5e38\u8655\u7406\u5668\n@app.exception_handler(AppException)\nasync def app_exception_handler(request: Request, exc: AppException):\n    request_id = getattr(request.state, \"request_id\", str(uuid.uuid4()))\n    return JSONResponse(\n        status_code=exc.status_code,\n        content=ErrorResponse(\n            code=exc.code,\n            message=exc.message,\n            details=exc.details,\n            request_id=request_id\n        ).dict()\n    )\n</code></pre>"},{"location":"error-handling/06-best-practice/#_5","title":"\u4fe1\u606f\u96b1\u85cf\u539f\u5247","text":"<p>\u5728\u751f\u7522\u74b0\u5883\u4e2d\uff0c\u4e0d\u61c9\u5411\u5ba2\u6236\u7aef\u66b4\u9732\u654f\u611f\u7684\u932f\u8aa4\u8a73\u60c5\uff0c\u5982\u5806\u68e7\u8ddf\u8e64\u3001\u670d\u52d9\u5668\u8def\u5f91\u7b49\u3002</p> <pre><code>from fastapi import FastAPI, Request\nimport logging\nimport traceback\nimport os\n\napp = FastAPI()\n\n# \u74b0\u5883\u914d\u7f6e\nDEBUG = os.getenv(\"DEBUG\", \"False\").lower() == \"true\"\n\n# \u5168\u5c40\u7570\u5e38\u8655\u7406\u5668\n@app.exception_handler(Exception)\nasync def global_exception_handler(request: Request, exc: Exception):\n    # \u751f\u6210\u8acb\u6c42 ID\n    request_id = getattr(request.state, \"request_id\", str(uuid.uuid4()))\n\n    # \u8a18\u9304\u5b8c\u6574\u7684\u7570\u5e38\u4fe1\u606f\n    logging.error(f\"Unhandled exception: {str(exc)}\", exc_info=True)\n\n    # \u6839\u64da\u74b0\u5883\u8fd4\u56de\u4e0d\u540c\u7d1a\u5225\u7684\u932f\u8aa4\u4fe1\u606f\n    if DEBUG:\n        # \u958b\u767c\u74b0\u5883\uff1a\u8fd4\u56de\u8a73\u7d30\u932f\u8aa4\u4fe1\u606f\n        return JSONResponse(\n            status_code=500,\n            content={\n                \"status\": \"error\",\n                \"message\": str(exc),\n                \"exception_type\": exc.__class__.__name__,\n                \"traceback\": traceback.format_exc().split(\"\\n\"),\n                \"request_id\": request_id\n            }\n        )\n    else:\n        # \u751f\u7522\u74b0\u5883\uff1a\u8fd4\u56de\u6709\u9650\u7684\u932f\u8aa4\u4fe1\u606f\n        return JSONResponse(\n            status_code=500,\n            content=ErrorResponse(\n                code=ErrorCode.INTERNAL_SERVER_ERROR,\n                message=\"An unexpected error occurred\",\n                details=None,\n                request_id=request_id\n            ).dict()\n        )\n</code></pre>"},{"location":"error-handling/06-best-practice/#_6","title":"\u660e\u78ba\u6027\u539f\u5247","text":"<p>\u932f\u8aa4\u6d88\u606f\u61c9\u6e05\u6670\u660e\u78ba\uff0c\u5e6b\u52a9\u5ba2\u6236\u7aef\u7406\u89e3\u767c\u751f\u4e86\u4ec0\u9ebc\u4ee5\u53ca\u5982\u4f55\u89e3\u6c7a\u554f\u984c\u3002</p> <pre><code># \u4e0d\u597d\u7684\u932f\u8aa4\u6d88\u606f\n@app.get(\"/users/{user_id}/bad\")\nasync def get_user_bad(user_id: str):\n    if not user_id:\n        raise HTTPException(status_code=400, detail=\"Error\")\n    # ...\n\n# \u597d\u7684\u932f\u8aa4\u6d88\u606f\n@app.get(\"/users/{user_id}/good\")\nasync def get_user_good(user_id: str):\n    if not user_id:\n        raise HTTPException(\n            status_code=400, \n            detail=\"User ID cannot be empty\"\n        )\n    # ...\n\n# \u66f4\u597d\u7684\u932f\u8aa4\u6d88\u606f\nclass UserInputError(AppException):\n    def __init__(self, field: str, reason: str, value: Any = None):\n        details = {\n            \"field\": field,\n            \"reason\": reason\n        }\n        if value is not None:\n            details[\"provided_value\"] = str(value)\n\n        super().__init__(\n            code=ErrorCode.VALIDATION_ERROR,\n            message=f\"Invalid input for field '{field}': {reason}\",\n            status_code=400,\n            details=details\n        )\n</code></pre>"},{"location":"error-handling/06-best-practice/#_7","title":"\u6027\u80fd\u8003\u91cf","text":"<p>\u7570\u5e38\u8655\u7406\u6703\u5f71\u97ff\u61c9\u7528\u7684\u6027\u80fd\uff0c\u9700\u8981\u8003\u616e\u4ee5\u4e0b\u56e0\u7d20\uff1a</p>"},{"location":"error-handling/06-best-practice/#_8","title":"\u907f\u514d\u904e\u5ea6\u4f7f\u7528\u7570\u5e38","text":"<p>\u7570\u5e38\u61c9\u8a72\u7528\u65bc\u8655\u7406\u7570\u5e38\u60c5\u6cc1\uff0c\u800c\u4e0d\u662f\u6b63\u5e38\u7684\u63a7\u5236\u6d41\u7a0b\u3002</p> <pre><code># \u4e0d\u597d\u7684\u505a\u6cd5\uff1a\u4f7f\u7528\u7570\u5e38\u9032\u884c\u6b63\u5e38\u7684\u63a7\u5236\u6d41\u7a0b\n@app.get(\"/users/{username}\")\nasync def get_user_by_username_bad(username: str):\n    try:\n        user = await find_user_by_username(username)\n        return user\n    except UserNotFoundError:\n        return {\"username\": username, \"status\": \"new\"}\n\n# \u597d\u7684\u505a\u6cd5\uff1a\u4f7f\u7528\u689d\u4ef6\u908f\u8f2f\u9032\u884c\u6b63\u5e38\u7684\u63a7\u5236\u6d41\u7a0b\n@app.get(\"/users/{username}\")\nasync def get_user_by_username_good(username: str):\n    user = await find_user_by_username(username)\n    if user is None:\n        return {\"username\": username, \"status\": \"new\"}\n    return user\n</code></pre>"},{"location":"error-handling/06-best-practice/#_9","title":"\u512a\u5316\u7570\u5e38\u8655\u7406\u5668","text":"<p>\u7570\u5e38\u8655\u7406\u5668\u61c9\u8a72\u9ad8\u6548\uff0c\u907f\u514d\u57f7\u884c\u8907\u96dc\u7684\u908f\u8f2f\u3002</p> <pre><code># \u4e0d\u597d\u7684\u505a\u6cd5\uff1a\u7570\u5e38\u8655\u7406\u5668\u4e2d\u57f7\u884c\u8907\u96dc\u908f\u8f2f\n@app.exception_handler(HTTPException)\nasync def http_exception_handler_bad(request: Request, exc: HTTPException):\n    # \u4e0d\u5fc5\u8981\u7684\u8907\u96dc\u8655\u7406\n    await complex_logging_logic(request, exc)  # \u53ef\u80fd\u5c0e\u81f4\u6027\u80fd\u554f\u984c\n    await notify_admin(exc)  # \u540c\u6b65\u901a\u77e5\u7ba1\u7406\u54e1\n\n    # \u751f\u6210\u97ff\u61c9\n    return JSONResponse(\n        status_code=exc.status_code,\n        content={\"detail\": exc.detail}\n    )\n\n# \u597d\u7684\u505a\u6cd5\uff1a\u7570\u5e38\u8655\u7406\u5668\u4fdd\u6301\u7c21\u6f54\uff0c\u5c07\u8907\u96dc\u908f\u8f2f\u653e\u5165\u80cc\u666f\u4efb\u52d9\n@app.exception_handler(HTTPException)\nasync def http_exception_handler_good(request: Request, exc: HTTPException):\n    # \u8a18\u9304\u57fa\u672c\u4fe1\u606f\n    request_id = getattr(request.state, \"request_id\", str(uuid.uuid4()))\n\n    # \u555f\u52d5\u80cc\u666f\u4efb\u52d9\u8655\u7406\u8907\u96dc\u908f\u8f2f\n    if exc.status_code &gt;= 500:\n        background_tasks = BackgroundTasks()\n        background_tasks.add_task(complex_logging_logic, request, exc)\n\n    # \u5feb\u901f\u751f\u6210\u97ff\u61c9\n    return JSONResponse(\n        status_code=exc.status_code,\n        content={\"detail\": exc.detail, \"request_id\": request_id}\n    )\n</code></pre>"},{"location":"error-handling/06-best-practice/#_10","title":"\u4f7f\u7528\u9069\u7576\u7684\u65e5\u8a8c\u7d1a\u5225","text":"<p>\u6839\u64da\u7570\u5e38\u7684\u56b4\u91cd\u6027\u4f7f\u7528\u9069\u7576\u7684\u65e5\u8a8c\u7d1a\u5225\uff0c\u907f\u514d\u65e5\u8a8c\u7cfb\u7d71\u6210\u70ba\u6027\u80fd\u74f6\u9838\u3002</p> <pre><code>import logging\n\n# \u914d\u7f6e\u65e5\u8a8c\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\n# \u7570\u5e38\u8655\u7406\u5668\n@app.exception_handler(HTTPException)\nasync def http_exception_handler(request: Request, exc: HTTPException):\n    # \u6839\u64da\u72c0\u614b\u78bc\u4f7f\u7528\u4e0d\u540c\u7684\u65e5\u8a8c\u7d1a\u5225\n    if exc.status_code &gt;= 500:\n        # \u670d\u52d9\u5668\u932f\u8aa4\uff1a\u4f7f\u7528 ERROR \u7d1a\u5225\n        logger.error(f\"Server error: {exc.detail}\", exc_info=True)\n    elif exc.status_code &gt;= 400:\n        # \u5ba2\u6236\u7aef\u932f\u8aa4\uff1a\u4f7f\u7528 WARNING \u7d1a\u5225\n        logger.warning(f\"Client error: {exc.detail}\")\n    else:\n        # \u5176\u4ed6\uff1a\u4f7f\u7528 INFO \u7d1a\u5225\n        logger.info(f\"HTTP exception: {exc.detail}\")\n\n    # \u8fd4\u56de\u97ff\u61c9\n    return JSONResponse(\n        status_code=exc.status_code,\n        content={\"detail\": exc.detail}\n    )\n</code></pre>"},{"location":"error-handling/06-best-practice/#_11","title":"\u5b89\u5168\u6027\u5efa\u8b70","text":"<p>\u7570\u5e38\u8655\u7406\u8207\u61c9\u7528\u5b89\u5168\u5bc6\u5207\u76f8\u95dc\uff0c\u9700\u8981\u6ce8\u610f\u4ee5\u4e0b\u5b89\u5168\u5efa\u8b70\uff1a</p>"},{"location":"error-handling/06-best-practice/#_12","title":"\u907f\u514d\u66b4\u9732\u654f\u611f\u4fe1\u606f","text":"<p>\u932f\u8aa4\u97ff\u61c9\u4e0d\u61c9\u5305\u542b\u654f\u611f\u4fe1\u606f\uff0c\u5982\u5bc6\u78bc\u3001API \u5bc6\u9470\u3001\u5167\u90e8\u8def\u5f91\u7b49\u3002</p> <pre><code># \u4e0d\u5b89\u5168\u7684\u505a\u6cd5\uff1a\u66b4\u9732\u654f\u611f\u4fe1\u606f\n@app.post(\"/login\")\nasync def login_unsafe(username: str, password: str):\n    try:\n        # \u5617\u8a66\u767b\u9304\n        user = authenticate(username, password)\n        return {\"token\": generate_token(user)}\n    except Exception as e:\n        # \u4e0d\u5b89\u5168\uff1a\u53ef\u80fd\u66b4\u9732\u5bc6\u78bc\u6216\u5176\u4ed6\u654f\u611f\u4fe1\u606f\n        raise HTTPException(\n            status_code=400,\n            detail=f\"Login failed: {str(e)}, username={username}, password={password}\"\n        )\n\n# \u5b89\u5168\u7684\u505a\u6cd5\uff1a\u4e0d\u66b4\u9732\u654f\u611f\u4fe1\u606f\n@app.post(\"/login\")\nasync def login_safe(username: str, password: str):\n    try:\n        # \u5617\u8a66\u767b\u9304\n        user = authenticate(username, password)\n        return {\"token\": generate_token(user)}\n    except AuthenticationError:\n        # \u5b89\u5168\uff1a\u63d0\u4f9b\u6709\u9650\u7684\u932f\u8aa4\u4fe1\u606f\n        raise HTTPException(\n            status_code=401,\n            detail=\"Invalid username or password\"\n        )\n    except Exception as e:\n        # \u8a18\u9304\u8a73\u7d30\u932f\u8aa4\uff0c\u4f46\u4e0d\u8fd4\u56de\u7d66\u5ba2\u6236\u7aef\n        logging.error(f\"Login error: {str(e)}\", exc_info=True)\n        raise HTTPException(\n            status_code=500,\n            detail=\"An error occurred during login\"\n        )\n</code></pre>"},{"location":"error-handling/06-best-practice/#_13","title":"\u9632\u6b62\u4fe1\u606f\u6d29\u9732","text":"<p>\u932f\u8aa4\u97ff\u61c9\u4e0d\u61c9\u900f\u9732\u7cfb\u7d71\u7684\u5167\u90e8\u7d50\u69cb\u6216\u5be6\u73fe\u7d30\u7bc0\u3002</p> <pre><code># \u4e0d\u5b89\u5168\u7684\u505a\u6cd5\uff1a\u66b4\u9732\u7cfb\u7d71\u7d30\u7bc0\n@app.exception_handler(Exception)\nasync def global_exception_handler_unsafe(request: Request, exc: Exception):\n    # \u4e0d\u5b89\u5168\uff1a\u66b4\u9732\u4e86\u5806\u68e7\u8ddf\u8e64\u548c\u670d\u52d9\u5668\u8def\u5f91\n    return JSONResponse(\n        status_code=500,\n        content={\n            \"error\": str(exc),\n            \"traceback\": traceback.format_exc(),\n            \"server_path\": os.path.abspath(__file__),\n            \"python_version\": sys.version\n        }\n    )\n\n# \u5b89\u5168\u7684\u505a\u6cd5\uff1a\u96b1\u85cf\u7cfb\u7d71\u7d30\u7bc0\n@app.exception_handler(Exception)\nasync def global_exception_handler_safe(request: Request, exc: Exception):\n    # \u8a18\u9304\u8a73\u7d30\u4fe1\u606f\uff0c\u4f46\u4e0d\u8fd4\u56de\u7d66\u5ba2\u6236\u7aef\n    error_id = str(uuid.uuid4())\n    logging.error(f\"Error ID: {error_id}\", exc_info=True)\n\n    # \u8fd4\u56de\u6709\u9650\u7684\u932f\u8aa4\u4fe1\u606f\n    return JSONResponse(\n        status_code=500,\n        content={\n            \"detail\": \"An unexpected error occurred\",\n            \"error_id\": error_id\n        }\n    )\n</code></pre>"},{"location":"error-handling/06-best-practice/#_14","title":"\u9632\u6b62\u679a\u8209\u653b\u64ca","text":"<p>\u907f\u514d\u901a\u904e\u932f\u8aa4\u97ff\u61c9\u6d29\u9732\u8cc7\u6e90\u662f\u5426\u5b58\u5728\u7684\u4fe1\u606f\u3002</p> <pre><code># \u4e0d\u5b89\u5168\u7684\u505a\u6cd5\uff1a\u53ef\u80fd\u5c0e\u81f4\u679a\u8209\u653b\u64ca\n@app.get(\"/users/{user_id}\")\nasync def get_user_unsafe(user_id: str):\n    user = await find_user(user_id)\n    if user is None:\n        # \u4e0d\u5b89\u5168\uff1a\u78ba\u8a8d\u4e86\u7279\u5b9a ID \u7684\u7528\u6236\u4e0d\u5b58\u5728\n        raise HTTPException(\n            status_code=404,\n            detail=f\"User with ID {user_id} does not exist\"\n        )\n    return user\n\n# \u5b89\u5168\u7684\u505a\u6cd5\uff1a\u4f7f\u7528\u4e00\u81f4\u7684\u932f\u8aa4\u6d88\u606f\n@app.get(\"/users/{user_id}\")\nasync def get_user_safe(user_id: str):\n    user = await find_user(user_id)\n    if user is None:\n        # \u5b89\u5168\uff1a\u4f7f\u7528\u4e00\u81f4\u7684\u932f\u8aa4\u6d88\u606f\n        raise HTTPException(\n            status_code=404,\n            detail=\"User not found\"\n        )\n    return user\n</code></pre>"},{"location":"error-handling/06-best-practice/#_15","title":"\u5b89\u5168\u7684\u932f\u8aa4\u8655\u7406\u4e2d\u9593\u4ef6","text":"<p>\u5be6\u73fe\u4e00\u500b\u5b89\u5168\u7684\u932f\u8aa4\u8655\u7406\u4e2d\u9593\u4ef6\uff0c\u7d71\u4e00\u8655\u7406\u5b89\u5168\u76f8\u95dc\u7684\u7570\u5e38\u3002</p> <pre><code>from fastapi import FastAPI, Request, HTTPException\nfrom fastapi.responses import JSONResponse\nfrom fastapi.middleware.base import BaseHTTPMiddleware\nimport uuid\n\napp = FastAPI()\n\n# \u5b89\u5168\u932f\u8aa4\u8655\u7406\u4e2d\u9593\u4ef6\nclass SecurityMiddleware(BaseHTTPMiddleware):\n    async def dispatch(self, request: Request, call_next):\n        # \u751f\u6210\u8acb\u6c42 ID\n        request_id = str(uuid.uuid4())\n        request.state.request_id = request_id\n\n        # \u6dfb\u52a0\u5b89\u5168\u76f8\u95dc\u7684\u97ff\u61c9\u982d\n        headers = {\n            \"X-Request-ID\": request_id,\n            \"X-Content-Type-Options\": \"nosniff\",\n            \"X-Frame-Options\": \"DENY\"\n        }\n\n        try:\n            # \u8655\u7406\u8acb\u6c42\n            response = await call_next(request)\n\n            # \u6dfb\u52a0\u5b89\u5168\u982d\u5230\u97ff\u61c9\n            for key, value in headers.items():\n                response.headers[key] = value\n\n            return response\n\n        except Exception as exc:\n            # \u8655\u7406\u672a\u6355\u7372\u7684\u7570\u5e38\n            logging.error(f\"Unhandled exception: {str(exc)}\", exc_info=True)\n\n            return JSONResponse(\n                status_code=500,\n                content={\n                    \"detail\": \"An unexpected error occurred\",\n                    \"request_id\": request_id\n                },\n                headers=headers\n            )\n\n# \u6dfb\u52a0\u4e2d\u9593\u4ef6\napp.add_middleware(SecurityMiddleware)\n</code></pre>"},{"location":"error-handling/06-best-practice/#_16","title":"\u53ef\u7dad\u8b77\u6027\u7b56\u7565","text":"<p>\u8a2d\u8a08\u6613\u65bc\u7dad\u8b77\u7684\u7570\u5e38\u8655\u7406\u7cfb\u7d71\uff0c\u53ef\u4ee5\u63d0\u9ad8\u958b\u767c\u6548\u7387\u548c\u4ee3\u78bc\u8cea\u91cf\u3002</p>"},{"location":"error-handling/06-best-practice/#_17","title":"\u96c6\u4e2d\u5f0f\u7570\u5e38\u5b9a\u7fa9","text":"<p>\u5c07\u6240\u6709\u7570\u5e38\u985e\u578b\u96c6\u4e2d\u5b9a\u7fa9\u5728\u4e00\u500b\u6a21\u584a\u4e2d\uff0c\u4fbf\u65bc\u7ba1\u7406\u548c\u7dad\u8b77\u3002</p> <pre><code># exceptions.py\nfrom enum import Enum\nfrom typing import Optional, Dict, Any\n\n# \u932f\u8aa4\u78bc\u679a\u8209\nclass ErrorCode(str, Enum):\n    VALIDATION_ERROR = \"VALIDATION_ERROR\"\n    AUTHENTICATION_ERROR = \"AUTHENTICATION_ERROR\"\n    AUTHORIZATION_ERROR = \"AUTHORIZATION_ERROR\"\n    RESOURCE_NOT_FOUND = \"RESOURCE_NOT_FOUND\"\n    INTERNAL_SERVER_ERROR = \"INTERNAL_SERVER_ERROR\"\n\n# \u57fa\u790e\u7570\u5e38\u985e\nclass AppException(Exception):\n    def __init__(\n        self, \n        code: ErrorCode, \n        message: str, \n        status_code: int = 400, \n        details: Optional[Dict[str, Any]] = None\n    ):\n        self.code = code\n        self.message = message\n        self.status_code = status_code\n        self.details = details\n        super().__init__(self.message)\n\n# \u9a57\u8b49\u7570\u5e38\nclass ValidationError(AppException):\n    def __init__(self, message: str, details: Optional[Dict[str, Any]] = None):\n        super().__init__(\n            code=ErrorCode.VALIDATION_ERROR,\n            message=message,\n            status_code=422,\n            details=details\n        )\n\n# \u8a8d\u8b49\u7570\u5e38\nclass AuthenticationError(AppException):\n    def __init__(self, message: str = \"Authentication failed\"):\n        super().__init__(\n            code=ErrorCode.AUTHENTICATION_ERROR,\n            message=message,\n            status_code=401\n        )\n\n# \u8cc7\u6e90\u4e0d\u5b58\u5728\u7570\u5e38\nclass ResourceNotFoundError(AppException):\n    def __init__(self, resource_type: str, resource_id: str):\n        super().__init__(\n            code=ErrorCode.RESOURCE_NOT_FOUND,\n            message=f\"{resource_type} not found\",\n            status_code=404,\n            details={\"resource_type\": resource_type, \"resource_id\": resource_id}\n        )\n</code></pre>"},{"location":"error-handling/06-best-practice/#_18","title":"\u6a21\u584a\u5316\u7570\u5e38\u8655\u7406","text":"<p>\u5c07\u7570\u5e38\u8655\u7406\u908f\u8f2f\u6a21\u584a\u5316\uff0c\u4fbf\u65bc\u5fa9\u7528\u548c\u6e2c\u8a66\u3002</p> <pre><code># handlers.py\nfrom fastapi import Request\nfrom fastapi.responses import JSONResponse\nimport logging\nimport uuid\nfrom .exceptions import AppException, ErrorCode\n\n# \u932f\u8aa4\u97ff\u61c9\u6a21\u578b\nclass ErrorResponse:\n    def __init__(\n        self,\n        code: ErrorCode,\n        message: str,\n        details: Optional[Dict[str, Any]] = None,\n        request_id: Optional[str] = None\n    ):\n        self.status = \"error\"\n        self.code = code\n        self.message = message\n        self.details = details\n        self.request_id = request_id or str(uuid.uuid4())\n\n    def dict(self):\n        return {\n            \"status\": self.status,\n            \"code\": self.code,\n            \"message\": self.message,\n            \"details\": self.details,\n            \"request_id\": self.request_id\n        }\n\n# \u61c9\u7528\u7570\u5e38\u8655\u7406\u5668\nasync def app_exception_handler(request: Request, exc: AppException):\n    # \u7372\u53d6\u8acb\u6c42 ID\n    request_id = getattr(request.state, \"request_id\", str(uuid.uuid4()))\n\n    # \u8a18\u9304\u932f\u8aa4\n    if exc.status_code &gt;= 500:\n        logging.error(f\"Application error: {exc.message}\", exc_info=True)\n\n    # \u8fd4\u56de\u932f\u8aa4\u97ff\u61c9\n    return JSONResponse(\n        status_code=exc.status_code,\n        content=ErrorResponse(\n            code=exc.code,\n            message=exc.message,\n            details=exc.details,\n            request_id=request_id\n        ).dict()\n    )\n\n# \u8a3b\u518a\u7570\u5e38\u8655\u7406\u5668\ndef register_exception_handlers(app: FastAPI):\n    app.add_exception_handler(AppException, app_exception_handler)\n    app.add_exception_handler(HTTPException, http_exception_handler)\n    app.add_exception_handler(Exception, global_exception_handler)\n</code></pre>"},{"location":"error-handling/06-best-practice/#_19","title":"\u4f7f\u7528\u5de5\u5ee0\u6a21\u5f0f\u5275\u5efa\u7570\u5e38","text":"<p>\u4f7f\u7528\u5de5\u5ee0\u6a21\u5f0f\u5275\u5efa\u7570\u5e38\uff0c\u53ef\u4ee5\u7c21\u5316\u7570\u5e38\u7684\u5275\u5efa\u548c\u7ba1\u7406\u3002</p> <pre><code># exception_factory.py\nfrom typing import Optional, Dict, Any\nfrom .exceptions import (\n    ResourceNotFoundError, ValidationError\n)\n\nclass ExceptionFactory:\n    @staticmethod\n    def resource_not_found(resource_type: str, resource_id: str) -&gt; ResourceNotFoundError:\n        return ResourceNotFoundError(resource_type, resource_id)\n\n    @staticmethod\n    def validation_error(message: str, details: Optional[Dict[str, Any]] = None) -&gt; ValidationError:\n        return ValidationError(message, details)\n\n# \u4f7f\u7528\u5de5\u5ee0\u5275\u5efa\u7570\u5e38\n@app.get(\"/users/{user_id}\")\nasync def get_user(user_id: str):\n    user = await find_user(user_id)\n    if user is None:\n        raise ExceptionFactory.resource_not_found(\"User\", user_id)\n    return user\n</code></pre>"},{"location":"error-handling/06-best-practice/#_20","title":"\u7570\u5e38\u8655\u7406\u6e2c\u8a66\u7b56\u7565","text":"<p>\u6e2c\u8a66\u7570\u5e38\u8655\u7406\u908f\u8f2f\u662f\u78ba\u4fdd\u61c9\u7528\u7a69\u5b9a\u6027\u7684\u95dc\u9375\u90e8\u5206\u3002</p> <pre><code># test_exceptions.py\nimport pytest\nfrom fastapi.testclient import TestClient\nfrom .main import app\nfrom .exceptions import ResourceNotFoundError\n\nclient = TestClient(app)\n\ndef test_resource_not_found_exception():\n    # \u6e2c\u8a66\u8cc7\u6e90\u4e0d\u5b58\u5728\u7570\u5e38\n    response = client.get(\"/users/999\")\n    assert response.status_code == 404\n    data = response.json()\n    assert data[\"status\"] == \"error\"\n    assert data[\"code\"] == \"RESOURCE_NOT_FOUND\"\n    assert \"User not found\" in data[\"message\"]\n    assert data[\"details\"][\"resource_id\"] == \"999\"\n\ndef test_validation_error():\n    # \u6e2c\u8a66\u9a57\u8b49\u932f\u8aa4\n    response = client.post(\"/users/\", json={\"email\": \"invalid-email\"})\n    assert response.status_code == 422\n    data = response.json()\n    assert data[\"status\"] == \"error\"\n    assert data[\"code\"] == \"VALIDATION_ERROR\"\n</code></pre>"},{"location":"error-handling/06-best-practice/#_21","title":"\u7570\u5e38\u8655\u7406\u6587\u6a94","text":"<p>\u70ba API \u7684\u7570\u5e38\u8655\u7406\u63d0\u4f9b\u6e05\u6670\u7684\u6587\u6a94\uff0c\u5e6b\u52a9\u5ba2\u6236\u7aef\u958b\u767c\u8005\u7406\u89e3\u548c\u8655\u7406\u932f\u8aa4\u3002</p> <pre><code>from fastapi import FastAPI, HTTPException\nfrom fastapi.openapi.utils import get_openapi\n\napp = FastAPI()\n\n# \u81ea\u5b9a\u7fa9 OpenAPI \u6a21\u5f0f\uff0c\u6dfb\u52a0\u932f\u8aa4\u97ff\u61c9\u6587\u6a94\ndef custom_openapi():\n    if app.openapi_schema:\n        return app.openapi_schema\n\n    openapi_schema = get_openapi(\n        title=\"My API\",\n        version=\"1.0.0\",\n        description=\"API with detailed error responses\",\n        routes=app.routes,\n    )\n\n    # \u6dfb\u52a0\u901a\u7528\u932f\u8aa4\u97ff\u61c9\u7d44\u4ef6\n    openapi_schema[\"components\"][\"schemas\"][\"HTTPValidationError\"] = {\n        \"properties\": {\n            \"status\": {\"type\": \"string\", \"example\": \"error\"},\n            \"code\": {\"type\": \"string\", \"example\": \"VALIDATION_ERROR\"},\n            \"message\": {\"type\": \"string\"},\n            \"details\": {\"type\": \"object\"},\n            \"request_id\": {\"type\": \"string\", \"format\": \"uuid\"}\n        },\n        \"type\": \"object\"\n    }\n\n    # \u70ba\u6bcf\u500b\u8def\u5f91\u6dfb\u52a0\u932f\u8aa4\u97ff\u61c9\n    for path in openapi_schema[\"paths\"]:\n        for method in openapi_schema[\"paths\"][path]:\n            # \u6dfb\u52a0 422 \u9a57\u8b49\u932f\u8aa4\n            openapi_schema[\"paths\"][path][method][\"responses\"][\"422\"] = {\n                \"description\": \"Validation Error\",\n                \"content\": {\n                    \"application/json\": {\n                        \"schema\": {\"$ref\": \"#/components/schemas/HTTPValidationError\"}\n                    }\n                }\n            }\n\n    app.openapi_schema = openapi_schema\n    return app.openapi_schema\n\napp.openapi = custom_openapi\n</code></pre>"},{"location":"error-handling/06-best-practice/#_22","title":"\u7570\u5e38\u76e3\u63a7\u8207\u5206\u6790","text":"<p>\u5be6\u65bd\u7570\u5e38\u76e3\u63a7\u548c\u5206\u6790\uff0c\u4ee5\u8b58\u5225\u548c\u89e3\u6c7a\u7cfb\u7d71\u4e2d\u7684\u554f\u984c\u3002</p> <pre><code>from fastapi import FastAPI, Request, HTTPException\nfrom fastapi.responses import JSONResponse\nimport time\nimport uuid\nimport logging\nfrom collections import Counter\n\napp = FastAPI()\n\n# \u7570\u5e38\u8a08\u6578\u5668\nerror_counter = Counter()\n\n# \u4e2d\u9593\u4ef6\uff1a\u8a18\u9304\u7570\u5e38\n@app.middleware(\"http\")\nasync def log_exceptions_middleware(request: Request, call_next):\n    start_time = time.time()\n    request_id = str(uuid.uuid4())\n    request.state.request_id = request_id\n\n    try:\n        response = await call_next(request)\n        return response\n    except Exception as exc:\n        # \u8a18\u9304\u7570\u5e38\n        error_type = exc.__class__.__name__\n        error_counter[error_type] += 1\n\n        # \u8a18\u9304\u8a73\u7d30\u4fe1\u606f\n        logging.error(\n            f\"Request {request_id} failed with {error_type}: {str(exc)}\",\n            exc_info=True,\n            extra={\n                \"request_id\": request_id,\n                \"path\": request.url.path,\n                \"method\": request.method,\n                \"processing_time\": time.time() - start_time\n            }\n        )\n\n        # \u91cd\u65b0\u62cb\u51fa\u7570\u5e38\uff0c\u8b93\u7570\u5e38\u8655\u7406\u5668\u8655\u7406\n        raise\n\n# \u76e3\u63a7\u7aef\u9ede\uff1a\u7372\u53d6\u7570\u5e38\u7d71\u8a08\n@app.get(\"/admin/errors/stats\")\nasync def get_error_stats():\n    return {\n        \"total_errors\": sum(error_counter.values()),\n        \"errors_by_type\": dict(error_counter)\n    }\n</code></pre>"},{"location":"error-handling/06-best-practice/#_23","title":"\u7e3d\u7d50","text":"<p>\u826f\u597d\u7684\u7570\u5e38\u8655\u7406\u662f\u69cb\u5efa\u53ef\u9760\u3001\u5b89\u5168\u548c\u7528\u6236\u53cb\u597d\u7684 API \u7684\u95dc\u9375\u3002\u901a\u904e\u9075\u5faa\u672c\u7ae0\u4ecb\u7d39\u7684\u6700\u4f73\u5be6\u8e10\uff0c\u60a8\u53ef\u4ee5\u8a2d\u8a08\u51fa\u9ad8\u8cea\u91cf\u7684\u7570\u5e38\u8655\u7406\u7cfb\u7d71\uff0c\u63d0\u9ad8\u61c9\u7528\u7684\u5065\u58ef\u6027\u548c\u53ef\u7dad\u8b77\u6027\u3002</p> <p>\u95dc\u9375\u8981\u9ede\uff1a</p> <ol> <li>\u4e00\u81f4\u6027: \u4fdd\u6301\u932f\u8aa4\u97ff\u61c9\u7684\u4e00\u81f4\u683c\u5f0f\u548c\u8a9e\u7fa9</li> <li>\u5206\u5c64: \u5c07\u7570\u5e38\u8655\u7406\u5206\u70ba\u591a\u500b\u5c64\u6b21</li> <li>\u5b89\u5168\u6027: \u907f\u514d\u66b4\u9732\u654f\u611f\u4fe1\u606f\u548c\u7cfb\u7d71\u7d30\u7bc0</li> <li>\u660e\u78ba\u6027: \u63d0\u4f9b\u6e05\u6670\u3001\u6709\u7528\u7684\u932f\u8aa4\u6d88\u606f</li> <li>\u6027\u80fd: \u512a\u5316\u7570\u5e38\u8655\u7406\u4ee5\u907f\u514d\u6027\u80fd\u554f\u984c</li> <li>\u53ef\u7dad\u8b77\u6027: \u4f7f\u7528\u6a21\u584a\u5316\u548c\u96c6\u4e2d\u5f0f\u7570\u5e38\u5b9a\u7fa9</li> <li>\u6e2c\u8a66: \u5168\u9762\u6e2c\u8a66\u7570\u5e38\u8655\u7406\u908f\u8f2f</li> <li>\u6587\u6a94: \u63d0\u4f9b\u8a73\u7d30\u7684\u932f\u8aa4\u97ff\u61c9\u6587\u6a94</li> <li>\u76e3\u63a7: \u5be6\u65bd\u7570\u5e38\u76e3\u63a7\u548c\u5206\u6790</li> </ol> <p>\u901a\u904e\u7d9c\u5408\u61c9\u7528\u9019\u4e9b\u6700\u4f73\u5be6\u8e10\uff0c\u60a8\u53ef\u4ee5\u69cb\u5efa\u51fa\u65e2\u5065\u58ef\u53c8\u6613\u65bc\u7dad\u8b77\u7684\u7570\u5e38\u8655\u7406\u7cfb\u7d71\uff0c\u70ba\u7528\u6236\u63d0\u4f9b\u826f\u597d\u7684\u9ad4\u9a57\uff0c\u540c\u6642\u4fdd\u8b77\u60a8\u7684\u61c9\u7528\u514d\u53d7\u6f5b\u5728\u7684\u5b89\u5168\u5a01\u8105\u3002</p>"},{"location":"middleware/01-introduction/","title":"FastAPI \u4e2d\u9593\u4ef6\u57fa\u790e","text":""},{"location":"middleware/01-introduction/#_1","title":"\u4ec0\u9ebc\u662f\u4e2d\u9593\u4ef6\uff1f","text":"<p>\u4e2d\u9593\u4ef6\uff08Middleware\uff09\u662f\u4e00\u500b\u8edf\u9ad4\u8a2d\u8a08\u6a21\u5f0f\uff0c\u5728 Web \u61c9\u7528\u7a0b\u5e8f\u4e2d\uff0c\u5b83\u4f4d\u65bc\u5ba2\u6236\u7aef\u8acb\u6c42\u548c\u4f3a\u670d\u5668\u8655\u7406\u4e4b\u9593\uff0c\u80fd\u5920\u6514\u622a\u3001\u8655\u7406\u548c\u4fee\u6539\u8acb\u6c42\u548c\u97ff\u61c9\u3002\u4e2d\u9593\u4ef6\u63d0\u4f9b\u4e86\u4e00\u7a2e\u6a5f\u5236\uff0c\u5141\u8a31\u958b\u767c\u8005\u5728\u4e0d\u4fee\u6539\u6838\u5fc3\u61c9\u7528\u908f\u8f2f\u7684\u60c5\u6cc1\u4e0b\uff0c\u6dfb\u52a0\u984d\u5916\u529f\u80fd\u6216\u8655\u7406\u6d41\u7a0b\u3002</p>"},{"location":"middleware/01-introduction/#_2","title":"\u4e2d\u9593\u4ef6\u7684\u6838\u5fc3\u7279\u9ede\uff1a","text":"<ul> <li>\u53ef\u63d2\u62d4\u6027\uff1a\u4e2d\u9593\u4ef6\u53ef\u4ee5\u8f15\u9b06\u6dfb\u52a0\u6216\u79fb\u9664\uff0c\u4e0d\u5f71\u97ff\u61c9\u7528\u7684\u5176\u4ed6\u90e8\u5206</li> <li>\u93c8\u5f0f\u8655\u7406\uff1a\u591a\u500b\u4e2d\u9593\u4ef6\u53ef\u4ee5\u6309\u9806\u5e8f\u7d44\u5408\u4f7f\u7528</li> <li>\u6a6b\u5207\u95dc\u6ce8\u9ede\uff1a\u8655\u7406\u8de8\u591a\u500b\u8acb\u6c42\u7684\u5171\u540c\u908f\u8f2f\uff08\u5982\u65e5\u8a8c\u3001\u8a8d\u8b49\u7b49\uff09</li> <li>\u975e\u4fb5\u5165\u6027\uff1a\u4e0d\u9700\u8981\u4fee\u6539\u73fe\u6709\u7684\u8def\u7531\u8655\u7406\u51fd\u6578</li> </ul>"},{"location":"middleware/01-introduction/#fastapi_1","title":"FastAPI \u4e2d\u7684\u4e2d\u9593\u4ef6","text":"<p>FastAPI \u57fa\u65bc Starlette \u6846\u67b6\u69cb\u5efa\uff0c\u56e0\u6b64\u7e7c\u627f\u4e86 Starlette \u7684\u4e2d\u9593\u4ef6\u7cfb\u7d71\u3002\u5728 FastAPI \u4e2d\uff0c\u4e2d\u9593\u4ef6\u662f\u4e00\u500b\u63a5\u6536\u8acb\u6c42\u4e26\u8fd4\u56de\u97ff\u61c9\u7684\u51fd\u6578\u6216\u985e\uff0c\u53ef\u4ee5\u5728\u8acb\u6c42\u5230\u9054\u8def\u7531\u8655\u7406\u51fd\u6578\u4e4b\u524d\u6216\u97ff\u61c9\u8fd4\u56de\u5ba2\u6236\u7aef\u4e4b\u524d\u57f7\u884c\u64cd\u4f5c\u3002</p> <pre><code>from fastapi import FastAPI, Request\nfrom fastapi.responses import Response\n\napp = FastAPI()\n\n@app.middleware(\"http\")\nasync def example_middleware(request: Request, call_next):\n    # \u5728\u8acb\u6c42\u8655\u7406\u524d\u7684\u908f\u8f2f\n    print(\"\u8655\u7406\u8acb\u6c42\u524d...\")\n\n    # \u8abf\u7528\u4e0b\u4e00\u500b\u4e2d\u9593\u4ef6\u6216\u8def\u7531\u8655\u7406\u51fd\u6578\n    response = await call_next(request)\n\n    # \u5728\u97ff\u61c9\u8fd4\u56de\u524d\u7684\u908f\u8f2f\n    print(\"\u8655\u7406\u97ff\u61c9\u524d...\")\n\n    return response\n</code></pre>"},{"location":"middleware/01-introduction/#_3","title":"\u4e2d\u9593\u4ef6\u5de5\u4f5c\u539f\u7406","text":"<p>FastAPI \u4e2d\u9593\u4ef6\u9075\u5faa ASGI\uff08Asynchronous Server Gateway Interface\uff09\u898f\u7bc4\uff0c\u652f\u6301\u540c\u6b65\u548c\u7570\u6b65\u8655\u7406\u6a21\u5f0f\u3002\u4e2d\u9593\u4ef6\u7684\u5de5\u4f5c\u539f\u7406\u53ef\u4ee5\u6982\u62ec\u70ba\uff1a</p> <ol> <li>\u63a5\u6536\u5ba2\u6236\u7aef\u8acb\u6c42</li> <li>\u57f7\u884c\u524d\u7f6e\u8655\u7406\u908f\u8f2f\uff08\u5982\u8acb\u6c42\u9a57\u8b49\u3001\u65e5\u8a8c\u8a18\u9304\u7b49\uff09</li> <li>\u5c07\u8acb\u6c42\u50b3\u905e\u7d66\u4e0b\u4e00\u500b\u4e2d\u9593\u4ef6\u6216\u8def\u7531\u8655\u7406\u51fd\u6578</li> <li>\u63a5\u6536\u8def\u7531\u8655\u7406\u51fd\u6578\u7684\u97ff\u61c9</li> <li>\u57f7\u884c\u5f8c\u7f6e\u8655\u7406\u908f\u8f2f\uff08\u5982\u97ff\u61c9\u4fee\u6539\u3001\u6dfb\u52a0\u982d\u4fe1\u606f\u7b49\uff09</li> <li>\u8fd4\u56de\u6700\u7d42\u97ff\u61c9\u7d66\u5ba2\u6236\u7aef</li> </ol>"},{"location":"middleware/01-introduction/#_4","title":"\u4e2d\u9593\u4ef6\u53c3\u6578\u89e3\u6790\uff1a","text":"<ul> <li>request\uff1a\u5305\u542b\u7576\u524d HTTP \u8acb\u6c42\u7684\u6240\u6709\u4fe1\u606f</li> <li>call_next\uff1a\u4e00\u500b\u51fd\u6578\uff0c\u7528\u65bc\u8abf\u7528\u4e0b\u4e00\u500b\u4e2d\u9593\u4ef6\u6216\u8def\u7531\u8655\u7406\u51fd\u6578</li> </ul>"},{"location":"middleware/01-introduction/#-","title":"\u8acb\u6c42-\u97ff\u61c9\u751f\u547d\u9031\u671f","text":"<p>\u5728 FastAPI \u61c9\u7528\u4e2d\uff0c\u4e00\u500b\u5b8c\u6574\u7684\u8acb\u6c42-\u97ff\u61c9\u751f\u547d\u9031\u671f\u5982\u4e0b\uff1a</p> <pre><code>\u5ba2\u6236\u7aef\u8acb\u6c42 \u2192 ASGI \u4f3a\u670d\u5668 \u2192 \u4e2d\u9593\u4ef6 1 \u2192 \u4e2d\u9593\u4ef6 2 \u2192 ... \u2192 \u8def\u7531\u8655\u7406\u51fd\u6578 \u2192 ... \u2192 \u4e2d\u9593\u4ef6 2 \u2192 \u4e2d\u9593\u4ef6 1 \u2192 \u5ba2\u6236\u7aef\u97ff\u61c9\n</code></pre> <p>\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u4e2d\u9593\u4ef6\u7684\u57f7\u884c\u9806\u5e8f\u9075\u5faa\u300c\u6d0b\u8525\u6a21\u578b\u300d\uff1a</p> <ol> <li>\u4e2d\u9593\u4ef6\u6309\u8a3b\u518a\u9806\u5e8f\u57f7\u884c\u524d\u7f6e\u8655\u7406\u908f\u8f2f</li> <li>\u8def\u7531\u8655\u7406\u51fd\u6578\u57f7\u884c</li> <li>\u4e2d\u9593\u4ef6\u6309\u8a3b\u518a\u7684\u53cd\u5e8f\u57f7\u884c\u5f8c\u7f6e\u8655\u7406\u908f\u8f2f</li> </ol>"},{"location":"middleware/01-introduction/#_5","title":"\u4e2d\u9593\u4ef6\u8207\u4f9d\u8cf4\u6ce8\u5165\u7684\u5340\u5225","text":"<p>FastAPI \u63d0\u4f9b\u4e86\u5169\u7a2e\u4e3b\u8981\u6a5f\u5236\u4f86\u5be6\u73fe\u6a6b\u5207\u95dc\u6ce8\u9ede\uff1a\u4e2d\u9593\u4ef6\u548c\u4f9d\u8cf4\u6ce8\u5165\u3002\u5b83\u5011\u7684\u4e3b\u8981\u5340\u5225\u5728\u65bc\uff1a</p> \u7279\u6027 \u4e2d\u9593\u4ef6 \u4f9d\u8cf4\u6ce8\u5165 \u4f5c\u7528\u7bc4\u570d \u5168\u5c40\u6216\u7279\u5b9a\u8def\u7531\u7d44 \u7279\u5b9a\u8def\u7531\u6216\u8def\u7531\u7d44 \u57f7\u884c\u6642\u6a5f \u8acb\u6c42\u9032\u5165\u548c\u97ff\u61c9\u8fd4\u56de\u6642 \u8def\u7531\u8655\u7406\u51fd\u6578\u57f7\u884c\u524d \u8a2a\u554f\u8def\u7531\u4fe1\u606f \u6709\u9650 \u5b8c\u6574 \u4fee\u6539\u97ff\u61c9 \u53ef\u4ee5 \u6709\u9650 \u9069\u7528\u5834\u666f \u65e5\u8a8c\u3001CORS\u3001\u58d3\u7e2e\u7b49 \u9a57\u8b49\u3001\u6b0a\u9650\u6aa2\u67e5\u7b49"},{"location":"middleware/01-introduction/#_6","title":"\u4f55\u6642\u4f7f\u7528\u4e2d\u9593\u4ef6\uff1f","text":"<p>\u4e2d\u9593\u4ef6\u9069\u5408\u4ee5\u4e0b\u5834\u666f\uff1a</p> <ul> <li>\u5168\u5c40\u64cd\u4f5c\uff1a\u9700\u8981\u5c0d\u6240\u6709\u6216\u5927\u90e8\u5206\u8acb\u6c42\u9032\u884c\u8655\u7406</li> <li>\u8acb\u6c42/\u97ff\u61c9\u4fee\u6539\uff1a\u9700\u8981\u4fee\u6539\u8acb\u6c42\u6216\u97ff\u61c9\u7684\u5167\u5bb9</li> <li>\u6a6b\u5207\u95dc\u6ce8\u9ede\uff1a\u8655\u7406\u8207\u696d\u52d9\u908f\u8f2f\u7121\u95dc\u7684\u6280\u8853\u6027\u9700\u6c42</li> <li>\u6027\u80fd\u76e3\u63a7\uff1a\u8a18\u9304\u8acb\u6c42\u8655\u7406\u6642\u9593</li> <li>\u932f\u8aa4\u8655\u7406\uff1a\u6355\u7372\u4e26\u8655\u7406\u5168\u5c40\u7570\u5e38</li> </ul>"},{"location":"middleware/01-introduction/#_7","title":"\u7e3d\u7d50","text":"<p>\u4e2d\u9593\u4ef6\u662f FastAPI \u61c9\u7528\u4e2d\u4e0d\u53ef\u6216\u7f3a\u7684\u7d44\u4ef6\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e00\u7a2e\u512a\u96c5\u7684\u65b9\u5f0f\u4f86\u8655\u7406\u8de8\u591a\u500b\u8acb\u6c42\u7684\u5171\u540c\u908f\u8f2f\u3002\u901a\u904e\u7406\u89e3\u4e2d\u9593\u4ef6\u7684\u57fa\u672c\u6982\u5ff5\u548c\u5de5\u4f5c\u539f\u7406\uff0c\u60a8\u53ef\u4ee5\u66f4\u6709\u6548\u5730\u8a2d\u8a08\u548c\u5be6\u73fe FastAPI \u61c9\u7528\uff0c\u4f7f\u5176\u66f4\u52a0\u6a21\u584a\u5316\u3001\u53ef\u7dad\u8b77\u548c\u53ef\u64f4\u5c55\u3002</p>"},{"location":"middleware/02-implementation/","title":"FastAPI \u4e2d\u9593\u4ef6\u5be6\u73fe","text":"<p>\u672c\u7ae0\u7bc0\u5c07\u6df1\u5165\u63a2\u8a0e FastAPI \u4e2d\u9593\u4ef6\u7684\u5be6\u73fe\u65b9\u5f0f\uff0c\u5305\u62ec\u51fd\u6578\u5f0f\u4e2d\u9593\u4ef6\u3001\u985e\u5f0f\u4e2d\u9593\u4ef6\u3001\u8a3b\u518a\u65b9\u6cd5\u4ee5\u53ca\u57f7\u884c\u9806\u5e8f\u63a7\u5236\u7b49\u95dc\u9375\u5167\u5bb9\u3002</p>"},{"location":"middleware/02-implementation/#_1","title":"\u51fd\u6578\u5f0f\u4e2d\u9593\u4ef6\u5be6\u73fe","text":"<p>\u51fd\u6578\u5f0f\u4e2d\u9593\u4ef6\u662f FastAPI \u4e2d\u6700\u5e38\u7528\u7684\u4e2d\u9593\u4ef6\u5be6\u73fe\u65b9\u5f0f\uff0c\u901a\u904e\u88dd\u98fe\u5668 <code>@app.middleware(\"http\")</code> \u4f86\u5b9a\u7fa9\u3002</p>"},{"location":"middleware/02-implementation/#_2","title":"\u57fa\u672c\u7d50\u69cb","text":"<pre><code>from fastapi import FastAPI, Request\nfrom fastapi.responses import Response\nfrom typing import Callable\nimport time\n\napp = FastAPI()\n\n@app.middleware(\"http\")\nasync def timing_middleware(request: Request, call_next: Callable):\n    start_time = time.time()\n\n    # \u8655\u7406\u8acb\u6c42\n    response = await call_next(request)\n\n    # \u8a08\u7b97\u8655\u7406\u6642\u9593\n    process_time = time.time() - start_time\n    response.headers[\"X-Process-Time\"] = str(process_time)\n\n    return response\n</code></pre>"},{"location":"middleware/02-implementation/#_3","title":"\u51fd\u6578\u5f0f\u4e2d\u9593\u4ef6\u7684\u53c3\u6578","text":"<ul> <li>request: <code>Request</code> \u5c0d\u8c61\uff0c\u5305\u542b\u7576\u524d HTTP \u8acb\u6c42\u7684\u6240\u6709\u4fe1\u606f</li> <li>call_next: \u4e00\u500b\u53ef\u8abf\u7528\u5c0d\u8c61\uff0c\u7528\u65bc\u8abf\u7528\u4e0b\u4e00\u500b\u4e2d\u9593\u4ef6\u6216\u8def\u7531\u8655\u7406\u51fd\u6578</li> <li>\u8fd4\u56de\u503c: \u5fc5\u9808\u8fd4\u56de\u4e00\u500b <code>Response</code> \u5c0d\u8c61</li> </ul>"},{"location":"middleware/02-implementation/#_4","title":"\u7570\u6b65\u8207\u540c\u6b65","text":"<p>FastAPI \u652f\u6301\u7570\u6b65\u548c\u540c\u6b65\u4e2d\u9593\u4ef6\uff0c\u4f46\u63a8\u85a6\u4f7f\u7528\u7570\u6b65\u65b9\u5f0f\u4ee5\u7372\u5f97\u66f4\u597d\u7684\u6027\u80fd\uff1a</p> <pre><code># \u7570\u6b65\u4e2d\u9593\u4ef6\uff08\u63a8\u85a6\uff09\n@app.middleware(\"http\")\nasync def async_middleware(request: Request, call_next):\n    response = await call_next(request)\n    return response\n\n# \u540c\u6b65\u4e2d\u9593\u4ef6\n@app.middleware(\"http\")\ndef sync_middleware(request: Request, call_next):\n    response = call_next(request)\n    return response\n</code></pre>"},{"location":"middleware/02-implementation/#_5","title":"\u985e\u5225\u5f0f\u4e2d\u9593\u4ef6\u5be6\u73fe","text":"<p>\u9664\u4e86\u51fd\u6578\u5f0f\u4e2d\u9593\u4ef6\uff0cFastAPI \u9084\u652f\u6301\u57fa\u65bc\u985e\u5225\u7684\u4e2d\u9593\u4ef6\u5be6\u73fe\uff0c\u9019\u7a2e\u65b9\u5f0f\u66f4\u9069\u5408\u8907\u96dc\u7684\u4e2d\u9593\u4ef6\u908f\u8f2f\u3002</p>"},{"location":"middleware/02-implementation/#starlette-basehttpmiddleware","title":"\u57fa\u65bc Starlette \u7684 BaseHTTPMiddleware","text":"<pre><code>from fastapi import FastAPI, Request\nfrom fastapi.responses import Response\nfrom starlette.middleware.base import BaseHTTPMiddleware\nimport time\n\napp = FastAPI()\n\nclass TimingMiddleware(BaseHTTPMiddleware):\n    async def dispatch(self, request: Request, call_next):\n        start_time = time.time()\n\n        # \u8655\u7406\u8acb\u6c42\n        response = await call_next(request)\n\n        # \u8a08\u7b97\u8655\u7406\u6642\u9593\n        process_time = time.time() - start_time\n        response.headers[\"X-Process-Time\"] = str(process_time)\n\n        return response\n\n# \u8a3b\u518a\u4e2d\u9593\u4ef6\napp.add_middleware(TimingMiddleware)\n</code></pre>"},{"location":"middleware/02-implementation/#_6","title":"\u5e36\u914d\u7f6e\u7684\u985e\u5f0f\u4e2d\u9593\u4ef6","text":"<p>\u985e\u5f0f\u4e2d\u9593\u4ef6\u7684\u4e00\u500b\u512a\u52e2\u662f\u53ef\u4ee5\u8f15\u9b06\u63a5\u53d7\u914d\u7f6e\u53c3\u6578\uff1a</p> <pre><code>class ConfigurableMiddleware(BaseHTTPMiddleware):\n    def __init__(self, app, header_name: str = \"X-Process-Time\", log_time: bool = False):\n        super().__init__(app)\n        self.header_name = header_name\n        self.log_time = log_time\n\n    async def dispatch(self, request: Request, call_next):\n        start_time = time.time()\n        response = await call_next(request)\n        process_time = time.time() - start_time\n\n        # \u6dfb\u52a0\u81ea\u5b9a\u7fa9\u982d\u4fe1\u606f\n        response.headers[self.header_name] = str(process_time)\n\n        # \u6839\u64da\u914d\u7f6e\u6c7a\u5b9a\u662f\u5426\u8a18\u9304\u6642\u9593\n        if self.log_time:\n            print(f\"Request to {request.url.path} took {process_time:.4f} seconds\")\n\n        return response\n\n# \u8a3b\u518a\u4e26\u914d\u7f6e\u4e2d\u9593\u4ef6\napp.add_middleware(\n    ConfigurableMiddleware, \n    header_name=\"X-Custom-Process-Time\", \n    log_time=True\n)\n</code></pre>"},{"location":"middleware/02-implementation/#_7","title":"\u4e2d\u9593\u4ef6\u8a3b\u518a\u65b9\u6cd5","text":"<p>FastAPI \u63d0\u4f9b\u4e86\u5169\u7a2e\u8a3b\u518a\u4e2d\u9593\u4ef6\u7684\u65b9\u6cd5\uff1a</p>"},{"location":"middleware/02-implementation/#1","title":"1. \u4f7f\u7528\u88dd\u98fe\u5668\uff08\u50c5\u9069\u7528\u65bc\u51fd\u6578\u5f0f\u4e2d\u9593\u4ef6\uff09","text":"<pre><code>@app.middleware(\"http\")\nasync def my_middleware(request, call_next):\n    response = await call_next(request)\n    return response\n</code></pre>"},{"location":"middleware/02-implementation/#2-add_middleware","title":"2. \u4f7f\u7528 add_middleware \u65b9\u6cd5\uff08\u9069\u7528\u65bc\u985e\u5f0f\u4e2d\u9593\u4ef6\uff09","text":"<pre><code>from starlette.middleware.cors import CORSMiddleware\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n</code></pre>"},{"location":"middleware/02-implementation/#_8","title":"\u5167\u7f6e\u4e2d\u9593\u4ef6","text":"<p>FastAPI/Starlette \u63d0\u4f9b\u4e86\u5e7e\u500b\u5be6\u7528\u7684\u5167\u7f6e\u4e2d\u9593\u4ef6\uff1a</p>"},{"location":"middleware/02-implementation/#cors","title":"CORS \u4e2d\u9593\u4ef6","text":"<pre><code>from fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\n\napp = FastAPI()\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"https://frontend.example.com\"],\n    allow_credentials=True,\n    allow_methods=[\"GET\", \"POST\", \"PUT\", \"DELETE\"],\n    allow_headers=[\"*\"],\n)\n</code></pre>"},{"location":"middleware/02-implementation/#gzip","title":"GZip \u58d3\u7e2e\u4e2d\u9593\u4ef6","text":"<pre><code>from fastapi.middleware.gzip import GZipMiddleware\n\napp.add_middleware(GZipMiddleware, minimum_size=1000)\n</code></pre>"},{"location":"middleware/02-implementation/#_9","title":"\u4fe1\u4efb\u4e3b\u6a5f\u4e2d\u9593\u4ef6","text":"<pre><code>from fastapi.middleware.trustedhost import TrustedHostMiddleware\n\napp.add_middleware(\n    TrustedHostMiddleware, allowed_hosts=[\"example.com\", \"*.example.com\"]\n)\n</code></pre>"},{"location":"middleware/02-implementation/#_10","title":"\u4e2d\u9593\u4ef6\u57f7\u884c\u9806\u5e8f","text":"<p>\u4e2d\u9593\u4ef6\u7684\u57f7\u884c\u9806\u5e8f\u9075\u5faa\u300c\u6d0b\u8525\u6a21\u578b\u300d\uff0c\u6309\u7167\u8a3b\u518a\u9806\u5e8f\u57f7\u884c\u524d\u7f6e\u8655\u7406\uff0c\u6309\u7167\u8a3b\u518a\u7684\u53cd\u5e8f\u57f7\u884c\u5f8c\u7f6e\u8655\u7406\u3002</p> <pre><code>@app.middleware(\"http\")\nasync def middleware1(request, call_next):\n    print(\"Middleware 1 - \u524d\u7f6e\u8655\u7406\")\n    response = await call_next(request)\n    print(\"Middleware 1 - \u5f8c\u7f6e\u8655\u7406\")\n    return response\n\n@app.middleware(\"http\")\nasync def middleware2(request, call_next):\n    print(\"Middleware 2 - \u524d\u7f6e\u8655\u7406\")\n    response = await call_next(request)\n    print(\"Middleware 2 - \u5f8c\u7f6e\u8655\u7406\")\n    return response\n</code></pre> <p>\u57f7\u884c\u9806\u5e8f\u5c07\u662f\uff1a <pre><code>Middleware 1 - \u524d\u7f6e\u8655\u7406\nMiddleware 2 - \u524d\u7f6e\u8655\u7406\n\u8def\u7531\u8655\u7406\u51fd\u6578\u57f7\u884c\nMiddleware 2 - \u5f8c\u7f6e\u8655\u7406\nMiddleware 1 - \u5f8c\u7f6e\u8655\u7406\n</code></pre></p>"},{"location":"middleware/02-implementation/#_11","title":"\u63a7\u5236\u57f7\u884c\u9806\u5e8f","text":"<p>\u4f7f\u7528 <code>add_middleware</code> \u65b9\u6cd5\u6642\uff0c\u4e2d\u9593\u4ef6\u7684\u8a3b\u518a\u9806\u5e8f\u6c7a\u5b9a\u4e86\u57f7\u884c\u9806\u5e8f\uff1a</p> <pre><code># \u5148\u57f7\u884c CORSMiddleware\uff0c\u5f8c\u57f7\u884c GZipMiddleware\napp.add_middleware(GZipMiddleware, minimum_size=1000)\napp.add_middleware(CORSMiddleware, allow_origins=[\"*\"])\n</code></pre>"},{"location":"middleware/02-implementation/#_12","title":"\u8acb\u6c42\u548c\u97ff\u61c9\u4fee\u6539","text":"<p>\u4e2d\u9593\u4ef6\u53ef\u4ee5\u4fee\u6539\u8acb\u6c42\u548c\u97ff\u61c9\u7684\u5404\u500b\u65b9\u9762\uff1a</p>"},{"location":"middleware/02-implementation/#_13","title":"\u4fee\u6539\u8acb\u6c42","text":"<pre><code>@app.middleware(\"http\")\nasync def add_custom_header(request: Request, call_next):\n    # \u7121\u6cd5\u76f4\u63a5\u4fee\u6539 request.headers\uff0c\u4f46\u53ef\u4ee5\u901a\u904e\u5176\u4ed6\u65b9\u5f0f\u50b3\u905e\u4fe1\u606f\n    request.state.custom_value = \"some_value\"\n    response = await call_next(request)\n    return response\n</code></pre>"},{"location":"middleware/02-implementation/#_14","title":"\u4fee\u6539\u97ff\u61c9","text":"<pre><code>@app.middleware(\"http\")\nasync def modify_response(request: Request, call_next):\n    response = await call_next(request)\n\n    # \u6dfb\u52a0\u982d\u4fe1\u606f\n    response.headers[\"X-Custom-Header\"] = \"custom_value\"\n\n    # \u4fee\u6539\u72c0\u614b\u78bc\n    if some_condition:\n        response.status_code = 201\n\n    return response\n</code></pre>"},{"location":"middleware/02-implementation/#_15","title":"\u5b8c\u5168\u66ff\u63db\u97ff\u61c9","text":"<pre><code>from fastapi.responses import JSONResponse\n\n@app.middleware(\"http\")\nasync def replace_response(request: Request, call_next):\n    # \u67d0\u4e9b\u689d\u4ef6\u4e0b\uff0c\u4e0d\u8abf\u7528\u4e0b\u4e00\u500b\u4e2d\u9593\u4ef6\uff0c\u76f4\u63a5\u8fd4\u56de\u97ff\u61c9\n    if request.url.path == \"/blocked\":\n        return JSONResponse(\n            status_code=403,\n            content={\"message\": \"Access denied\"}\n        )\n\n    response = await call_next(request)\n    return response\n</code></pre>"},{"location":"middleware/02-implementation/#_16","title":"\u4e2d\u9593\u4ef6\u4e2d\u7684\u932f\u8aa4\u8655\u7406","text":"<p>\u4e2d\u9593\u4ef6\u53ef\u4ee5\u6355\u7372\u548c\u8655\u7406\u8def\u7531\u8655\u7406\u51fd\u6578\u6216\u5176\u4ed6\u4e2d\u9593\u4ef6\u4e2d\u7684\u7570\u5e38\uff1a</p> <pre><code>@app.middleware(\"http\")\nasync def error_handling_middleware(request: Request, call_next):\n    try:\n        return await call_next(request)\n    except Exception as e:\n        # \u8a18\u9304\u932f\u8aa4\n        print(f\"Error: {str(e)}\")\n\n        # \u8fd4\u56de\u81ea\u5b9a\u7fa9\u932f\u8aa4\u97ff\u61c9\n        return JSONResponse(\n            status_code=500,\n            content={\"message\": \"Internal server error\"}\n        )\n</code></pre>"},{"location":"middleware/02-implementation/#_17","title":"\u7e3d\u7d50","text":"<p>\u672c\u7ae0\u8a73\u7d30\u4ecb\u7d39\u4e86 FastAPI \u4e2d\u9593\u4ef6\u7684\u5be6\u73fe\u65b9\u5f0f\uff0c\u5305\u62ec\u51fd\u6578\u5f0f\u548c\u985e\u5f0f\u4e2d\u9593\u4ef6\u7684\u5b9a\u7fa9\u3001\u8a3b\u518a\u65b9\u6cd5\u3001\u57f7\u884c\u9806\u5e8f\u63a7\u5236\u4ee5\u53ca\u8acb\u6c42\u548c\u97ff\u61c9\u7684\u4fee\u6539\u3002\u901a\u904e\u9078\u64c7\u5408\u9069\u7684\u4e2d\u9593\u4ef6\u5be6\u73fe\u65b9\u5f0f\uff0c\u958b\u767c\u8005\u53ef\u4ee5\u66f4\u9748\u6d3b\u5730\u8655\u7406\u5404\u7a2e\u6a6b\u5207\u95dc\u6ce8\u9ede\uff0c\u63d0\u9ad8\u4ee3\u78bc\u7684\u53ef\u7dad\u8b77\u6027\u548c\u53ef\u64f4\u5c55\u6027\u3002</p>"},{"location":"middleware/03-use-cases/","title":"FastAPI \u4e2d\u9593\u4ef6\u61c9\u7528\u5834\u666f","text":"<p>\u672c\u7ae0\u7bc0\u5c07\u63a2\u8a0e FastAPI \u4e2d\u9593\u4ef6\u7684\u5e38\u898b\u61c9\u7528\u5834\u666f\uff0c\u4e26\u63d0\u4f9b\u5be6\u7528\u7684\u5be6\u4f8b\u4ee3\u78bc\uff0c\u5e6b\u52a9\u958b\u767c\u8005\u7406\u89e3\u5982\u4f55\u5728\u5be6\u969b\u9805\u76ee\u4e2d\u6709\u6548\u5229\u7528\u4e2d\u9593\u4ef6\u3002</p>"},{"location":"middleware/03-use-cases/#_1","title":"\u8acb\u6c42\u65e5\u8a8c\u8a18\u9304\u4e2d\u9593\u4ef6","text":"<p>\u65e5\u8a8c\u8a18\u9304\u662f\u4e2d\u9593\u4ef6\u6700\u5e38\u898b\u7684\u61c9\u7528\u5834\u666f\u4e4b\u4e00\u3002\u901a\u904e\u4e2d\u9593\u4ef6\uff0c\u6211\u5011\u53ef\u4ee5\u7d71\u4e00\u8a18\u9304\u6240\u6709\u8acb\u6c42\u7684\u8a73\u7d30\u4fe1\u606f\uff0c\u5305\u62ec\u8acb\u6c42\u65b9\u6cd5\u3001\u8def\u5f91\u3001\u8655\u7406\u6642\u9593\u3001\u72c0\u614b\u78bc\u7b49\u3002</p> <pre><code>import time\nimport logging\nfrom fastapi import FastAPI, Request\nfrom starlette.middleware.base import BaseHTTPMiddleware\n\n# \u914d\u7f6e\u65e5\u8a8c\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n    handlers=[logging.StreamHandler()]\n)\nlogger = logging.getLogger(\"app\")\n\napp = FastAPI()\n\nclass LoggingMiddleware(BaseHTTPMiddleware):\n    async def dispatch(self, request: Request, call_next):\n        # \u8a18\u9304\u8acb\u6c42\u958b\u59cb\u6642\u9593\n        start_time = time.time()\n\n        # \u6536\u96c6\u8acb\u6c42\u4fe1\u606f\n        method = request.method\n        path = request.url.path\n        query_params = dict(request.query_params)\n        client_host = request.client.host if request.client else \"unknown\"\n\n        # \u8a18\u9304\u8acb\u6c42\u958b\u59cb\n        logger.info(f\"Request started: {method} {path} from {client_host} with params {query_params}\")\n\n        try:\n            # \u8655\u7406\u8acb\u6c42\n            response = await call_next(request)\n\n            # \u8a08\u7b97\u8655\u7406\u6642\u9593\n            process_time = time.time() - start_time\n\n            # \u8a18\u9304\u6210\u529f\u7684\u8acb\u6c42\n            logger.info(\n                f\"Request completed: {method} {path} - Status: {response.status_code} - \"\n                f\"Duration: {process_time:.4f}s\"\n            )\n\n            return response\n\n        except Exception as e:\n            # \u8a18\u9304\u5931\u6557\u7684\u8acb\u6c42\n            process_time = time.time() - start_time\n            logger.error(\n                f\"Request failed: {method} {path} - Error: {str(e)} - \"\n                f\"Duration: {process_time:.4f}s\"\n            )\n            raise\n\napp.add_middleware(LoggingMiddleware)\n</code></pre>"},{"location":"middleware/03-use-cases/#_2","title":"\u8eab\u4efd\u9a57\u8b49\u8207\u6388\u6b0a\u4e2d\u9593\u4ef6","text":"<p>\u4e2d\u9593\u4ef6\u662f\u5be6\u73fe\u8eab\u4efd\u9a57\u8b49\u548c\u6388\u6b0a\u908f\u8f2f\u7684\u7406\u60f3\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u5728\u8acb\u6c42\u5230\u9054\u8def\u7531\u8655\u7406\u51fd\u6578\u4e4b\u524d\u9a57\u8b49\u7528\u6236\u8eab\u4efd\u3002</p> <pre><code>from fastapi import FastAPI, Request, HTTPException\nfrom fastapi.responses import JSONResponse\nfrom starlette.middleware.base import BaseHTTPMiddleware\nimport jwt\nfrom typing import List, Optional\n\napp = FastAPI()\n\nclass AuthMiddleware(BaseHTTPMiddleware):\n    def __init__(\n        self, \n        app, \n        secret_key: str,\n        exclude_paths: List[str] = None,\n        algorithm: str = \"HS256\"\n    ):\n        super().__init__(app)\n        self.secret_key = secret_key\n        self.exclude_paths = exclude_paths or [\"/login\", \"/docs\", \"/openapi.json\"]\n        self.algorithm = algorithm\n\n    async def dispatch(self, request: Request, call_next):\n        # \u6aa2\u67e5\u662f\u5426\u70ba\u6392\u9664\u8def\u5f91\n        if request.url.path in self.exclude_paths:\n            return await call_next(request)\n\n        # \u7372\u53d6\u6388\u6b0a\u982d\n        auth_header = request.headers.get(\"Authorization\")\n        if not auth_header or not auth_header.startswith(\"Bearer \"):\n            return JSONResponse(\n                status_code=401,\n                content={\"detail\": \"Missing or invalid authentication token\"}\n            )\n\n        token = auth_header.split(\" \")[1]\n\n        try:\n            # \u9a57\u8b49 JWT \u4ee4\u724c\n            payload = jwt.decode(token, self.secret_key, algorithms=[self.algorithm])\n\n            # \u5c07\u7528\u6236\u4fe1\u606f\u6dfb\u52a0\u5230\u8acb\u6c42\u72c0\u614b\n            request.state.user = payload\n            request.state.user_id = payload.get(\"sub\")\n            request.state.user_role = payload.get(\"role\")\n\n            # \u7e7c\u7e8c\u8655\u7406\u8acb\u6c42\n            return await call_next(request)\n\n        except jwt.ExpiredSignatureError:\n            return JSONResponse(\n                status_code=401,\n                content={\"detail\": \"Token has expired\"}\n            )\n        except jwt.InvalidTokenError:\n            return JSONResponse(\n                status_code=401,\n                content={\"detail\": \"Invalid authentication token\"}\n            )\n\n# \u8a3b\u518a\u4e2d\u9593\u4ef6\napp.add_middleware(\n    AuthMiddleware,\n    secret_key=\"your-secret-key\",\n    exclude_paths=[\"/login\", \"/register\", \"/docs\", \"/openapi.json\"]\n)\n\n# \u5728\u8def\u7531\u4e2d\u4f7f\u7528\u8acb\u6c42\u72c0\u614b\u4e2d\u7684\u7528\u6236\u4fe1\u606f\n@app.get(\"/profile\")\nasync def get_profile(request: Request):\n    user = request.state.user\n    return {\"user_id\": user.get(\"sub\"), \"username\": user.get(\"username\")}\n</code></pre>"},{"location":"middleware/03-use-cases/#cors","title":"CORS \u8655\u7406\u4e2d\u9593\u4ef6","text":"<p>\u8de8\u57df\u8cc7\u6e90\u5171\u4eab (CORS) \u662f Web \u61c9\u7528\u4e2d\u5e38\u898b\u7684\u9700\u6c42\uff0cFastAPI \u63d0\u4f9b\u4e86\u5167\u7f6e\u7684 CORS \u4e2d\u9593\u4ef6\uff1a</p> <pre><code>from fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\n\napp = FastAPI()\n\n# \u914d\u7f6e CORS\napp.add_middleware(\n    CORSMiddleware,\n    # \u5141\u8a31\u7684\u6e90\u5217\u8868\n    allow_origins=[\n        \"http://localhost:3000\",\n        \"https://frontend.example.com\"\n    ],\n    # \u662f\u5426\u5141\u8a31\u767c\u9001\u6191\u8b49\uff08\u5982 cookies\uff09\n    allow_credentials=True,\n    # \u5141\u8a31\u7684 HTTP \u65b9\u6cd5\n    allow_methods=[\"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\", \"OPTIONS\"],\n    # \u5141\u8a31\u7684 HTTP \u982d\n    allow_headers=[\"Content-Type\", \"Authorization\", \"X-Requested-With\"],\n    # \u5141\u8a31\u700f\u89bd\u5668\u7de9\u5b58\u9810\u6aa2\u8acb\u6c42\u7684\u6642\u9593\uff08\u79d2\uff09\n    max_age=600,\n)\n</code></pre>"},{"location":"middleware/03-use-cases/#_3","title":"\u8acb\u6c42\u9650\u6d41\u4e2d\u9593\u4ef6","text":"<p>\u70ba\u4e86\u9632\u6b62 API \u88ab\u6feb\u7528\uff0c\u53ef\u4ee5\u5be6\u73fe\u8acb\u6c42\u9650\u6d41\u4e2d\u9593\u4ef6\uff0c\u9650\u5236\u7279\u5b9a\u6642\u9593\u5167\u7684\u8acb\u6c42\u6b21\u6578\uff1a</p> <pre><code>from fastapi import FastAPI, Request\nfrom fastapi.responses import JSONResponse\nfrom starlette.middleware.base import BaseHTTPMiddleware\nimport time\nfrom collections import defaultdict\n\napp = FastAPI()\n\nclass RateLimitMiddleware(BaseHTTPMiddleware):\n    def __init__(\n        self, \n        app, \n        limit: int = 10,\n        window: int = 60,\n        exclude_paths: list = None\n    ):\n        super().__init__(app)\n        self.limit = limit  # \u6bcf\u500b\u7a97\u53e3\u5141\u8a31\u7684\u6700\u5927\u8acb\u6c42\u6578\n        self.window = window  # \u7a97\u53e3\u5927\u5c0f\uff08\u79d2\uff09\n        self.exclude_paths = exclude_paths or []\n        self.requests = defaultdict(list)  # \u5132\u5b58\u6bcf\u500b IP \u7684\u8acb\u6c42\u6642\u9593\n\n    async def dispatch(self, request: Request, call_next):\n        # \u6aa2\u67e5\u662f\u5426\u70ba\u6392\u9664\u8def\u5f91\n        if request.url.path in self.exclude_paths:\n            return await call_next(request)\n\n        # \u7372\u53d6\u5ba2\u6236\u7aef IP\n        client_ip = request.client.host if request.client else \"unknown\"\n\n        # \u7576\u524d\u6642\u9593\n        current_time = time.time()\n\n        # \u6e05\u7406\u904e\u671f\u7684\u8acb\u6c42\u8a18\u9304\n        self.requests[client_ip] = [\n            req_time for req_time in self.requests[client_ip]\n            if current_time - req_time &lt; self.window\n        ]\n\n        # \u6aa2\u67e5\u662f\u5426\u8d85\u904e\u9650\u5236\n        if len(self.requests[client_ip]) &gt;= self.limit:\n            return JSONResponse(\n                status_code=429,\n                content={\n                    \"detail\": \"Too many requests\",\n                    \"retry_after\": self.window - (current_time - self.requests[client_ip][0])\n                }\n            )\n\n        # \u8a18\u9304\u7576\u524d\u8acb\u6c42\n        self.requests[client_ip].append(current_time)\n\n        # \u8655\u7406\u8acb\u6c42\n        return await call_next(request)\n\n# \u8a3b\u518a\u4e2d\u9593\u4ef6\napp.add_middleware(\n    RateLimitMiddleware,\n    limit=100,  # \u6bcf\u5206\u9418 100 \u500b\u8acb\u6c42\n    window=60,  # 1 \u5206\u9418\u7a97\u53e3\n    exclude_paths=[\"/docs\", \"/openapi.json\"]\n)\n</code></pre>"},{"location":"middleware/03-use-cases/#_4","title":"\u97ff\u61c9\u58d3\u7e2e\u4e2d\u9593\u4ef6","text":"<p>\u5c0d\u65bc\u5927\u578b\u97ff\u61c9\uff0c\u53ef\u4ee5\u4f7f\u7528\u58d3\u7e2e\u4e2d\u9593\u4ef6\u6e1b\u5c11\u50b3\u8f38\u6578\u64da\u91cf\uff0c\u63d0\u9ad8\u6027\u80fd\uff1a</p> <pre><code>from fastapi import FastAPI\nfrom fastapi.middleware.gzip import GZipMiddleware\n\napp = FastAPI()\n\n# \u8a3b\u518a GZip \u58d3\u7e2e\u4e2d\u9593\u4ef6\napp.add_middleware(\n    GZipMiddleware,\n    minimum_size=1000  # \u50c5\u58d3\u7e2e\u5927\u65bc 1000 \u5b57\u7bc0\u7684\u97ff\u61c9\n)\n</code></pre>"},{"location":"middleware/03-use-cases/#_5","title":"\u5168\u5c40\u7570\u5e38\u8655\u7406\u4e2d\u9593\u4ef6","text":"<p>\u4e2d\u9593\u4ef6\u53ef\u4ee5\u6355\u7372\u61c9\u7528\u4e2d\u7684\u6240\u6709\u7570\u5e38\uff0c\u63d0\u4f9b\u7d71\u4e00\u7684\u932f\u8aa4\u8655\u7406\u6a5f\u5236\uff1a</p> <pre><code>from fastapi import FastAPI, Request, HTTPException\nfrom fastapi.responses import JSONResponse\nfrom starlette.middleware.base import BaseHTTPMiddleware\nimport traceback\nimport logging\n\nlogger = logging.getLogger(\"app\")\n\napp = FastAPI()\n\nclass ExceptionMiddleware(BaseHTTPMiddleware):\n    async def dispatch(self, request: Request, call_next):\n        try:\n            return await call_next(request)\n        except HTTPException as e:\n            # \u8655\u7406 FastAPI \u7684 HTTPException\n            logger.warning(f\"HTTP Exception: {e.detail} (status_code={e.status_code})\")\n            return JSONResponse(\n                status_code=e.status_code,\n                content={\"detail\": e.detail}\n            )\n        except Exception as e:\n            # \u8655\u7406\u672a\u6355\u7372\u7684\u7570\u5e38\n            error_id = str(uuid.uuid4())\n\n            # \u8a18\u9304\u8a73\u7d30\u932f\u8aa4\u4fe1\u606f\n            logger.error(\n                f\"Unhandled exception: {str(e)} (error_id={error_id})\\n\"\n                f\"{traceback.format_exc()}\"\n            )\n\n            # \u8fd4\u56de\u7528\u6236\u53cb\u597d\u7684\u932f\u8aa4\u4fe1\u606f\n            return JSONResponse(\n                status_code=500,\n                content={\n                    \"detail\": \"An unexpected error occurred\",\n                    \"error_id\": error_id\n                }\n            )\n\napp.add_middleware(ExceptionMiddleware)\n</code></pre>"},{"location":"middleware/03-use-cases/#_6","title":"\u6027\u80fd\u76e3\u63a7\u4e2d\u9593\u4ef6","text":"<p>\u76e3\u63a7 API \u7aef\u9ede\u7684\u6027\u80fd\uff0c\u8b58\u5225\u53ef\u80fd\u7684\u74f6\u9838\uff1a</p> <pre><code>import time\nfrom fastapi import FastAPI, Request\nfrom starlette.middleware.base import BaseHTTPMiddleware\nimport statistics\n\napp = FastAPI()\n\nclass PerformanceMonitoringMiddleware(BaseHTTPMiddleware):\n    def __init__(self, app, threshold_ms: float = 500):\n        super().__init__(app)\n        self.threshold_ms = threshold_ms\n        self.request_times = {}  # \u5132\u5b58\u6bcf\u500b\u8def\u5f91\u7684\u8655\u7406\u6642\u9593\n\n    async def dispatch(self, request: Request, call_next):\n        start_time = time.time()\n\n        response = await call_next(request)\n\n        # \u8a08\u7b97\u8655\u7406\u6642\u9593\uff08\u6beb\u79d2\uff09\n        process_time = (time.time() - start_time) * 1000\n\n        # \u7372\u53d6\u8acb\u6c42\u8def\u5f91\n        path = request.url.path\n\n        # \u66f4\u65b0\u8def\u5f91\u7684\u8655\u7406\u6642\u9593\u7d71\u8a08\n        if path not in self.request_times:\n            self.request_times[path] = []\n\n        self.request_times[path].append(process_time)\n\n        # \u4fdd\u7559\u6700\u8fd1 100 \u500b\u8acb\u6c42\u7684\u6578\u64da\n        if len(self.request_times[path]) &gt; 100:\n            self.request_times[path].pop(0)\n\n        # \u5982\u679c\u8655\u7406\u6642\u9593\u8d85\u904e\u95be\u503c\uff0c\u8a18\u9304\u8b66\u544a\n        if process_time &gt; self.threshold_ms:\n            print(f\"WARNING: Slow request detected - {request.method} {path} took {process_time:.2f}ms\")\n\n        # \u6bcf 100 \u500b\u8acb\u6c42\u8a08\u7b97\u4e00\u6b21\u7d71\u8a08\u6578\u64da\n        if len(self.request_times[path]) % 100 == 0:\n            times = self.request_times[path]\n            avg_time = statistics.mean(times)\n            p95_time = sorted(times)[int(len(times) * 0.95)]\n\n            print(f\"Performance stats for {path}:\")\n            print(f\"  Average: {avg_time:.2f}ms\")\n            print(f\"  95th percentile: {p95_time:.2f}ms\")\n            print(f\"  Min: {min(times):.2f}ms\")\n            print(f\"  Max: {max(times):.2f}ms\")\n\n        # \u5c07\u8655\u7406\u6642\u9593\u6dfb\u52a0\u5230\u97ff\u61c9\u982d\n        response.headers[\"X-Process-Time\"] = f\"{process_time:.2f}ms\"\n\n        return response\n\napp.add_middleware(PerformanceMonitoringMiddleware, threshold_ms=200)\n</code></pre>"},{"location":"middleware/04-advanced/","title":"FastAPI \u4e2d\u9593\u4ef6\u9032\u968e\u6280\u5de7","text":"<p>\u672c\u7ae0\u7bc0\u5c07\u6df1\u5165\u63a2\u8a0e FastAPI \u4e2d\u9593\u4ef6\u7684\u9032\u968e\u6280\u5de7\uff0c\u5305\u62ec\u7570\u6b65\u4e2d\u9593\u4ef6\u512a\u5316\u3001\u4e2d\u9593\u4ef6\u8207\u4f9d\u8cf4\u6ce8\u5165\u7684\u7d50\u5408\u3001\u4e2d\u9593\u4ef6\u4e0a\u4e0b\u6587\u7ba1\u7406\u3001\u4e2d\u9593\u4ef6\u6e2c\u8a66\u7b56\u7565\u4ee5\u53ca\u5176\u4ed6\u9ad8\u7d1a\u61c9\u7528\u5834\u666f\u3002</p>"},{"location":"middleware/04-advanced/#_1","title":"\u7570\u6b65\u4e2d\u9593\u4ef6\u512a\u5316","text":"<p>FastAPI \u5efa\u7acb\u5728 ASGI \u6a19\u6e96\u4e4b\u4e0a\uff0c\u5145\u5206\u5229\u7528 Python \u7684\u7570\u6b65\u7279\u6027\u53ef\u4ee5\u986f\u8457\u63d0\u9ad8\u61c9\u7528\u6027\u80fd\u3002\u4ee5\u4e0b\u662f\u4e00\u4e9b\u7570\u6b65\u4e2d\u9593\u4ef6\u7684\u512a\u5316\u6280\u5de7\uff1a</p>"},{"location":"middleware/04-advanced/#_2","title":"\u907f\u514d\u963b\u585e\u64cd\u4f5c","text":"<p>\u5728\u7570\u6b65\u4e2d\u9593\u4ef6\u4e2d\uff0c\u61c9\u907f\u514d\u4f7f\u7528\u963b\u585e\u64cd\u4f5c\uff0c\u5982\u540c\u6b65 I/O\u3001\u9577\u6642\u9593\u8a08\u7b97\u7b49\uff1a</p> <pre><code>from fastapi import FastAPI, Request\nimport aiohttp\nimport asyncio\n\napp = FastAPI()\n\n@app.middleware(\"http\")\nasync def external_service_middleware(request: Request, call_next):\n    # \u932f\u8aa4\u793a\u4f8b\uff1a\u5728\u7570\u6b65\u4e2d\u9593\u4ef6\u4e2d\u4f7f\u7528\u963b\u585e\u64cd\u4f5c\n    # import requests\n    # response = requests.get(\"https://api.example.com/data\")  # \u963b\u585e!\n\n    # \u6b63\u78ba\u793a\u4f8b\uff1a\u4f7f\u7528\u7570\u6b65 HTTP \u5ba2\u6236\u7aef\n    async with aiohttp.ClientSession() as session:\n        async with session.get(\"https://api.example.com/data\") as response:\n            data = await response.json()\n\n    # \u5c07\u6578\u64da\u6dfb\u52a0\u5230\u8acb\u6c42\u72c0\u614b\n    request.state.external_data = data\n\n    # \u7e7c\u7e8c\u8655\u7406\u8acb\u6c42\n    return await call_next(request)\n</code></pre>"},{"location":"middleware/04-advanced/#_3","title":"\u4f7f\u7528\u7570\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668","text":"<p>\u5229\u7528\u7570\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u53ef\u4ee5\u66f4\u512a\u96c5\u5730\u8655\u7406\u8cc7\u6e90\u7372\u53d6\u548c\u91cb\u653e\uff1a</p> <pre><code>import asyncio\nfrom contextlib import asynccontextmanager\nfrom fastapi import FastAPI, Request\nfrom starlette.middleware.base import BaseHTTPMiddleware\n\n@asynccontextmanager\nasync def get_db_connection():\n    # \u5047\u8a2d\u9019\u662f\u4e00\u500b\u7570\u6b65\u6578\u64da\u5eab\u9023\u63a5\n    conn = await create_async_connection()\n    try:\n        yield conn\n    finally:\n        await conn.close()\n\nclass DatabaseMiddleware(BaseHTTPMiddleware):\n    async def dispatch(self, request: Request, call_next):\n        async with get_db_connection() as conn:\n            # \u5c07\u6578\u64da\u5eab\u9023\u63a5\u6dfb\u52a0\u5230\u8acb\u6c42\u72c0\u614b\n            request.state.db = conn\n\n            # \u8655\u7406\u8acb\u6c42\n            response = await call_next(request)\n\n            # \u9023\u63a5\u6703\u5728\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u9000\u51fa\u6642\u81ea\u52d5\u95dc\u9589\n            return response\n\napp = FastAPI()\napp.add_middleware(DatabaseMiddleware)\n</code></pre>"},{"location":"middleware/04-advanced/#_4","title":"\u4e26\u884c\u8655\u7406","text":"<p>\u5728\u4e2d\u9593\u4ef6\u4e2d\u53ef\u4ee5\u4f7f\u7528 <code>asyncio.gather</code> \u4e26\u884c\u57f7\u884c\u591a\u500b\u7570\u6b65\u4efb\u52d9\uff1a</p> <pre><code>@app.middleware(\"http\")\nasync def parallel_tasks_middleware(request: Request, call_next):\n    # \u5b9a\u7fa9\u9700\u8981\u4e26\u884c\u57f7\u884c\u7684\u4efb\u52d9\n    async def fetch_user_data():\n        # \u5047\u8a2d\u9019\u662f\u5f9e\u6578\u64da\u5eab\u7372\u53d6\u7528\u6236\u6578\u64da\u7684\u7570\u6b65\u64cd\u4f5c\n        await asyncio.sleep(0.1)  # \u6a21\u64ec I/O \u5ef6\u9072\n        return {\"user_id\": 123, \"name\": \"John Doe\"}\n\n    async def fetch_metrics():\n        # \u5047\u8a2d\u9019\u662f\u5f9e\u6307\u6a19\u7cfb\u7d71\u7372\u53d6\u6578\u64da\u7684\u7570\u6b65\u64cd\u4f5c\n        await asyncio.sleep(0.1)  # \u6a21\u64ec I/O \u5ef6\u9072\n        return {\"api_calls\": 1000, \"error_rate\": 0.01}\n\n    # \u4e26\u884c\u57f7\u884c\u4efb\u52d9\n    user_data, metrics = await asyncio.gather(\n        fetch_user_data(),\n        fetch_metrics()\n    )\n\n    # \u5c07\u7d50\u679c\u5b58\u5132\u5230\u8acb\u6c42\u72c0\u614b\n    request.state.user_data = user_data\n    request.state.metrics = metrics\n\n    # \u7e7c\u7e8c\u8655\u7406\u8acb\u6c42\n    return await call_next(request)\n</code></pre>"},{"location":"middleware/04-advanced/#_5","title":"\u4e2d\u9593\u4ef6\u8207\u4f9d\u8cf4\u6ce8\u5165\u7d50\u5408","text":"<p>FastAPI \u7684\u4e2d\u9593\u4ef6\u548c\u4f9d\u8cf4\u6ce8\u5165\u7cfb\u7d71\u53ef\u4ee5\u5354\u540c\u5de5\u4f5c\uff0c\u5be6\u73fe\u66f4\u5f37\u5927\u7684\u529f\u80fd\uff1a</p>"},{"location":"middleware/04-advanced/#_6","title":"\u5728\u4e2d\u9593\u4ef6\u4e2d\u9810\u8655\u7406\u4f9d\u8cf4\u9805","text":"<pre><code>from fastapi import FastAPI, Request, Depends\nfrom starlette.middleware.base import BaseHTTPMiddleware\nfrom typing import Dict, Optional\n\n# \u5b9a\u7fa9\u4e00\u500b\u4f9d\u8cf4\u9805\nasync def get_current_user(request: Request) -&gt; Optional[Dict]:\n    auth_header = request.headers.get(\"Authorization\")\n    if not auth_header or not auth_header.startswith(\"Bearer \"):\n        return None\n\n    token = auth_header.split(\" \")[1]\n    # \u9019\u88e1\u7701\u7565\u4e86\u5be6\u969b\u7684\u4ee4\u724c\u9a57\u8b49\u908f\u8f2f\n    return {\"user_id\": 123, \"username\": \"john_doe\"}\n\nclass AuthPreprocessingMiddleware(BaseHTTPMiddleware):\n    async def dispatch(self, request: Request, call_next):\n        # \u9810\u5148\u89e3\u6790\u7528\u6236\u4fe1\u606f\n        user = await get_current_user(request)\n\n        # \u5c07\u7528\u6236\u4fe1\u606f\u5b58\u5132\u5230\u8acb\u6c42\u72c0\u614b\n        request.state.user = user\n\n        # \u8655\u7406\u8acb\u6c42\n        response = await call_next(request)\n        return response\n\napp = FastAPI()\napp.add_middleware(AuthPreprocessingMiddleware)\n\n# \u5728\u8def\u7531\u4e2d\u4f7f\u7528\u9810\u8655\u7406\u7684\u7528\u6236\u4fe1\u606f\n@app.get(\"/user/profile\")\nasync def get_profile(request: Request):\n    user = request.state.user\n    if not user:\n        return {\"detail\": \"Not authenticated\"}\n    return {\"profile\": user}\n</code></pre>"},{"location":"middleware/04-advanced/#_7","title":"\u81ea\u5b9a\u7fa9\u4e2d\u9593\u4ef6\u4f9d\u8cf4\u9805","text":"<p>\u5275\u5efa\u53ef\u5728\u591a\u500b\u4e2d\u9593\u4ef6\u4e4b\u9593\u5171\u4eab\u7684\u4f9d\u8cf4\u9805\uff1a</p> <pre><code>from fastapi import FastAPI, Request, Depends\nfrom starlette.middleware.base import BaseHTTPMiddleware\nfrom typing import Callable, TypeVar, Generic, Optional\n\nT = TypeVar('T')\n\nclass MiddlewareDependency(Generic[T]):\n    def __init__(self, dependency: Callable[..., T]):\n        self.dependency = dependency\n\n    async def resolve(self, request: Request) -&gt; T:\n        return await self.dependency(request)\n\n# \u5275\u5efa\u4e00\u500b\u914d\u7f6e\u4f9d\u8cf4\u9805\nasync def get_app_config(request: Request):\n    # \u9019\u88e1\u53ef\u4ee5\u662f\u5f9e\u6578\u64da\u5eab\u6216\u914d\u7f6e\u6587\u4ef6\u52a0\u8f09\u914d\u7f6e\n    return {\n        \"feature_flags\": {\n            \"new_ui\": True,\n            \"beta_features\": False\n        },\n        \"limits\": {\n            \"max_requests_per_minute\": 100\n        }\n    }\n\nconfig_dependency = MiddlewareDependency(get_app_config)\n\nclass ConfigMiddleware(BaseHTTPMiddleware):\n    async def dispatch(self, request: Request, call_next):\n        # \u89e3\u6790\u914d\u7f6e\u4f9d\u8cf4\u9805\n        config = await config_dependency.resolve(request)\n\n        # \u5c07\u914d\u7f6e\u5b58\u5132\u5230\u8acb\u6c42\u72c0\u614b\n        request.state.config = config\n\n        # \u8655\u7406\u8acb\u6c42\n        response = await call_next(request)\n        return response\n\napp = FastAPI()\napp.add_middleware(ConfigMiddleware)\n\n# \u5728\u8def\u7531\u4e2d\u4f7f\u7528\u914d\u7f6e\n@app.get(\"/features\")\nasync def get_features(request: Request):\n    config = request.state.config\n    return {\"features\": config[\"feature_flags\"]}\n</code></pre>"},{"location":"middleware/04-advanced/#_8","title":"\u4e2d\u9593\u4ef6\u4e0a\u4e0b\u6587\u7ba1\u7406","text":"<p>\u5728\u8907\u96dc\u61c9\u7528\u4e2d\uff0c\u6709\u6548\u7ba1\u7406\u4e2d\u9593\u4ef6\u4e0a\u4e0b\u6587\u53ef\u4ee5\u7c21\u5316\u4ee3\u78bc\u4e26\u63d0\u9ad8\u53ef\u7dad\u8b77\u6027\uff1a</p>"},{"location":"middleware/04-advanced/#_9","title":"\u8acb\u6c42\u4e0a\u4e0b\u6587\u7ba1\u7406","text":"<pre><code>from fastapi import FastAPI, Request\nfrom starlette.middleware.base import BaseHTTPMiddleware\nfrom contextvars import ContextVar\nfrom typing import Optional, Dict, Any\n\n# \u5b9a\u7fa9\u4e0a\u4e0b\u6587\u8b8a\u91cf\nrequest_id_var: ContextVar[str] = ContextVar(\"request_id\", default=None)\nuser_var: ContextVar[Optional[Dict]] = ContextVar(\"user\", default=None)\n\n# \u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\nclass RequestContextMiddleware(BaseHTTPMiddleware):\n    async def dispatch(self, request: Request, call_next):\n        # \u751f\u6210\u8acb\u6c42 ID\n        request_id = str(uuid.uuid4())\n\n        # \u8a2d\u7f6e\u4e0a\u4e0b\u6587\u8b8a\u91cf\n        request_id_token = request_id_var.set(request_id)\n\n        # \u7372\u53d6\u7528\u6236\u4fe1\u606f\uff08\u5982\u679c\u6709\uff09\n        auth_header = request.headers.get(\"Authorization\")\n        user = None\n        if auth_header and auth_header.startswith(\"Bearer \"):\n            # \u9019\u88e1\u7701\u7565\u4e86\u5be6\u969b\u7684\u4ee4\u724c\u9a57\u8b49\u908f\u8f2f\n            user = {\"user_id\": 123, \"username\": \"john_doe\"}\n\n        user_token = user_var.set(user)\n\n        try:\n            # \u8655\u7406\u8acb\u6c42\n            response = await call_next(request)\n\n            # \u6dfb\u52a0\u8acb\u6c42 ID \u5230\u97ff\u61c9\u982d\n            response.headers[\"X-Request-ID\"] = request_id\n\n            return response\n        finally:\n            # \u91cd\u7f6e\u4e0a\u4e0b\u6587\u8b8a\u91cf\n            request_id_var.reset(request_id_token)\n            user_var.reset(user_token)\n\napp = FastAPI()\napp.add_middleware(RequestContextMiddleware)\n\n# \u5728\u4efb\u4f55\u5730\u65b9\u7372\u53d6\u7576\u524d\u8acb\u6c42 ID\ndef get_current_request_id() -&gt; str:\n    return request_id_var.get()\n\n# \u5728\u4efb\u4f55\u5730\u65b9\u7372\u53d6\u7576\u524d\u7528\u6236\ndef get_current_user() -&gt; Optional[Dict]:\n    return user_var.get()\n\n# \u4f7f\u7528\u4e0a\u4e0b\u6587\u8b8a\u91cf\n@app.get(\"/context-demo\")\nasync def context_demo():\n    request_id = get_current_request_id()\n    user = get_current_user()\n\n    return {\n        \"request_id\": request_id,\n        \"user\": user\n    }\n</code></pre>"},{"location":"middleware/04-advanced/#_10","title":"\u5206\u5c64\u4e2d\u9593\u4ef6\u4e0a\u4e0b\u6587","text":"<p>\u8655\u7406\u8907\u96dc\u7684\u591a\u5c64\u4e2d\u9593\u4ef6\u5834\u666f\uff1a</p> <pre><code>from fastapi import FastAPI, Request\nfrom starlette.middleware.base import BaseHTTPMiddleware\nfrom typing import Dict, Any, List\nimport time\n\napp = FastAPI()\n\nclass ContextualizedMiddleware(BaseHTTPMiddleware):\n    def __init__(self, app, name: str):\n        super().__init__(app)\n        self.name = name\n\n    async def dispatch(self, request: Request, call_next):\n        # \u521d\u59cb\u5316\u4e0a\u4e0b\u6587\u5806\u758a\uff08\u5982\u679c\u4e0d\u5b58\u5728\uff09\n        if not hasattr(request.state, \"middleware_context\"):\n            request.state.middleware_context = []\n            request.state.timing_data = {}\n\n        # \u8a18\u9304\u9032\u5165\u4e2d\u9593\u4ef6\u7684\u6642\u9593\n        start_time = time.time()\n\n        # \u5c07\u7576\u524d\u4e2d\u9593\u4ef6\u6dfb\u52a0\u5230\u4e0a\u4e0b\u6587\u5806\u758a\n        context = {\"name\": self.name, \"entered_at\": start_time}\n        request.state.middleware_context.append(context)\n\n        try:\n            # \u8655\u7406\u8acb\u6c42\n            response = await call_next(request)\n\n            # \u8a18\u9304\u9000\u51fa\u4e2d\u9593\u4ef6\u7684\u6642\u9593\n            end_time = time.time()\n            elapsed = end_time - start_time\n\n            # \u66f4\u65b0\u8a08\u6642\u6578\u64da\n            request.state.timing_data[self.name] = elapsed\n\n            return response\n        finally:\n            # \u5f9e\u4e0a\u4e0b\u6587\u5806\u758a\u4e2d\u79fb\u9664\u7576\u524d\u4e2d\u9593\u4ef6\n            request.state.middleware_context.pop()\n\n# \u8a3b\u518a\u591a\u500b\u4e2d\u9593\u4ef6\u5be6\u4f8b\napp.add_middleware(ContextualizedMiddleware, name=\"outer\")\napp.add_middleware(ContextualizedMiddleware, name=\"middle\")\napp.add_middleware(ContextualizedMiddleware, name=\"inner\")\n\n@app.get(\"/context-stack\")\nasync def get_context_stack(request: Request):\n    return {\n        \"current_context\": request.state.middleware_context,\n        \"timing_data\": request.state.timing_data\n    }\n</code></pre>"},{"location":"middleware/04-advanced/#_11","title":"\u689d\u4ef6\u4e2d\u9593\u4ef6\u57f7\u884c","text":"<p>\u6839\u64da\u8acb\u6c42\u7279\u6027\u6709\u689d\u4ef6\u5730\u57f7\u884c\u4e2d\u9593\u4ef6\u908f\u8f2f\uff1a</p> <pre><code>from fastapi import FastAPI, Request\nfrom starlette.middleware.base import BaseHTTPMiddleware\nimport re\n\napp = FastAPI()\n\nclass ConditionalMiddleware(BaseHTTPMiddleware):\n    def __init__(\n        self, \n        app, \n        func,\n        include_paths: List[str] = None,\n        exclude_paths: List[str] = None,\n        include_methods: List[str] = None\n    ):\n        super().__init__(app)\n        self.func = func\n        self.include_paths = [re.compile(path) for path in (include_paths or [])]\n        self.exclude_paths = [re.compile(path) for path in (exclude_paths or [])]\n        self.include_methods = [m.upper() for m in (include_methods or [])]\n\n    def should_process(self, request: Request) -&gt; bool:\n        path = request.url.path\n        method = request.method\n\n        # \u6aa2\u67e5\u6392\u9664\u8def\u5f91\n        if any(pattern.match(path) for pattern in self.exclude_paths):\n            return False\n\n        # \u6aa2\u67e5\u5305\u542b\u8def\u5f91\n        if self.include_paths and not any(pattern.match(path) for pattern in self.include_paths):\n            return False\n\n        # \u6aa2\u67e5\u5305\u542b\u65b9\u6cd5\n        if self.include_methods and method not in self.include_methods:\n            return False\n\n        return True\n\n    async def dispatch(self, request: Request, call_next):\n        if self.should_process(request):\n            # \u57f7\u884c\u4e2d\u9593\u4ef6\u908f\u8f2f\n            return await self.func(request, call_next)\n        else:\n            # \u8df3\u904e\u4e2d\u9593\u4ef6\u908f\u8f2f\n            return await call_next(request)\n\n# \u5b9a\u7fa9\u4e2d\u9593\u4ef6\u908f\u8f2f\nasync def rate_limit_logic(request: Request, call_next):\n    # \u9019\u88e1\u5be6\u73fe\u9650\u6d41\u908f\u8f2f\n    print(f\"Rate limiting applied to {request.url.path}\")\n    return await call_next(request)\n\n# \u8a3b\u518a\u689d\u4ef6\u4e2d\u9593\u4ef6\napp.add_middleware(\n    ConditionalMiddleware,\n    func=rate_limit_logic,\n    include_paths=[r\"/api/.*\"],  # \u50c5\u5c0d /api/ \u958b\u982d\u7684\u8def\u5f91\u61c9\u7528\n    exclude_paths=[r\"/api/public/.*\"],  # \u6392\u9664 /api/public/ \u958b\u982d\u7684\u8def\u5f91\n    include_methods=[\"POST\", \"PUT\", \"DELETE\"]  # \u50c5\u5c0d\u5beb\u64cd\u4f5c\u61c9\u7528\n)\n</code></pre>"},{"location":"middleware/04-advanced/#_12","title":"\u4e2d\u9593\u4ef6\u5de5\u5ee0\u6a21\u5f0f","text":"<p>\u4f7f\u7528\u5de5\u5ee0\u6a21\u5f0f\u5275\u5efa\u53ef\u914d\u7f6e\u7684\u4e2d\u9593\u4ef6\uff1a</p> <pre><code>from fastapi import FastAPI, Request\nfrom starlette.middleware.base import BaseHTTPMiddleware\nfrom typing import Callable, Dict, Any, Optional\nimport json\nimport time\n\ndef create_logging_middleware(\n    log_format: str = \"default\",\n    include_headers: bool = False,\n    include_body: bool = False,\n    log_level: str = \"info\"\n):\n    \"\"\"\u4e2d\u9593\u4ef6\u5de5\u5ee0\u51fd\u6578\uff0c\u5275\u5efa\u53ef\u914d\u7f6e\u7684\u65e5\u8a8c\u4e2d\u9593\u4ef6\"\"\"\n\n    class LoggingMiddleware(BaseHTTPMiddleware):\n        async def dispatch(self, request: Request, call_next):\n            # \u8a18\u9304\u8acb\u6c42\u958b\u59cb\u6642\u9593\n            start_time = time.time()\n\n            # \u6536\u96c6\u8acb\u6c42\u4fe1\u606f\n            request_info = {\n                \"method\": request.method,\n                \"path\": request.url.path,\n                \"query_params\": dict(request.query_params),\n                \"client_host\": request.client.host if request.client else \"unknown\",\n            }\n\n            # \u6839\u64da\u914d\u7f6e\u6dfb\u52a0\u982d\u4fe1\u606f\n            if include_headers:\n                request_info[\"headers\"] = dict(request.headers)\n\n            # \u6839\u64da\u914d\u7f6e\u6dfb\u52a0\u8acb\u6c42\u9ad4\n            if include_body and request.method in [\"POST\", \"PUT\", \"PATCH\"]:\n                try:\n                    body = await request.body()\n                    if body:\n                        try:\n                            # \u5617\u8a66\u89e3\u6790 JSON\n                            request_info[\"body\"] = json.loads(body)\n                        except json.JSONDecodeError:\n                            # \u5982\u679c\u4e0d\u662f JSON\uff0c\u5247\u4fdd\u5b58\u539f\u59cb\u5b57\u7b26\u4e32\n                            request_info[\"body\"] = body.decode(\"utf-8\", errors=\"replace\")\n                except Exception:\n                    pass\n\n            # \u8a18\u9304\u8acb\u6c42\u4fe1\u606f\n            log_message = f\"Request: {json.dumps(request_info)}\"\n            if log_level == \"debug\":\n                print(f\"DEBUG: {log_message}\")\n            else:\n                print(f\"INFO: {log_message}\")\n\n            # \u8655\u7406\u8acb\u6c42\n            response = await call_next(request)\n\n            # \u8a08\u7b97\u8655\u7406\u6642\u9593\n            process_time = time.time() - start_time\n\n            # \u8a18\u9304\u97ff\u61c9\u4fe1\u606f\n            response_info = {\n                \"status_code\": response.status_code,\n                \"process_time\": f\"{process_time:.4f}s\"\n            }\n\n            # \u6839\u64da\u914d\u7f6e\u6dfb\u52a0\u97ff\u61c9\u982d\n            if include_headers:\n                response_info[\"headers\"] = dict(response.headers)\n\n            # \u8a18\u9304\u97ff\u61c9\u4fe1\u606f\n            log_message = f\"Response: {json.dumps(response_info)}\"\n            if log_level == \"debug\":\n                print(f\"DEBUG: {log_message}\")\n            else:\n                print(f\"INFO: {log_message}\")\n\n            return response\n\n    return LoggingMiddleware\n\napp = FastAPI()\n\n# \u4f7f\u7528\u5de5\u5ee0\u51fd\u6578\u5275\u5efa\u4e0d\u540c\u914d\u7f6e\u7684\u4e2d\u9593\u4ef6\napp.add_middleware(create_logging_middleware(log_level=\"debug\", include_headers=True))\n\n# \u53ef\u4ee5\u70ba\u4e0d\u540c\u7684\u61c9\u7528\u5275\u5efa\u4e0d\u540c\u914d\u7f6e\u7684\u4e2d\u9593\u4ef6\napi_app = FastAPI()\napi_app.add_middleware(create_logging_middleware(include_body=True, include_headers=True))\n\n# \u639b\u8f09\u5b50\u61c9\u7528\napp.mount(\"/api\", api_app)\n</code></pre>"},{"location":"middleware/04-advanced/#_13","title":"\u4e2d\u9593\u4ef6\u6e2c\u8a66\u7b56\u7565","text":"<p>\u6709\u6548\u6e2c\u8a66\u4e2d\u9593\u4ef6\u662f\u78ba\u4fdd\u5176\u6b63\u78ba\u6027\u548c\u7a69\u5b9a\u6027\u7684\u95dc\u9375\uff1a</p> <pre><code>import pytest\nfrom fastapi import FastAPI, Request\nfrom fastapi.testclient import TestClient\nfrom starlette.middleware.base import BaseHTTPMiddleware\n\n# \u5f85\u6e2c\u8a66\u7684\u4e2d\u9593\u4ef6\nclass HeaderMiddleware(BaseHTTPMiddleware):\n    def __init__(self, app, header_name: str, header_value: str):\n        super().__init__(app)\n        self.header_name = header_name\n        self.header_value = header_value\n\n    async def dispatch(self, request: Request, call_next):\n        response = await call_next(request)\n        response.headers[self.header_name] = self.header_value\n        return response\n\n# \u6e2c\u8a66\u51fd\u6578\ndef test_header_middleware():\n    app = FastAPI()\n    app.add_middleware(HeaderMiddleware, header_name=\"X-Test-Header\", header_value=\"test-value\")\n\n    @app.get(\"/test\")\n    async def test_endpoint():\n        return {\"message\": \"test\"}\n\n    client = TestClient(app)\n    response = client.get(\"/test\")\n\n    assert response.status_code == 200\n    assert response.headers[\"X-Test-Header\"] == \"test-value\"\n    assert response.json() == {\"message\": \"test\"}\n\n# \u6e2c\u8a66\u4e2d\u9593\u4ef6\u57f7\u884c\u9806\u5e8f\ndef test_middleware_order():\n    app = FastAPI()\n    execution_order = []\n\n    class OrderMiddleware(BaseHTTPMiddleware):\n        def __init__(self, app, name: str):\n            super().__init__(app)\n            self.name = name\n\n        async def dispatch(self, request: Request, call_next):\n            execution_order.append(f\"{self.name}_before\")\n            response = await call_next(request)\n            execution_order.append(f\"{self.name}_after\")\n            return response\n\n    app.add_middleware(OrderMiddleware, name=\"outer\")\n    app.add_middleware(OrderMiddleware, name=\"inner\")\n\n    @app.get(\"/test\")\n    async def test_endpoint():\n        execution_order.append(\"endpoint\")\n        return {\"message\": \"test\"}\n\n    client = TestClient(app)\n    client.get(\"/test\")\n\n    # \u9a57\u8b49\u57f7\u884c\u9806\u5e8f\n    assert execution_order == [\n        \"outer_before\",\n        \"inner_before\",\n        \"endpoint\",\n        \"inner_after\",\n        \"outer_after\"\n    ]\n</code></pre>"},{"location":"middleware/04-advanced/#_14","title":"\u52d5\u614b\u4e2d\u9593\u4ef6\u8a3b\u518a\u8207\u7ba1\u7406","text":"<p>\u5728\u904b\u884c\u6642\u52d5\u614b\u7ba1\u7406\u4e2d\u9593\u4ef6\uff1a</p> <pre><code>from fastapi import FastAPI, Request, Depends\nfrom starlette.middleware.base import BaseHTTPMiddleware\nfrom typing import Dict, List, Type, Optional\nimport inspect\n\napp = FastAPI()\n\n# \u4e2d\u9593\u4ef6\u8a3b\u518a\u8868\nmiddleware_registry: Dict[str, Type[BaseHTTPMiddleware]] = {}\n\n# \u52d5\u614b\u4e2d\u9593\u4ef6\u7ba1\u7406\u5668\nclass DynamicMiddlewareManager:\n    def __init__(self, app: FastAPI):\n        self.app = app\n        self.active_middleware: Dict[str, BaseHTTPMiddleware] = {}\n\n    def register_middleware_class(self, name: str, middleware_class: Type[BaseHTTPMiddleware]):\n        \"\"\"\u8a3b\u518a\u4e2d\u9593\u4ef6\u985e\u5230\u8a3b\u518a\u8868\"\"\"\n        middleware_registry[name] = middleware_class\n\n    def activate_middleware(self, name: str, **kwargs):\n        \"\"\"\u6fc0\u6d3b\u4e26\u914d\u7f6e\u4e2d\u9593\u4ef6\"\"\"\n        if name not in middleware_registry:\n            raise ValueError(f\"Middleware '{name}' not found in registry\")\n\n        if name in self.active_middleware:\n            raise ValueError(f\"Middleware '{name}' is already active\")\n\n        # \u5275\u5efa\u4e2d\u9593\u4ef6\u5be6\u4f8b\n        middleware_class = middleware_registry[name]\n\n        # \u6aa2\u67e5\u53c3\u6578\u662f\u5426\u5339\u914d\n        init_params = inspect.signature(middleware_class.__init__).parameters\n        valid_params = {k: v for k, v in kwargs.items() if k in init_params}\n\n        # \u5be6\u4f8b\u5316\u4e2d\u9593\u4ef6\n        middleware_instance = middleware_class(self.app, **valid_params)\n\n        # \u6dfb\u52a0\u5230\u61c9\u7528\n        self.app.add_middleware(type(middleware_instance), **valid_params)\n\n        # \u8a18\u9304\u6fc0\u6d3b\u7684\u4e2d\u9593\u4ef6\n        self.active_middleware[name] = middleware_instance\n\n        return f\"Middleware '{name}' activated with parameters: {valid_params}\"\n\n    def get_active_middleware(self) -&gt; List[str]:\n        \"\"\"\u7372\u53d6\u6240\u6709\u6fc0\u6d3b\u7684\u4e2d\u9593\u4ef6\"\"\"\n        return list(self.active_middleware.keys())\n\n# \u5275\u5efa\u4e2d\u9593\u4ef6\u7ba1\u7406\u5668\nmiddleware_manager = DynamicMiddlewareManager(app)\n\n# \u5b9a\u7fa9\u4e00\u4e9b\u793a\u4f8b\u4e2d\u9593\u4ef6\nclass HeaderInjectionMiddleware(BaseHTTPMiddleware):\n    def __init__(self, app, header_name: str, header_value: str):\n        super().__init__(app)\n        self.header_name = header_name\n        self.header_value = header_value\n\n    async def dispatch(self, request: Request, call_next):\n        response = await call_next(request)\n        response.headers[self.header_name] = self.header_value\n        return response\n\nclass RequestLimitMiddleware(BaseHTTPMiddleware):\n    def __init__(self, app, max_requests: int = 100):\n        super().__init__(app)\n        self.max_requests = max_requests\n        self.request_count = 0\n\n    async def dispatch(self, request: Request, call_next):\n        self.request_count += 1\n        if self.request_count &gt; self.max_requests:\n            return JSONResponse(\n                status_code=429,\n                content={\"detail\": \"Too many requests\"}\n            )\n        return await call_next(request)\n\n# \u8a3b\u518a\u4e2d\u9593\u4ef6\u985e\nmiddleware_manager.register_middleware_class(\"header_injection\", HeaderInjectionMiddleware)\nmiddleware_manager.register_middleware_class(\"request_limit\", RequestLimitMiddleware)\n\n# API \u7aef\u9ede\u4f86\u7ba1\u7406\u4e2d\u9593\u4ef6\n@app.post(\"/admin/middleware/{name}/activate\")\nasync def activate_middleware(name: str, params: Dict[str, Any]):\n    return middleware_manager.activate_middleware(name, **params)\n\n@app.get(\"/admin/middleware/active\")\nasync def get_active_middleware():\n    return {\"active_middleware\": middleware_manager.get_active_middleware()}\n</code></pre>"},{"location":"middleware/05-best-practice/","title":"FastAPI \u4e2d\u9593\u4ef6\u6700\u4f73\u5be6\u8e10","text":"<p>\u672c\u7ae0\u7bc0\u5c07\u4ecb\u7d39 FastAPI \u4e2d\u9593\u4ef6\u958b\u767c\u548c\u4f7f\u7528\u7684\u6700\u4f73\u5be6\u8e10\uff0c\u5e6b\u52a9\u958b\u767c\u8005\u69cb\u5efa\u66f4\u52a0\u5065\u58ef\u3001\u9ad8\u6548\u7684\u61c9\u7528\u3002</p>"},{"location":"middleware/05-best-practice/#_1","title":"\u4e2d\u9593\u4ef6\u8a2d\u8a08\u539f\u5247","text":""},{"location":"middleware/05-best-practice/#_2","title":"\u55ae\u4e00\u8077\u8cac\u539f\u5247","text":"<p>\u6bcf\u500b\u4e2d\u9593\u4ef6\u61c9\u8a72\u53ea\u8ca0\u8cac\u4e00\u500b\u660e\u78ba\u7684\u529f\u80fd\uff0c\u907f\u514d\u6df7\u5408\u591a\u7a2e\u4e0d\u76f8\u95dc\u7684\u908f\u8f2f\uff1a</p> <pre><code># \u4e0d\u63a8\u85a6\uff1a\u6df7\u5408\u591a\u7a2e\u529f\u80fd\u7684\u4e2d\u9593\u4ef6\n@app.middleware(\"http\")\nasync def mixed_middleware(request: Request, call_next):\n    # \u8a18\u9304\u8acb\u6c42 + \u8eab\u4efd\u9a57\u8b49 + \u8acb\u6c42\u9650\u6d41 + \u4fee\u6539\u97ff\u61c9...\n    # \u592a\u591a\u8077\u8cac\u5728\u4e00\u500b\u4e2d\u9593\u4ef6\u4e2d!\n\n# \u63a8\u85a6\uff1a\u5206\u96e2\u95dc\u6ce8\u9ede\u7684\u4e2d\u9593\u4ef6\n@app.middleware(\"http\")\nasync def logging_middleware(request: Request, call_next):\n    print(f\"Request: {request.method} {request.url.path}\")\n    return await call_next(request)\n\n@app.middleware(\"http\")\nasync def auth_middleware(request: Request, call_next):\n    # \u53ea\u8655\u7406\u8eab\u4efd\u9a57\u8b49\n    pass\n\n@app.middleware(\"http\")\nasync def rate_limit_middleware(request: Request, call_next):\n    # \u53ea\u8655\u7406\u901f\u7387\u9650\u5236\n    pass\n</code></pre>"},{"location":"middleware/05-best-practice/#_3","title":"\u53ef\u914d\u7f6e\u6027","text":"<p>\u8a2d\u8a08\u4e2d\u9593\u4ef6\u6642\uff0c\u61c9\u8a72\u8003\u616e\u5176\u53ef\u914d\u7f6e\u6027\uff0c\u4f7f\u5176\u80fd\u5920\u9069\u61c9\u4e0d\u540c\u7684\u4f7f\u7528\u5834\u666f\uff1a</p> <pre><code>class ConfigurableMiddleware(BaseHTTPMiddleware):\n    def __init__(\n        self, \n        app,\n        include_paths: List[str] = None,\n        exclude_paths: List[str] = None,\n        include_methods: List[str] = None,\n        debug_mode: bool = False\n    ):\n        super().__init__(app)\n        # \u5c07\u6240\u6709\u914d\u7f6e\u4fdd\u5b58\u70ba\u5be6\u4f8b\u8b8a\u91cf\n        self.include_paths = self._compile_patterns(include_paths)\n        self.exclude_paths = self._compile_patterns(exclude_paths)\n        self.include_methods = [m.upper() for m in (include_methods or [])]\n        self.debug_mode = debug_mode\n\n    # \u5176\u9918\u5be6\u73fe...\n</code></pre>"},{"location":"middleware/05-best-practice/#_4","title":"\u53ef\u6e2c\u8a66\u6027","text":"<p>\u5c07\u6838\u5fc3\u908f\u8f2f\u8207\u6846\u67b6\u96c6\u6210\u5206\u96e2\uff0c\u4fbf\u65bc\u55ae\u5143\u6e2c\u8a66\uff1a</p> <pre><code># \u5c07\u6838\u5fc3\u908f\u8f2f\u8207\u4e2d\u9593\u4ef6\u6846\u67b6\u5206\u96e2\nclass RateLimiter:\n    def __init__(self, limit: int = 100, window: int = 60):\n        self.limit = limit\n        self.window = window\n        self.requests = {}\n\n    def is_rate_limited(self, client_ip: str, current_time: float) -&gt; bool:\n        # \u6838\u5fc3\u9650\u6d41\u908f\u8f2f\n        pass\n\n# \u4f7f\u7528\u6838\u5fc3\u908f\u8f2f\u7684\u4e2d\u9593\u4ef6\nclass RateLimitMiddleware(BaseHTTPMiddleware):\n    def __init__(self, app, limiter: RateLimiter = None, **kwargs):\n        super().__init__(app)\n        self.limiter = limiter or RateLimiter(**kwargs)\n\n    async def dispatch(self, request: Request, call_next):\n        # \u4f7f\u7528\u7368\u7acb\u7684\u9650\u6d41\u5668\n        pass\n</code></pre>"},{"location":"middleware/05-best-practice/#_5","title":"\u6027\u80fd\u512a\u5316","text":""},{"location":"middleware/05-best-practice/#_6","title":"\u907f\u514d\u963b\u585e\u64cd\u4f5c","text":"<p>\u5728\u4e2d\u9593\u4ef6\u4e2d\u61c9\u907f\u514d\u4efb\u4f55\u963b\u585e\u64cd\u4f5c\uff0c\u4ee5\u514d\u5f71\u97ff\u6574\u500b\u61c9\u7528\u7684\u6027\u80fd\uff1a</p> <pre><code># \u4e0d\u63a8\u85a6\uff1a\u5728\u4e2d\u9593\u4ef6\u4e2d\u4f7f\u7528\u963b\u585e\u64cd\u4f5c\n@app.middleware(\"http\")\nasync def blocking_middleware(request: Request, call_next):\n    time.sleep(1)  # \u963b\u585e\u6574\u500b\u4e8b\u4ef6\u5faa\u74b0\uff01\n\n    # \u963b\u585e I/O\n    with open(\"log.txt\", \"a\") as f:\n        f.write(f\"{request.method} {request.url.path}\\n\")\n\n    return await call_next(request)\n\n# \u63a8\u85a6\uff1a\u4f7f\u7528\u975e\u963b\u585e\u64cd\u4f5c\n@app.middleware(\"http\")\nasync def non_blocking_middleware(request: Request, call_next):\n    await asyncio.sleep(1)  # \u975e\u963b\u585e\n\n    # \u975e\u963b\u585e I/O\n    async with aiofiles.open(\"log.txt\", \"a\") as f:\n        await f.write(f\"{request.method} {request.url.path}\\n\")\n\n    return await call_next(request)\n</code></pre>"},{"location":"middleware/05-best-practice/#_7","title":"\u7de9\u5b58\u91cd\u8907\u8a08\u7b97","text":"<p>\u5c0d\u65bc\u91cd\u8907\u8a08\u7b97\u7684\u7d50\u679c\uff0c\u61c9\u8a72\u4f7f\u7528\u7de9\u5b58\u4f86\u63d0\u9ad8\u6027\u80fd\uff1a</p> <pre><code>class CachingMiddleware(BaseHTTPMiddleware):\n    def __init__(self, app):\n        super().__init__(app)\n        self.get_config = lru_cache(maxsize=100)(self._get_config)\n\n    async def dispatch(self, request: Request, call_next):\n        # \u7372\u53d6\u914d\u7f6e\uff08\u7d50\u679c\u6703\u88ab\u7de9\u5b58\uff09\n        config = self.get_config(request.url.path)\n        request.state.config = config\n        return await call_next(request)\n\n    def _get_config(self, path: str) -&gt; dict:\n        \"\"\"\u6602\u8cb4\u7684\u64cd\u4f5c\uff0c\u4f46\u7d50\u679c\u6703\u88ab\u7de9\u5b58\"\"\"\n        # \u6a21\u64ec\u6602\u8cb4\u7684\u8a08\u7b97\u6216\u6578\u64da\u5eab\u67e5\u8a62\n        time.sleep(0.1)\n        # \u8fd4\u56de\u8def\u5f91\u76f8\u95dc\u7684\u914d\u7f6e\n        return {\"rate_limit\": 100, \"cache_ttl\": 300}\n</code></pre>"},{"location":"middleware/05-best-practice/#_8","title":"\u5ef6\u9072\u52a0\u8f09","text":"<p>\u5c0d\u65bc\u4e0d\u662f\u6bcf\u500b\u8acb\u6c42\u90fd\u9700\u8981\u7684\u8cc7\u6e90\uff0c\u61c9\u8a72\u63a1\u7528\u5ef6\u9072\u52a0\u8f09\u7b56\u7565\uff1a</p> <pre><code>class ExternalServiceMiddleware(BaseHTTPMiddleware):\n    def __init__(self, app):\n        super().__init__(app)\n        self._session = None  # \u4e0d\u7acb\u5373\u5275\u5efa\u6703\u8a71\n\n    @property\n    async def session(self):\n        \"\"\"\u5ef6\u9072\u521d\u59cb\u5316 HTTP \u6703\u8a71\"\"\"\n        if self._session is None:\n            self._session = aiohttp.ClientSession()\n        return self._session\n\n    async def dispatch(self, request: Request, call_next):\n        if request.url.path.startswith(\"/external/\"):\n            # \u53ea\u6709\u5728\u9700\u8981\u6642\u624d\u7372\u53d6\u6703\u8a71\n            session = await self.session\n            # \u4f7f\u7528\u6703\u8a71...\n\n        return await call_next(request)\n</code></pre>"},{"location":"middleware/05-best-practice/#_9","title":"\u932f\u8aa4\u8655\u7406\u8207\u7a69\u5065\u6027","text":""},{"location":"middleware/05-best-practice/#_10","title":"\u5168\u9762\u7684\u932f\u8aa4\u8655\u7406","text":"<p>\u4e2d\u9593\u4ef6\u61c9\u8a72\u8655\u7406\u6240\u6709\u53ef\u80fd\u767c\u751f\u7684\u7570\u5e38\uff0c\u78ba\u4fdd\u61c9\u7528\u7684\u7a69\u5b9a\u6027\uff1a</p> <pre><code>class RobustMiddleware(BaseHTTPMiddleware):\n    async def dispatch(self, request: Request, call_next):\n        try:\n            # \u4e2d\u9593\u4ef6\u908f\u8f2f...\n            response = await call_next(request)\n            return response\n\n        except HTTPException as e:\n            # \u8655\u7406 FastAPI \u7684 HTTP \u7570\u5e38\n            logger.warning(f\"HTTP Exception: {e.detail}\")\n            raise  # \u91cd\u65b0\u62cb\u51fa HTTP \u7570\u5e38\n\n        except Exception as e:\n            # \u8655\u7406\u672a\u6355\u7372\u7684\u7570\u5e38\n            logger.error(f\"Unhandled exception: {str(e)}\\n{traceback.format_exc()}\")\n\n            # \u8fd4\u56de\u7528\u6236\u53cb\u597d\u7684\u932f\u8aa4\u4fe1\u606f\n            return JSONResponse(\n                status_code=500,\n                content={\"detail\": \"An unexpected error occurred\"}\n            )\n</code></pre>"},{"location":"middleware/05-best-practice/#_11","title":"\u512a\u96c5\u964d\u7d1a","text":"<p>\u7576\u67d0\u4e9b\u529f\u80fd\u4e0d\u53ef\u7528\u6642\uff0c\u4e2d\u9593\u4ef6\u61c9\u8a72\u80fd\u5920\u512a\u96c5\u964d\u7d1a\uff1a</p> <pre><code>class ExternalServiceMiddleware(BaseHTTPMiddleware):\n    def __init__(self, app, service_url: str, timeout: float = 1.0):\n        super().__init__(app)\n        self.service_url = service_url\n        self.timeout = timeout\n        self.fallback_data = {\"status\": \"offline\", \"data\": []}  # \u5f8c\u5099\u6578\u64da\n\n    async def dispatch(self, request: Request, call_next):\n        try:\n            # \u5617\u8a66\u7372\u53d6\u5916\u90e8\u670d\u52d9\u6578\u64da\uff0c\u8a2d\u7f6e\u8d85\u6642\n            async with asyncio.timeout(self.timeout):\n                # \u8abf\u7528\u5916\u90e8\u670d\u52d9...\n                request.state.service_data = data\n        except Exception as e:\n            # \u670d\u52d9\u4e0d\u53ef\u7528\uff0c\u4f7f\u7528\u5f8c\u5099\u6578\u64da\n            logger.warning(f\"External service unavailable: {str(e)}\")\n            request.state.service_data = self.fallback_data\n\n        # \u7e7c\u7e8c\u8655\u7406\u8acb\u6c42\n        return await call_next(request)\n</code></pre>"},{"location":"middleware/05-best-practice/#_12","title":"\u91cd\u8a66\u6a5f\u5236","text":"<p>\u5c0d\u65bc\u4e0d\u53ef\u9760\u7684\u64cd\u4f5c\uff0c\u53ef\u4ee5\u5be6\u73fe\u91cd\u8a66\u6a5f\u5236\uff1a</p> <pre><code>class RetryMiddleware(BaseHTTPMiddleware):\n    def __init__(self, app, max_retries: int = 3, retry_delay: float = 0.1):\n        super().__init__(app)\n        self.max_retries = max_retries\n        self.retry_delay = retry_delay\n\n    async def retry_with_backoff(self, func, *args, **kwargs):\n        \"\"\"\u4f7f\u7528\u9000\u907f\u7b56\u7565\u91cd\u8a66\u51fd\u6578\"\"\"\n        retries = 0\n        while True:\n            try:\n                return await func(*args, **kwargs)\n            except Exception as e:\n                retries += 1\n                if retries &gt; self.max_retries:\n                    raise\n\n                # \u8a08\u7b97\u5ef6\u9072\u6642\u9593\uff08\u6307\u6578\u9000\u907f\uff09\n                delay = self.retry_delay * (2 ** (retries - 1))\n                await asyncio.sleep(delay)\n\n    async def dispatch(self, request: Request, call_next):\n        # \u5c0d\u65bc\u95dc\u9375 API\uff0c\u4f7f\u7528\u91cd\u8a66\u6a5f\u5236\n        if request.url.path.startswith(\"/api/critical/\"):\n            return await self.retry_with_backoff(call_next, request)\n        else:\n            return await call_next(request)\n</code></pre>"},{"location":"middleware/05-best-practice/#_13","title":"\u4e2d\u9593\u4ef6\u7d44\u7e54\u8207\u7ba1\u7406","text":""},{"location":"middleware/05-best-practice/#_14","title":"\u4e2d\u9593\u4ef6\u5206\u7d44","text":"<p>\u5c0d\u76f8\u95dc\u7684\u4e2d\u9593\u4ef6\u9032\u884c\u5206\u7d44\uff0c\u4fbf\u65bc\u7ba1\u7406\u548c\u914d\u7f6e\uff1a</p> <pre><code>class MiddlewareGroup:\n    def __init__(self, app: FastAPI, name: str):\n        self.app = app\n        self.name = name\n        self.middleware_list = []\n\n    def add(self, middleware_class, **options):\n        \"\"\"\u6dfb\u52a0\u4e2d\u9593\u4ef6\u5230\u7d44\"\"\"\n        self.middleware_list.append((middleware_class, options))\n        return self\n\n    def apply(self):\n        \"\"\"\u5c07\u6240\u6709\u4e2d\u9593\u4ef6\u61c9\u7528\u5230\u61c9\u7528\"\"\"\n        # \u53cd\u5411\u61c9\u7528\uff0c\u78ba\u4fdd\u57f7\u884c\u9806\u5e8f\u8207\u6dfb\u52a0\u9806\u5e8f\u4e00\u81f4\n        for middleware_class, options in reversed(self.middleware_list):\n            self.app.add_middleware(middleware_class, **options)\n        return self.app\n\n# \u4f7f\u7528\u793a\u4f8b\nsecurity_middleware = MiddlewareGroup(app, \"security\")\nsecurity_middleware.add(\n    CORSMiddleware,\n    allow_origins=[\"https://example.com\"]\n).add(\n    AuthMiddleware,\n    secret_key=\"your-secret-key\"\n)\n\n# \u61c9\u7528\u5b89\u5168\u4e2d\u9593\u4ef6\u7d44\nsecurity_middleware.apply()\n</code></pre>"},{"location":"middleware/05-best-practice/#_15","title":"\u689d\u4ef6\u4e2d\u9593\u4ef6\u61c9\u7528","text":"<p>\u6839\u64da\u74b0\u5883\u6216\u914d\u7f6e\u689d\u4ef6\u61c9\u7528\u4e0d\u540c\u7684\u4e2d\u9593\u4ef6\uff1a</p> <pre><code># \u7372\u53d6\u74b0\u5883\u914d\u7f6e\nENV = os.environ.get(\"APP_ENV\", \"development\")\nDEBUG = os.environ.get(\"DEBUG\", \"false\").lower() == \"true\"\n\n# \u6839\u64da\u74b0\u5883\u61c9\u7528\u4e0d\u540c\u7684\u4e2d\u9593\u4ef6\nif ENV == \"development\":\n    # \u958b\u767c\u74b0\u5883\u4e2d\u9593\u4ef6\n    app.add_middleware(\n        LoggingMiddleware,\n        log_level=\"debug\",\n        include_headers=True\n    )\nelif ENV == \"production\":\n    # \u751f\u7522\u74b0\u5883\u4e2d\u9593\u4ef6\n    app.add_middleware(\n        LoggingMiddleware,\n        log_level=\"info\"\n    )\n\n    app.add_middleware(\n        RateLimitMiddleware,\n        limit=100\n    )\n\n# \u6240\u6709\u74b0\u5883\u901a\u7528\u7684\u4e2d\u9593\u4ef6\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"] if ENV == \"development\" else [\"https://example.com\"]\n)\n</code></pre>"},{"location":"middleware/05-best-practice/#_16","title":"\u76e3\u63a7\u8207\u53ef\u89c0\u6e2c\u6027","text":""},{"location":"middleware/05-best-practice/#_17","title":"\u4e2d\u9593\u4ef6\u6027\u80fd\u6307\u6a19","text":"<p>\u6536\u96c6\u548c\u5831\u544a\u4e2d\u9593\u4ef6\u6027\u80fd\u6307\u6a19\uff0c\u5e6b\u52a9\u8b58\u5225\u6f5b\u5728\u554f\u984c\uff1a</p> <pre><code>class MetricsMiddleware(BaseHTTPMiddleware):\n    def __init__(self, app):\n        super().__init__(app)\n        self.request_times = {}  # \u5132\u5b58\u8acb\u6c42\u8655\u7406\u6642\u9593\n\n    async def dispatch(self, request: Request, call_next):\n        path = request.url.path\n        method = request.method\n        endpoint = f\"{method} {path}\"\n\n        # \u8a18\u9304\u958b\u59cb\u6642\u9593\n        start_time = time.time()\n\n        # \u8655\u7406\u8acb\u6c42\n        response = await call_next(request)\n\n        # \u8a08\u7b97\u8655\u7406\u6642\u9593\n        process_time = time.time() - start_time\n\n        # \u66f4\u65b0\u6307\u6a19\n        if endpoint not in self.request_times:\n            self.request_times[endpoint] = []\n\n        self.request_times[endpoint].append(process_time)\n\n        # \u9650\u5236\u5217\u8868\u5927\u5c0f\n        if len(self.request_times[endpoint]) &gt; 100:\n            self.request_times[endpoint] = self.request_times[endpoint][-100:]\n\n        # \u6bcf 100 \u500b\u8acb\u6c42\u5831\u544a\u4e00\u6b21\n        if len(self.request_times[endpoint]) % 100 == 0:\n            avg_time = sum(self.request_times[endpoint]) / len(self.request_times[endpoint])\n            print(f\"Average processing time for {endpoint}: {avg_time:.4f}s\")\n\n        return response\n</code></pre>"},{"location":"middleware/05-best-practice/#_18","title":"\u8acb\u6c42\u8ddf\u8e64","text":"<p>\u6dfb\u52a0\u8acb\u6c42\u8ddf\u8e64\u6a19\u8b58\u7b26\uff0c\u4fbf\u65bc\u65e5\u8a8c\u95dc\u806f\u548c\u554f\u984c\u6392\u67e5\uff1a</p> <pre><code>class RequestTracingMiddleware(BaseHTTPMiddleware):\n    async def dispatch(self, request: Request, call_next):\n        # \u751f\u6210\u552f\u4e00\u7684\u8acb\u6c42 ID\n        request_id = str(uuid.uuid4())\n\n        # \u5c07\u8acb\u6c42 ID \u6dfb\u52a0\u5230\u8acb\u6c42\u72c0\u614b\n        request.state.request_id = request_id\n\n        # \u8a18\u9304\u8acb\u6c42\u958b\u59cb\n        print(f\"[{request_id}] Request started: {request.method} {request.url.path}\")\n\n        # \u8655\u7406\u8acb\u6c42\n        response = await call_next(request)\n\n        # \u5c07\u8acb\u6c42 ID \u6dfb\u52a0\u5230\u97ff\u61c9\u982d\n        response.headers[\"X-Request-ID\"] = request_id\n\n        # \u8a18\u9304\u8acb\u6c42\u7d50\u675f\n        print(f\"[{request_id}] Request completed: Status {response.status_code}\")\n\n        return response\n</code></pre>"},{"location":"middleware/05-best-practice/#_19","title":"\u5e38\u898b\u9677\u9631\u8207\u89e3\u6c7a\u65b9\u6848","text":""},{"location":"middleware/05-best-practice/#_20","title":"\u4e2d\u9593\u4ef6\u57f7\u884c\u9806\u5e8f","text":"<p>FastAPI \u4e2d\u9593\u4ef6\u7684\u57f7\u884c\u9806\u5e8f\u8207\u6dfb\u52a0\u9806\u5e8f\u76f8\u53cd\uff0c\u5f8c\u6dfb\u52a0\u7684\u5148\u57f7\u884c\uff1a</p> <pre><code># \u4e2d\u9593\u4ef6\u57f7\u884c\u9806\u5e8f\uff1aC -&gt; B -&gt; A\napp.add_middleware(MiddlewareA)\napp.add_middleware(MiddlewareB)\napp.add_middleware(MiddlewareC)\n\n# \u5982\u679c\u9700\u8981\u78ba\u4fdd\u7279\u5b9a\u9806\u5e8f\uff0c\u53ef\u4ee5\u4f7f\u7528\u6578\u5b57\u524d\u7db4\u547d\u540d\napp.add_middleware(Middleware3_Last)\napp.add_middleware(Middleware2_Middle)\napp.add_middleware(Middleware1_First)\n</code></pre>"},{"location":"middleware/05-best-practice/#_21","title":"\u907f\u514d\u4fee\u6539\u4e0d\u53ef\u8b8a\u5c0d\u8c61","text":"<p>\u8acb\u6c42\u548c\u97ff\u61c9\u7684\u67d0\u4e9b\u90e8\u5206\u662f\u4e0d\u53ef\u8b8a\u7684\uff0c\u61c9\u8a72\u5c0f\u5fc3\u8655\u7406\uff1a</p> <pre><code># \u932f\u8aa4\uff1a\u5617\u8a66\u76f4\u63a5\u4fee\u6539\u8acb\u6c42\u7684 URL\n@app.middleware(\"http\")\nasync def wrong_middleware(request: Request, call_next):\n    # \u9019\u6703\u5931\u6557\uff0c\u56e0\u70ba URL \u662f\u4e0d\u53ef\u8b8a\u7684\n    request.url.path = \"/modified\" + request.url.path\n    return await call_next(request)\n\n# \u6b63\u78ba\uff1a\u4f7f\u7528\u8acb\u6c42\u72c0\u614b\u5b58\u5132\u984d\u5916\u4fe1\u606f\n@app.middleware(\"http\")\nasync def correct_middleware(request: Request, call_next):\n    # \u5c07\u539f\u59cb\u8def\u5f91\u5b58\u5132\u5728\u8acb\u6c42\u72c0\u614b\u4e2d\n    request.state.original_path = request.url.path\n    return await call_next(request)\n</code></pre>"},{"location":"middleware/05-best-practice/#_22","title":"\u6b63\u78ba\u8655\u7406\u97ff\u61c9\u6d41","text":"<p>\u5c0d\u65bc\u6d41\u5f0f\u97ff\u61c9\uff0c\u4e2d\u9593\u4ef6\u9700\u8981\u7279\u6b8a\u8655\u7406\uff1a</p> <pre><code>class StreamMiddleware(BaseHTTPMiddleware):\n    async def dispatch(self, request: Request, call_next):\n        response = await call_next(request)\n\n        # \u6aa2\u67e5\u662f\u5426\u70ba\u6d41\u5f0f\u97ff\u61c9\n        if response.__class__.__name__ == \"StreamingResponse\":\n            # \u4e0d\u8981\u5617\u8a66\u8b80\u53d6\u6216\u4fee\u6539\u97ff\u61c9\u9ad4\n            return response\n\n        # \u8655\u7406\u666e\u901a\u97ff\u61c9\n        # ...\n\n        return response\n</code></pre>"},{"location":"middleware/05-best-practice/#_23","title":"\u95dc\u9375\u8981\u9ede","text":"<ul> <li>\u9075\u5faa\u55ae\u4e00\u8077\u8cac\u539f\u5247\uff0c\u6bcf\u500b\u4e2d\u9593\u4ef6\u53ea\u8655\u7406\u4e00\u500b\u95dc\u6ce8\u9ede</li> <li>\u8a2d\u8a08\u53ef\u914d\u7f6e\u3001\u53ef\u6e2c\u8a66\u7684\u4e2d\u9593\u4ef6</li> <li>\u907f\u514d\u963b\u585e\u64cd\u4f5c\uff0c\u4f7f\u7528\u7de9\u5b58\u548c\u5ef6\u9072\u52a0\u8f09\u63d0\u9ad8\u6027\u80fd</li> <li>\u5be6\u73fe\u5168\u9762\u7684\u932f\u8aa4\u8655\u7406\u548c\u512a\u96c5\u964d\u7d1a\u6a5f\u5236</li> <li>\u6839\u64da\u74b0\u5883\u548c\u9700\u6c42\u7d44\u7e54\u548c\u7ba1\u7406\u4e2d\u9593\u4ef6</li> <li>\u6dfb\u52a0\u76e3\u63a7\u548c\u53ef\u89c0\u6e2c\u6027\u529f\u80fd</li> <li>\u6ce8\u610f\u4e2d\u9593\u4ef6\u57f7\u884c\u9806\u5e8f\u548c\u4e0d\u53ef\u8b8a\u5c0d\u8c61\u8655\u7406</li> </ul> <p>\u901a\u904e\u5408\u7406\u61c9\u7528\u9019\u4e9b\u6700\u4f73\u5be6\u8e10\uff0c\u53ef\u4ee5\u5145\u5206\u767c\u63ee FastAPI \u4e2d\u9593\u4ef6\u7684\u5f37\u5927\u529f\u80fd\uff0c\u69cb\u5efa\u9ad8\u8cea\u91cf\u7684 Web API\u3002</p>"},{"location":"openapi/01-introduction/","title":"\u57fa\u790e\u6982\u5ff5","text":""},{"location":"openapi/01-introduction/#fastapi","title":"FastAPI \u7684\u4e3b\u8981\u7279\u9ede","text":"\u7279\u9ede \u8aaa\u660e \u9ad8\u6548\u80fd \u2022 \u57fa\u65bc Starlette \u548c Uvicorn\uff0c\u6027\u80fd\u8207 Node.js \u548c Go \u76f8\u7576\u2022 \u652f\u6301\u7570\u6b65\u8655\u7406\uff0c\u9069\u5408\u9ad8\u4f75\u767c\u61c9\u7528 \u81ea\u52d5\u8cc7\u6599\u9a57\u8b49 \u2022 \u5229\u7528 Python \u985e\u578b\u63d0\u793a\uff08Type Hints\uff09\u9032\u884c\u81ea\u52d5\u8cc7\u6599\u9a57\u8b49\u2022 \u8207 Pydantic \u6df1\u5ea6\u6574\u5408\uff0c\u63d0\u4f9b\u5f37\u5927\u7684\u8cc7\u6599\u6a21\u578b\u5b9a\u7fa9\u548c\u9a57\u8b49\u529f\u80fd \u81ea\u52d5\u6587\u6a94\u751f\u6210 \u2022 \u81ea\u52d5\u751f\u6210 OpenAPI \u6587\u6a94\u2022 \u5167\u5efa Swagger UI \u548c ReDoc \u4ecb\u9762 \u958b\u767c\u8005\u53cb\u597d \u2022 \u7de8\u8f2f\u5668\u652f\u6301\u5b8c\u5584\uff08\u81ea\u52d5\u88dc\u5168\u3001\u985e\u578b\u6aa2\u67e5\uff09\u2022 \u6e05\u6670\u7684\u932f\u8aa4\u63d0\u793a\u2022 \u7c21\u6f54\u76f4\u89c0\u7684 API \u8a2d\u8a08 \u6a19\u6e96\u517c\u5bb9 \u2022 \u5b8c\u5168\u517c\u5bb9 OpenAPI \u548c JSON Schema \u6a19\u6e96\u2022 \u652f\u6301 OAuth2\u3001JWT \u7b49\u8a8d\u8b49\u6a5f\u5236"},{"location":"openapi/01-introduction/#openapi-schema","title":"OpenAPI Schema","text":"<p>OpenAPI \u898f\u7bc4\uff08\u524d\u8eab\u70ba Swagger\uff09\u662f\u4e00\u500b\u7528\u65bc\u63cf\u8ff0 RESTful API \u7684\u6a19\u6e96\u5316\u898f\u7bc4\u3002\u5b83\u5b9a\u7fa9\u4e86\u4e00\u7a2e\u8207\u7a0b\u5f0f\u8a9e\u8a00\u7121\u95dc\u7684\u6a19\u6e96\u683c\u5f0f\uff0c\u7528\u65bc\u63cf\u8ff0 API \u7684\u7d50\u69cb\u3001\u884c\u70ba\u548c\u80fd\u529b\u3002</p>"},{"location":"openapi/01-introduction/#openapi-schema_1","title":"OpenAPI Schema \u7684\u6838\u5fc3\u6982\u5ff5","text":"\u6982\u5ff5 \u8aaa\u660e API \u63cf\u8ff0\u6587\u6a94 \u2022 \u4f7f\u7528 JSON \u6216 YAML \u683c\u5f0f\u5b9a\u7fa9\u2022 \u5305\u542b API \u7684\u6240\u6709\u65b9\u9762\uff1a\u7aef\u9ede\u3001\u64cd\u4f5c\u3001\u53c3\u6578\u3001\u97ff\u61c9\u7b49 \u4e3b\u8981\u7d44\u6210\u90e8\u5206 \u2022 Info \u5c0d\u8c61\uff1a\u63d0\u4f9b API \u7684\u5143\u6578\u64da\uff0c\u5982\u6a19\u984c\u3001\u63cf\u8ff0\u3001\u7248\u672c\u7b49\u2022 Paths \u5c0d\u8c61\uff1a\u5b9a\u7fa9 API \u7684\u7aef\u9ede\u548c\u64cd\u4f5c\u2022 Components \u5c0d\u8c61\uff1a\u5b9a\u7fa9\u53ef\u91cd\u7528\u7684 Schema \u7d44\u4ef6\u2022 Security \u5c0d\u8c61\uff1a\u5b9a\u7fa9\u5b89\u5168\u6a5f\u5236 \u8cc7\u6599\u6a21\u578b\u5b9a\u7fa9 \u2022 \u4f7f\u7528 JSON Schema \u5b9a\u7fa9\u8acb\u6c42\u548c\u97ff\u61c9\u7684\u8cc7\u6599\u7d50\u69cb\u2022 \u652f\u6301\u8907\u96dc\u7684\u8cc7\u6599\u985e\u578b\u548c\u9a57\u8b49\u898f\u5247 \u6587\u6a94\u751f\u6210 \u2022 \u53ef\u4ee5\u5f9e OpenAPI Schema \u81ea\u52d5\u751f\u6210\u4ea4\u4e92\u5f0f\u6587\u6a94\u2022 \u5e38\u7528\u5de5\u5177\u5305\u62ec Swagger UI\u3001ReDoc \u7b49"},{"location":"openapi/01-introduction/#openapi","title":"OpenAPI \u7684\u512a\u52e2","text":"\u512a\u52e2 \u8aaa\u660e \u6a19\u6e96\u5316 \u63d0\u4f9b API \u63cf\u8ff0\u7684\u901a\u7528\u8a9e\u8a00\uff0c\u4fc3\u9032\u4e0d\u540c\u7cfb\u7d71\u9593\u7684\u4e92\u64cd\u4f5c\u6027 \u5de5\u5177\u751f\u614b \u8c4a\u5bcc\u7684\u5de5\u5177\u652f\u6301\uff0c\u5305\u62ec\u6587\u6a94\u751f\u6210\u3001\u5ba2\u6236\u7aef\u751f\u6210\u3001\u6e2c\u8a66\u5de5\u5177\u7b49 \u81ea\u52d5\u5316 \u652f\u6301\u81ea\u52d5\u5316\u6e2c\u8a66\u3001\u4ee3\u78bc\u751f\u6210\u548c\u6587\u6a94\u751f\u6210 \u53ef\u767c\u73fe\u6027 \u4f7f API \u66f4\u5bb9\u6613\u88ab\u767c\u73fe\u548c\u7406\u89e3"},{"location":"openapi/01-introduction/#fastapi-openapi","title":"FastAPI \u8207 OpenAPI \u7684\u95dc\u4fc2","text":"<p>FastAPI \u8207 OpenAPI \u4e4b\u9593\u5b58\u5728\u5bc6\u5207\u7684\u95dc\u4fc2\uff0c\u9019\u662f FastAPI \u6846\u67b6\u7684\u6838\u5fc3\u512a\u52e2\u4e4b\u4e00\u3002</p>"},{"location":"openapi/01-introduction/#openapi-schema_2","title":"\u81ea\u52d5\u751f\u6210 OpenAPI Schema","text":"\u7279\u9ede \u8aaa\u660e \u5f9e\u4ee3\u78bc\u5230\u6587\u6a94 \u2022 FastAPI \u5206\u6790\u60a8\u7684\u8def\u7531\u51fd\u6578\u3001\u53c3\u6578\u985e\u578b\u548c Pydantic \u6a21\u578b\u2022 \u81ea\u52d5\u751f\u6210\u5b8c\u6574\u7684 OpenAPI Schema\u2022 \u7121\u9700\u624b\u52d5\u7de8\u5beb\u6587\u6a94\u6216\u8a3b\u91cb \u5373\u6642\u66f4\u65b0 \u2022 \u7576\u4ee3\u78bc\u8b8a\u66f4\u6642\uff0c\u6587\u6a94\u81ea\u52d5\u66f4\u65b0\u2022 \u78ba\u4fdd\u6587\u6a94\u8207\u5be6\u969b API \u884c\u70ba\u59cb\u7d42\u540c\u6b65"},{"location":"openapi/01-introduction/#_2","title":"\u96d9\u5411\u9a57\u8b49","text":"\u9a57\u8b49\u985e\u578b \u8aaa\u660e \u8acb\u6c42\u9a57\u8b49 \u2022 \u6839\u64da\u5b9a\u7fa9\u7684\u53c3\u6578\u985e\u578b\u548c\u7d04\u675f\u9a57\u8b49\u50b3\u5165\u7684\u8acb\u6c42\u2022 \u81ea\u52d5\u5c07 JSON \u8acb\u6c42\u9ad4\u8f49\u63db\u70ba Python \u5c0d\u8c61\u2022 \u63d0\u4f9b\u6e05\u6670\u7684\u932f\u8aa4\u8a0a\u606f \u97ff\u61c9\u9a57\u8b49 \u2022 \u53ef\u4ee5\u4f7f\u7528 <code>response_model</code> \u53c3\u6578\u9a57\u8b49\u97ff\u61c9\u2022 \u78ba\u4fdd\u8fd4\u56de\u7684\u8cc7\u6599\u7b26\u5408\u5b9a\u7fa9\u7684\u6a21\u578b"},{"location":"openapi/01-introduction/#_3","title":"\u6574\u5408\u7684\u6587\u6a94\u754c\u9762","text":"\u754c\u9762 \u7279\u9ede Swagger UI \u2022 \u9ed8\u8a8d\u5728 <code>/docs</code> \u8def\u5f91\u53ef\u7528\u2022 \u63d0\u4f9b\u4ea4\u4e92\u5f0f API \u6e2c\u8a66\u529f\u80fd\u2022 \u986f\u793a\u8a73\u7d30\u7684\u53c3\u6578\u548c\u97ff\u61c9\u4fe1\u606f ReDoc \u2022 \u9ed8\u8a8d\u5728 <code>/redoc</code> \u8def\u5f91\u53ef\u7528\u2022 \u63d0\u4f9b\u66f4\u9069\u5408\u95b1\u8b80\u7684\u6587\u6a94\u683c\u5f0f\u2022 \u6e05\u6670\u5c55\u793a API \u7d50\u69cb\u548c\u6a21\u578b\u5b9a\u7fa9"},{"location":"openapi/01-introduction/#_4","title":"\u958b\u767c\u6d41\u7a0b\u7684\u8f49\u8b8a","text":"\u8f49\u8b8a \u8aaa\u660e API \u512a\u5148\u8a2d\u8a08 \u2022 \u53ef\u4ee5\u5148\u5b9a\u7fa9\u6a21\u578b\u548c\u7aef\u9ede\uff0c\u518d\u5be6\u73fe\u696d\u52d9\u908f\u8f2f\u2022 \u4fc3\u9032\u66f4\u6e05\u6670\u7684 API \u8a2d\u8a08 \u5951\u7d04\u9a45\u52d5\u958b\u767c \u2022 API \u5b9a\u7fa9\u4f5c\u70ba\u524d\u5f8c\u7aef\u958b\u767c\u7684\u5951\u7d04\u2022 \u524d\u7aef\u53ef\u4ee5\u57fa\u65bc OpenAPI \u6587\u6a94\u958b\u59cb\u958b\u767c\uff0c\u7121\u9700\u7b49\u5f85\u5f8c\u7aef\u5b8c\u6210 \u6e1b\u5c11\u6587\u6a94\u7dad\u8b77\u6210\u672c \u2022 \u4e0d\u9700\u8981\u55ae\u7368\u7dad\u8b77 API \u6587\u6a94\u2022 \u6e1b\u5c11\u6587\u6a94\u8207\u4ee3\u78bc\u4e0d\u540c\u6b65\u7684\u98a8\u96aa"},{"location":"openapi/01-introduction/#fastapi-openapi_1","title":"\u70ba\u4ec0\u9ebc\u9078\u64c7 FastAPI \u548c OpenAPI\uff1f","text":""},{"location":"openapi/01-introduction/#_5","title":"\u6280\u8853\u512a\u52e2\u6bd4\u8f03","text":"\u6846\u67b6/\u6a19\u6e96 \u4e3b\u8981\u512a\u52e2 FastAPI \u2022 \u958b\u767c\u6548\u7387\u9ad8\uff1a\u7c21\u6f54\u8a9e\u6cd5\uff0c\u6e1b\u5c11\u6a23\u677f\u4ee3\u78bc\u2022 \u81ea\u52d5\u5316\u7a0b\u5ea6\u9ad8\uff1a\u8cc7\u6599\u9a57\u8b49\u548c\u6587\u6a94\u751f\u6210\u2022 \u9ad8\u6027\u80fd\uff1a\u57fa\u65bc Starlette\uff0c\u652f\u6301\u7570\u6b65\u8655\u7406 OpenAPI \u2022 \u6a19\u6e96\u5316\uff1a\u5ee3\u6cdb\u63a5\u53d7\u7684 API \u63cf\u8ff0\u6a19\u6e96\u2022 \u8c50\u5bcc\u5de5\u5177\u751f\u614b\uff1a\u5ba2\u6236\u7aef\u751f\u6210\u3001\u6e2c\u8a66\u5de5\u5177\u7b49\u2022 \u63d0\u9ad8\u53ef\u7dad\u8b77\u6027\uff1a\u6e05\u6670\u6587\u6a94\uff0c\u4fc3\u9032\u5718\u968a\u5354\u4f5c"},{"location":"openapi/01-introduction/#_6","title":"\u9069\u7528\u5834\u666f","text":"\u5834\u666f \u9069\u7528\u539f\u56e0 \u5fae\u670d\u52d9\u67b6\u69cb \u2022 \u6e05\u6670\u7684 API \u5951\u7d04\u5c0d\u5fae\u670d\u52d9\u9593\u7684\u901a\u4fe1\u81f3\u95dc\u91cd\u8981\u2022 \u81ea\u52d5\u6587\u6a94\u751f\u6210\u7c21\u5316\u670d\u52d9\u96c6\u6210 \u516c\u958b API \u2022 \u63d0\u4f9b\u7d66\u7b2c\u4e09\u65b9\u4f7f\u7528\u7684 API \u9700\u8981\u6e05\u6670\u7684\u6587\u6a94\u2022 \u6a19\u6e96\u5316\u7684\u63cf\u8ff0\u4fc3\u9032 API \u7684\u63a1\u7528 \u5927\u578b\u5718\u968a\u5354\u4f5c \u2022 \u524d\u5f8c\u7aef\u5206\u96e2\u958b\u767c\u6a21\u5f0f\u2022 \u660e\u78ba\u7684 API \u5951\u7d04\u6e1b\u5c11\u6e9d\u901a\u6210\u672c \u9700\u8981\u56b4\u683c\u8cc7\u6599\u9a57\u8b49\u7684\u61c9\u7528 \u2022 \u91d1\u878d\u3001\u91ab\u7642\u7b49\u5c0d\u8cc7\u6599\u6e96\u78ba\u6027\u8981\u6c42\u9ad8\u7684\u9818\u57df\u2022 \u81ea\u52d5\u9a57\u8b49\u6e1b\u5c11\u932f\u8aa4\u98a8\u96aa"},{"location":"openapi/01-introduction/#_7","title":"\u7e3d\u7d50","text":"<p>\u901a\u904e FastAPI \u548c OpenAPI \u7684\u7d50\u5408\uff0c\u958b\u767c\u8005\u53ef\u4ee5\u69cb\u5efa\u9ad8\u6548\u3001\u53ef\u9760\u4e14\u6587\u6a94\u5b8c\u5584\u7684 API\u3002\u9019\u7a2e\u65b9\u5f0f\u4e0d\u50c5\u63d0\u9ad8\u4e86\u958b\u767c\u6548\u7387\uff0c\u9084\u589e\u5f37\u4e86 API \u7684\u53ef\u7528\u6027\u548c\u53ef\u7dad\u8b77\u6027\uff0c\u4f7f\u5176\u6210\u70ba\u73fe\u4ee3 API \u958b\u767c\u7684\u7406\u60f3\u9078\u64c7\u3002</p>"},{"location":"openapi/02-basic-usage/","title":"FastAPI \u57fa\u790e\u4f7f\u7528","text":""},{"location":"openapi/02-basic-usage/#api","title":"\u5275\u5efa\u7b2c\u4e00\u500b API","text":"<pre><code>from fastapi import FastAPI\n\napp = FastAPI(\n    title=\"\u6211\u7684\u7b2c\u4e00\u500b API\",\n    description=\"\u9019\u662f\u4f7f\u7528 FastAPI \u5275\u5efa\u7684\u7c21\u55ae API\",\n    version=\"0.1.0\"\n)\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n</code></pre>"},{"location":"openapi/02-basic-usage/#_1","title":"\u8a2a\u554f\u81ea\u52d5\u751f\u6210\u7684\u6587\u6a94","text":"\u6587\u6a94\u754c\u9762 URL \u7279\u9ede Swagger UI http://127.0.0.1:8000/docs \u4e92\u52d5\u5f0f\u6e2c\u8a66\u754c\u9762 ReDoc http://127.0.0.1:8000/redoc \u6613\u8b80\u7684\u6587\u6a94\u683c\u5f0f OpenAPI JSON http://127.0.0.1:8000/openapi.json \u539f\u59cb OpenAPI Schema"},{"location":"openapi/02-basic-usage/#path-parameters","title":"\u8def\u5f91\u53c3\u6578 (Path Parameters)","text":"<p>\u8def\u5f91\u53c3\u6578\u662f URL \u7684\u4e00\u90e8\u5206\uff0c\u7528\u65bc\u6a19\u8b58\u7279\u5b9a\u8cc7\u6e90\uff1a</p> <pre><code>@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int):\n    return {\"item_id\": item_id}\n</code></pre> \u7279\u9ede \u8aaa\u660e \u985e\u578b\u8f49\u63db FastAPI \u6703\u81ea\u52d5\u5c07\u53c3\u6578\u8f49\u63db\u70ba\u6307\u5b9a\u985e\u578b \u9a57\u8b49 \u5982\u679c\u8f49\u63db\u5931\u6557\uff0c\u6703\u81ea\u52d5\u8fd4\u56de\u9069\u7576\u7684\u932f\u8aa4\u97ff\u61c9 \u6587\u6a94 \u53c3\u6578\u985e\u578b\u6703\u53cd\u6620\u5728 API \u6587\u6a94\u4e2d"},{"location":"openapi/02-basic-usage/#_2","title":"\u8def\u5f91\u53c3\u6578\u589e\u5f37","text":"<p>\u4f7f\u7528 Path \u985e\u589e\u52a0\u8def\u5f91\u53c3\u6578\u7684\u9a57\u8b49\u548c\u5143\u6578\u64da\uff1a</p> <pre><code>from fastapi import Path\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: int = Path(\n        ...,\n        title=\"\u9805\u76ee ID\",\n        description=\"\u8981\u7372\u53d6\u7684\u9805\u76ee\u7684 ID\",\n        gt=0,\n        le=1000\n    )\n):\n    return {\"item_id\": item_id}\n</code></pre>"},{"location":"openapi/02-basic-usage/#query-parameters","title":"\u67e5\u8a62\u53c3\u6578 (Query Parameters)","text":"<p>\u67e5\u8a62\u53c3\u6578\u662f URL \u4e2d <code>?</code> \u5f8c\u9762\u7684\u90e8\u5206\uff0c\u7528\u65bc\u904e\u6ffe\u3001\u6392\u5e8f\u6216\u5206\u9801\uff1a</p> <pre><code>@app.get(\"/items/\")\nasync def read_items(skip: int = 0, limit: int = 10, q: str = None):\n    return {\"skip\": skip, \"limit\": limit, \"q\": q}\n</code></pre> \u7279\u9ede \u8aaa\u660e \u53ef\u9078\u53c3\u6578 \u8a2d\u7f6e\u9ed8\u8a8d\u503c\u4f7f\u53c3\u6578\u8b8a\u70ba\u53ef\u9078 \u985e\u578b\u8a3b\u89e3 \u4f7f\u7528 Python \u985e\u578b\u8a3b\u89e3\u5b9a\u7fa9\u53c3\u6578\u985e\u578b \u81ea\u52d5\u9a57\u8b49 FastAPI \u81ea\u52d5\u9a57\u8b49\u53c3\u6578\u985e\u578b\u548c\u7d04\u675f"},{"location":"openapi/02-basic-usage/#_3","title":"\u67e5\u8a62\u53c3\u6578\u9a57\u8b49","text":"<p>\u4f7f\u7528 Query \u985e\u589e\u52a0\u66f4\u591a\u9a57\u8b49\u548c\u5143\u6578\u64da\uff1a</p> <pre><code>from fastapi import Query\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: str = Query(\n        None,\n        min_length=3,\n        max_length=50,\n        regex=\"^[a-z]+$\",\n        title=\"\u67e5\u8a62\u5b57\u7b26\u4e32\",\n        description=\"\u7528\u65bc\u904e\u6ffe\u9805\u76ee\u7684\u67e5\u8a62\u5b57\u7b26\u4e32\"\n    )\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \u9a57\u8b49\u9078\u9805 \u8aaa\u660e <code>min_length</code> \u6700\u5c0f\u9577\u5ea6 <code>max_length</code> \u6700\u5927\u9577\u5ea6 <code>regex</code> \u6b63\u5247\u8868\u9054\u5f0f\u6a21\u5f0f <code>gt</code> / <code>ge</code> \u5927\u65bc / \u5927\u65bc\u7b49\u65bc\uff08\u6578\u503c\uff09 <code>lt</code> / <code>le</code> \u5c0f\u65bc / \u5c0f\u65bc\u7b49\u65bc\uff08\u6578\u503c\uff09"},{"location":"openapi/02-basic-usage/#request-body","title":"\u8acb\u6c42\u9ad4 (Request Body)","text":"<p>\u4f7f\u7528 Pydantic \u6a21\u578b\u5b9a\u7fa9\u8acb\u6c42\u9ad4\uff1a</p> <pre><code>from pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    description: str = None\n    price: float\n    tax: float = None\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return item\n</code></pre> \u7279\u9ede \u8aaa\u660e \u81ea\u52d5\u89e3\u6790 JSON \u8acb\u6c42\u9ad4\u81ea\u52d5\u89e3\u6790\u70ba Python \u5c0d\u8c61 \u985e\u578b\u9a57\u8b49 \u81ea\u52d5\u9a57\u8b49\u6578\u64da\u985e\u578b\u548c\u7d04\u675f \u6587\u6a94\u751f\u6210 \u6a21\u578b\u7d50\u69cb\u81ea\u52d5\u53cd\u6620\u5728 API \u6587\u6a94\u4e2d"},{"location":"openapi/02-basic-usage/#http","title":"HTTP \u65b9\u6cd5","text":"<p>FastAPI \u63d0\u4f9b\u4e86\u5c0d\u61c9\u5404\u7a2e HTTP \u65b9\u6cd5\u7684\u88dd\u98fe\u5668\uff1a</p> HTTP \u65b9\u6cd5 FastAPI \u88dd\u98fe\u5668 \u5e38\u898b\u7528\u9014 GET <code>@app.get()</code> \u7372\u53d6\u8cc7\u6e90 POST <code>@app.post()</code> \u5275\u5efa\u8cc7\u6e90 PUT <code>@app.put()</code> \u66f4\u65b0\u8cc7\u6e90\uff08\u5b8c\u6574\u66ff\u63db\uff09 PATCH <code>@app.patch()</code> \u90e8\u5206\u66f4\u65b0\u8cc7\u6e90 DELETE <code>@app.delete()</code> \u522a\u9664\u8cc7\u6e90"},{"location":"openapi/02-basic-usage/#_4","title":"\u72c0\u614b\u78bc","text":"<pre><code>from fastapi import status\n\n@app.post(\"/items/\",status_code=status.HTTP_201_CREATED)\nasync def create_item(item: Item):\n    return item\n</code></pre>"},{"location":"openapi/02-basic-usage/#_5","title":"\u932f\u8aa4\u8655\u7406","text":"<pre><code>from fastapi import HTTPException\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str):\n    if item_id not in items:\n        raise HTTPException(status_code=404,detail=\"Item not found\")\n    return {\"item\": items[item_id]}\n</code></pre>"},{"location":"openapi/02-basic-usage/#api_1","title":"\u8def\u7531\u5668\u8207 API \u7d44\u7e54","text":"<p>\u4f7f\u7528 APIRouter \u7d44\u7e54\u5927\u578b\u61c9\u7528\uff1a</p> <pre><code>from fastapi import APIRouter\n\nrouter = APIRouter(\n    prefix=\"/items\",\n    tags=[\"items\"],\n    responses={404: {\"description\": \"Not found\"}},\n)\n\n@router.get(\"/\")\nasync def read_items():\n    return [{\"name\": \"Item 1\"}, {\"name\": \"Item 2\"}]\n\n@router.get(\"/{item_id}\")\nasync def read_item(item_id: str):\n    return {\"name\": \"Item\", \"item_id\": item_id}\n\n# \u5728\u4e3b\u61c9\u7528\u4e2d\u5305\u542b\u8def\u7531\u5668\napp = FastAPI()\napp.include_router(router)\n</code></pre>"},{"location":"openapi/03-pydantic-models/","title":"Pydantic Models","text":""},{"location":"openapi/03-pydantic-models/#pydantic","title":"Pydantic","text":"<p>Pydantic \u662f\u4e00\u500b\u6578\u64da\u9a57\u8b49\u548c\u8a2d\u7f6e\u7ba1\u7406\u5eab\uff0c\u662f FastAPI \u7684\u6838\u5fc3\u7d44\u4ef6\u4e4b\u4e00\u3002\u5b83\u4f7f\u7528 Python \u985e\u578b\u8a3b\u89e3\u4f86\u5b9a\u7fa9\u6578\u64da\u6a21\u578b\uff0c\u63d0\u4f9b\u4e86\u5f37\u5927\u7684\u6578\u64da\u9a57\u8b49\u3001\u8f49\u63db\u548c\u6587\u6a94\u751f\u6210\u529f\u80fd\u3002Pydantic v2.0 \u5e36\u4f86\u4e86\u986f\u8457\u7684\u6027\u80fd\u63d0\u5347\u548c\u4e00\u4e9b API \u8b8a\u66f4\u3002</p> \u6838\u5fc3\u529f\u80fd \u8aaa\u660e \u6578\u64da\u9a57\u8b49 \u81ea\u52d5\u9a57\u8b49\u6578\u64da\u7b26\u5408\u5b9a\u7fa9\u7684\u985e\u578b\u548c\u7d04\u675f \u985e\u578b\u8f49\u63db \u81ea\u52d5\u5c07\u8f38\u5165\u6578\u64da\u8f49\u63db\u70ba\u9069\u7576\u7684\u985e\u578b \u932f\u8aa4\u8655\u7406 \u63d0\u4f9b\u6e05\u6670\u7684\u9a57\u8b49\u932f\u8aa4\u4fe1\u606f IDE \u652f\u6301 \u63d0\u4f9b\u4ee3\u78bc\u88dc\u5168\u548c\u985e\u578b\u6aa2\u67e5\u652f\u6301"},{"location":"openapi/03-pydantic-models/#_1","title":"\u57fa\u672c\u6a21\u578b\u5b9a\u7fa9","text":""},{"location":"openapi/03-pydantic-models/#_2","title":"\u5275\u5efa\u57fa\u672c\u6a21\u578b","text":"<pre><code>from pydantic import BaseModel, Field\nfrom typing import Optional, List\nfrom datetime import datetime\n\nclass User(BaseModel):\n    id: int\n    name: str\n    email: str\n    is_active: bool = True\n    created_at: datetime = Field(default_factory=datetime.now)\n    tags: List[str] = []\n    description: Optional[str] = None\n</code></pre>"},{"location":"openapi/03-pydantic-models/#_3","title":"\u5b57\u6bb5\u985e\u578b\u8207\u9ed8\u8a8d\u503c","text":"\u7279\u6027 \u7bc4\u4f8b \u8aaa\u660e \u5fc5\u586b\u5b57\u6bb5 <code>name: str</code> \u6c92\u6709\u9ed8\u8a8d\u503c\u7684\u5b57\u6bb5\u662f\u5fc5\u586b\u7684 \u53ef\u9078\u5b57\u6bb5 <code>description: Optional[str] = None</code> \u6709\u9ed8\u8a8d\u503c\u7684\u5b57\u6bb5\u662f\u53ef\u9078\u7684 \u9ed8\u8a8d\u503c <code>is_active: bool = True</code> \u5982\u679c\u672a\u63d0\u4f9b\u503c\uff0c\u5247\u4f7f\u7528\u9ed8\u8a8d\u503c \u9ed8\u8a8d\u5de5\u5ee0 <code>created_at: datetime = Field(default_factory=datetime.now)</code> \u4f7f\u7528\u51fd\u6578\u751f\u6210\u9ed8\u8a8d\u503c \u8907\u96dc\u985e\u578b <code>tags: List[str] = []</code> \u652f\u6301\u5d4c\u5957\u7684\u8907\u96dc\u985e\u578b"},{"location":"openapi/03-pydantic-models/#_4","title":"\u6a21\u578b\u4f7f\u7528","text":""},{"location":"openapi/03-pydantic-models/#_5","title":"\u5275\u5efa\u6a21\u578b\u5be6\u4f8b","text":"<pre><code># \u5f9e\u5b57\u5178\u5275\u5efa\nuser_data = {\n    \"id\": 1,\n    \"name\": \"John Doe\",\n    \"email\": \"john@example.com\",\n    \"tags\": [\"admin\", \"user\"]\n}\nuser = User.model_validate(user_data)\n\n# \u76f4\u63a5\u5275\u5efa\nuser = User(\n    id=1,\n    name=\"John Doe\",\n    email=\"john@example.com\"\n)\n\n# \u8a2a\u554f\u5b57\u6bb5\nprint(user.name)  # \u8f38\u51fa: John Doe\nprint(user.is_active)  # \u8f38\u51fa: True (\u9ed8\u8a8d\u503c)\n</code></pre>"},{"location":"openapi/03-pydantic-models/#_6","title":"\u6a21\u578b\u8f49\u63db","text":"<pre><code># \u8f49\u63db\u70ba\u5b57\u5178\nuser_dict = user.model_dump()\n\n# \u8f49\u63db\u70ba JSON \u5b57\u7b26\u4e32\nuser_json = user.model_dump_json()\n\n# \u8f49\u63db\u70ba JSON \u5b57\u7b26\u4e32\uff08\u5e36\u683c\u5f0f\u5316\uff09\nuser_json_formatted = user.model_dump_json(indent=2)\n\n# \u6392\u9664\u67d0\u4e9b\u5b57\u6bb5\nuser_dict_partial = user.model_dump(exclude={\"created_at\", \"tags\"})\n\n# \u50c5\u5305\u542b\u67d0\u4e9b\u5b57\u6bb5\nuser_dict_partial = user.model_dump(include={\"id\", \"name\", \"email\"})\n</code></pre>"},{"location":"openapi/03-pydantic-models/#_7","title":"\u6a21\u578b\u8907\u88fd\u8207\u66f4\u65b0","text":"<pre><code># \u5275\u5efa\u6a21\u578b\u7684\u526f\u672c\u4e26\u66f4\u65b0\u67d0\u4e9b\u5b57\u6bb5\nuser2 = user.model_copy(update={\"name\": \"Jane Doe\", \"email\": \"jane@example.com\"})\n\n# \u6392\u9664\u672a\u8a2d\u7f6e\u7684\u5b57\u6bb5\nuser_dict = user.model_dump(exclude_unset=True)\n\n# \u6392\u9664\u9ed8\u8a8d\u503c\nuser_dict = user.model_dump(exclude_defaults=True)\n\n# \u6392\u9664\u70ba None \u7684\u503c\nuser_dict = user.model_dump(exclude_none=True)\n</code></pre>"},{"location":"openapi/03-pydantic-models/#_8","title":"\u5d4c\u5957\u6a21\u578b","text":""},{"location":"openapi/03-pydantic-models/#_9","title":"\u5b9a\u7fa9\u5d4c\u5957\u6a21\u578b","text":"<pre><code>from pydantic import BaseModel, Field\nfrom typing import List, Optional\n\nclass Image(BaseModel):\n    url: str\n    name: str\n    width: Optional[int] = None\n    height: Optional[int] = None\n\nclass Item(BaseModel):\n    id: int\n    name: str\n    description: Optional[str] = None\n    price: float\n    images: List[Image] = []\n</code></pre>"},{"location":"openapi/03-pydantic-models/#_10","title":"\u4f7f\u7528\u5d4c\u5957\u6a21\u578b","text":"<pre><code>item = Item(\n    id=1,\n    name=\"Smartphone\",\n    price=699.99,\n    images=[\n        Image(url=\"https://example.com/img1.jpg\", name=\"Front view\"),\n        Image(url=\"https://example.com/img2.jpg\", name=\"Back view\", width=1000, height=800)\n    ]\n)\n\n# \u8a2a\u554f\u5d4c\u5957\u5b57\u6bb5\nprint(item.images[0].url)  # \u8f38\u51fa: https://example.com/img1.jpg\n</code></pre>"},{"location":"openapi/03-pydantic-models/#_11","title":"\u5b57\u6bb5\u9a57\u8b49","text":""},{"location":"openapi/03-pydantic-models/#_12","title":"\u5167\u5efa\u9a57\u8b49\u5668","text":"<p>Pydantic \u63d0\u4f9b\u4e86\u8a31\u591a\u5167\u5efa\u9a57\u8b49\u5668\uff0c\u53ef\u4ee5\u901a\u904e <code>Field</code> \u51fd\u6578\u61c9\u7528\uff1a</p> <pre><code>from pydantic import BaseModel, Field, EmailStr, HttpUrl\n\nclass User(BaseModel):\n    id: int = Field(gt=0, description=\"\u7528\u6236\u552f\u4e00\u6a19\u8b58\u7b26\")\n    name: str = Field(min_length=2, max_length=50)\n    email: EmailStr\n    website: HttpUrl = None\n    age: int = Field(None, ge=18, lt=100)\n    score: float = Field(0, ge=0, le=100)\n</code></pre> \u9a57\u8b49\u9078\u9805 \u9069\u7528\u985e\u578b \u8aaa\u660e <code>min_length</code>/<code>max_length</code> \u5b57\u7b26\u4e32 \u5b57\u7b26\u4e32\u9577\u5ea6\u9650\u5236 <code>pattern</code> \u5b57\u7b26\u4e32 \u6b63\u5247\u8868\u9054\u5f0f\u6a21\u5f0f <code>gt</code>/<code>ge</code> \u6578\u503c \u5927\u65bc/\u5927\u65bc\u7b49\u65bc <code>lt</code>/<code>le</code> \u6578\u503c \u5c0f\u65bc/\u5c0f\u65bc\u7b49\u65bc <code>multiple_of</code> \u6578\u503c \u5fc5\u9808\u662f\u6307\u5b9a\u503c\u7684\u500d\u6578"},{"location":"openapi/03-pydantic-models/#_13","title":"\u81ea\u5b9a\u7fa9\u9a57\u8b49\u5668","text":"<p>\u4f7f\u7528 <code>field_validator</code> \u88dd\u98fe\u5668\u5275\u5efa\u81ea\u5b9a\u7fa9\u9a57\u8b49\u908f\u8f2f\uff1a</p> <pre><code>from pydantic import BaseModel, field_validator\n\nclass User(BaseModel):\n    id: int\n    name: str\n    password: str\n    password_confirm: str\n\n    @field_validator('name')\n    @classmethod\n    def name_must_contain_space(cls, v):\n        if ' ' not in v:\n            raise ValueError('\u5fc5\u9808\u5305\u542b\u59d3\u548c\u540d')\n        return v.title()\n\n    @field_validator('password_confirm')\n    @classmethod\n    def passwords_match(cls, v, info):\n        if 'password' in info.data and v != info.data['password']:\n            raise ValueError('\u5bc6\u78bc\u4e0d\u5339\u914d')\n        return v\n</code></pre>"},{"location":"openapi/03-pydantic-models/#_14","title":"\u6a21\u578b\u9a57\u8b49\u5668","text":"<p>\u4f7f\u7528 <code>model_validator</code> \u9032\u884c\u8de8\u5b57\u6bb5\u9a57\u8b49\uff1a</p> <pre><code>from pydantic import BaseModel, model_validator\n\nclass Offer(BaseModel):\n    original_price: float\n    discount_price: float\n\n    @model_validator(mode='after')\n    def check_prices(self):\n        if self.discount_price &gt;= self.original_price:\n            raise ValueError('\u6298\u6263\u50f9\u5fc5\u9808\u4f4e\u65bc\u539f\u50f9')\n        return self\n</code></pre>"},{"location":"openapi/03-pydantic-models/#_15","title":"\u914d\u7f6e\u8207\u884c\u70ba\u81ea\u5b9a\u7fa9","text":""},{"location":"openapi/03-pydantic-models/#_16","title":"\u6a21\u578b\u914d\u7f6e","text":"<p>\u4f7f\u7528 <code>model_config</code> \u81ea\u5b9a\u7fa9\u6a21\u578b\u884c\u70ba\uff1a</p> <pre><code>from pydantic import BaseModel, ConfigDict\n\nclass User(BaseModel):\n    id: int\n    name: str\n    email: str\n    password: str\n\n    model_config = ConfigDict(\n        # \u5141\u8a31\u5f9e ORM \u5c0d\u8c61\u5275\u5efa\u6a21\u578b\n        from_attributes=True,\n\n        # \u5141\u8a31\u984d\u5916\u5b57\u6bb5\uff08\u4e0d\u5728\u6a21\u578b\u5b9a\u7fa9\u4e2d\u7684\u5b57\u6bb5\uff09\n        extra='ignore',  # \u6216 'allow', 'forbid'\n\n        # \u5927\u5c0f\u5beb\u654f\u611f\u6027\n        case_sensitive=False,\n\n        # \u5b57\u6bb5\u5225\u540d\n        populate_by_name=True,\n\n        # \u5728\u5e8f\u5217\u5316\u6642\u6392\u9664\u67d0\u4e9b\u5b57\u6bb5\n        json_schema_extra={\n            'json_schema_extra': {\n                'examples': [\n                    {\n                        'id': 1,\n                        'name': 'John Doe',\n                        'email': 'john@example.com',\n                        'password': '********'\n                    }\n                ]\n            }\n        }\n    )\n</code></pre> \u914d\u7f6e\u9078\u9805 \u8aaa\u660e <code>from_attributes</code> \u5141\u8a31\u5f9e ORM \u5c0d\u8c61\u5275\u5efa\u6a21\u578b\uff08\u901a\u904e\u5c6c\u6027\u8a2a\u554f\u800c\u975e\u5b57\u5178\u8a2a\u554f\uff09 <code>extra</code> \u63a7\u5236\u984d\u5916\u5b57\u6bb5\u7684\u8655\u7406\u65b9\u5f0f\uff1a<code>ignore</code>\uff08\u5ffd\u7565\uff09\u3001<code>allow</code>\uff08\u5141\u8a31\uff09\u6216 <code>forbid</code>\uff08\u7981\u6b62\uff09 <code>alias_generator</code> \u51fd\u6578\uff0c\u7528\u65bc\u81ea\u52d5\u751f\u6210\u5b57\u6bb5\u5225\u540d <code>populate_by_name</code> \u5141\u8a31\u901a\u904e\u5b57\u6bb5\u540d\u800c\u975e\u5225\u540d\u586b\u5145\u6a21\u578b <code>validate_assignment</code> \u5728\u8ce6\u503c\u6642\u9a57\u8b49\u5b57\u6bb5"},{"location":"openapi/03-pydantic-models/#_17","title":"\u5b57\u6bb5\u5225\u540d","text":"<pre><code>from pydantic import BaseModel, Field\n\nclass User(BaseModel):\n    user_id: int = Field(alias='id')\n    user_name: str = Field(alias='name')\n</code></pre>"},{"location":"openapi/03-pydantic-models/#_18","title":"\u9ad8\u7d1a\u985e\u578b","text":""},{"location":"openapi/03-pydantic-models/#_19","title":"\u8907\u96dc\u985e\u578b\u8a3b\u89e3","text":"<pre><code>from pydantic import BaseModel\nfrom typing import Dict, List, Set, Tuple, Union, Optional\n\nclass AdvancedModel(BaseModel):\n    # \u5b57\u5178\u985e\u578b\n    metadata: Dict[str, str] = {}\n\n    # \u5217\u8868\u985e\u578b\n    tags: List[str] = []\n\n    # \u96c6\u5408\u985e\u578b\uff08\u7121\u91cd\u8907\u5143\u7d20\uff09\n    unique_ids: Set[int] = set()\n\n    # \u5143\u7d44\u985e\u578b\uff08\u56fa\u5b9a\u9577\u5ea6\u548c\u985e\u578b\uff09\n    coordinates: Tuple[float, float] = None\n\n    # \u806f\u5408\u985e\u578b\uff08\u591a\u7a2e\u53ef\u80fd\u985e\u578b\u4e4b\u4e00\uff09\n    value: Union[int, str, bool] = None\n\n    # \u53ef\u9078\u985e\u578b\uff08\u7b49\u540c\u65bc Union[T, None]\uff09\n    description: Optional[str] = None\n</code></pre>"},{"location":"openapi/03-pydantic-models/#_20","title":"\u81ea\u5b9a\u7fa9\u985e\u578b\u8207\u7d04\u675f","text":"<pre><code>from pydantic import BaseModel, Field\nfrom typing import Annotated\n\n# \u5728 Pydantic v2 \u4e2d\uff0c\u4f7f\u7528 Annotated \u548c Field \u66ff\u4ee3 constr, conint, confloat\nUsername = Annotated[str, Field(min_length=3, max_length=50, pattern=r'^[a-zA-Z0-9_]+$')]\nAge = Annotated[int, Field(ge=0, lt=120)]\nScore = Annotated[float, Field(ge=0, le=100)]\n\nclass CustomTypesModel(BaseModel):\n    # \u53d7\u7d04\u675f\u7684\u5b57\u7b26\u4e32\uff1a\u9577\u5ea6\u9650\u5236\uff0c\u6b63\u5247\u6a21\u5f0f\n    username: Username\n\n    # \u53d7\u7d04\u675f\u7684\u6574\u6578\uff1a\u7bc4\u570d\u9650\u5236\n    age: Age\n\n    # \u53d7\u7d04\u675f\u7684\u6d6e\u9ede\u6578\uff1a\u7bc4\u570d\u9650\u5236\n    score: Score\n</code></pre>"},{"location":"openapi/03-pydantic-models/#_21","title":"\u5be6\u969b\u61c9\u7528\u7bc4\u4f8b","text":""},{"location":"openapi/03-pydantic-models/#api","title":"API \u8acb\u6c42\u548c\u97ff\u61c9\u6a21\u578b","text":"<pre><code>from fastapi import FastAPI, HTTPException\nfrom pydantic import BaseModel, EmailStr, Field\nfrom typing import List, Optional\n\napp = FastAPI()\n\n# \u8acb\u6c42\u6a21\u578b\nclass UserCreate(BaseModel):\n    name: str = Field(min_length=2)\n    email: EmailStr\n    password: str = Field(min_length=8)\n\n# \u97ff\u61c9\u6a21\u578b\uff08\u6392\u9664\u654f\u611f\u5b57\u6bb5\uff09\nclass UserResponse(BaseModel):\n    id: int\n    name: str\n    email: EmailStr\n    is_active: bool\n\n# \u6578\u64da\u5eab\u6a21\u578b\nclass UserInDB(UserCreate):\n    id: int\n    hashed_password: str\n    is_active: bool = True\n\n# \u6a21\u64ec\u6578\u64da\u5eab\nfake_users_db = {}\n\n@app.post(\"/users/\", response_model=UserResponse)\nasync def create_user(user: UserCreate):\n    # \u6aa2\u67e5\u90f5\u7bb1\u662f\u5426\u5df2\u5b58\u5728\n    if any(u.email == user.email for u in fake_users_db.values()):\n        raise HTTPException(status_code=400, detail=\"Email already registered\")\n\n    # \u6a21\u64ec\u5bc6\u78bc\u54c8\u5e0c\n    hashed_password = user.password + \"_hashed\"\n\n    # \u5275\u5efa\u7528\u6236\u8a18\u9304\n    user_id = len(fake_users_db) + 1\n    user_in_db = UserInDB(\n        id=user_id,\n        **user.model_dump(),\n        hashed_password=hashed_password\n    )\n\n    # \u4fdd\u5b58\u5230\u6578\u64da\u5eab\n    fake_users_db[user_id] = user_in_db\n\n    # \u8fd4\u56de\u7528\u6236\u4fe1\u606f\uff08\u4e0d\u5305\u542b\u5bc6\u78bc\uff09\n    return user_in_db\n</code></pre>"},{"location":"openapi/03-pydantic-models/#orm","title":"\u8207 ORM \u96c6\u6210","text":""},{"location":"openapi/03-pydantic-models/#sqlalchemy","title":"SQLAlchemy \u6a21\u578b\u8f49\u63db","text":"<pre><code>from sqlalchemy import Column, Integer, String, Boolean, DateTime\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom pydantic import BaseModel, ConfigDict\nfrom datetime import datetime\n\n# SQLAlchemy \u6a21\u578b\nBase = declarative_base()\n\nclass UserDB(Base):\n    __tablename__ = \"users\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    name = Column(String, index=True)\n    email = Column(String, unique=True, index=True)\n    hashed_password = Column(String)\n    is_active = Column(Boolean, default=True)\n    created_at = Column(DateTime, default=datetime.now)\n\n# Pydantic \u6a21\u578b\nclass User(BaseModel):\n    id: int\n    name: str\n    email: str\n    is_active: bool\n    created_at: datetime\n\n    model_config = ConfigDict(from_attributes=True)\n\n# \u4f7f\u7528\u7bc4\u4f8b\ndef get_user(db_session, user_id: int):\n    db_user = db_session.query(UserDB).filter(UserDB.id == user_id).first()\n    if db_user:\n        # \u5f9e ORM \u6a21\u578b\u8f49\u63db\u70ba Pydantic \u6a21\u578b\n        return User.model_validate(db_user)\n    return None\n</code></pre>"},{"location":"openapi/03-pydantic-models/#_22","title":"\u7e3d\u7d50","text":"<p>Pydantic v2.0 \u662f FastAPI \u7684\u6838\u5fc3\u7d44\u4ef6\uff0c\u63d0\u4f9b\u4e86\u5f37\u5927\u7684\u6578\u64da\u9a57\u8b49\u548c\u8f49\u63db\u529f\u80fd\uff0c\u540c\u6642\u5e36\u4f86\u4e86\u986f\u8457\u7684\u6027\u80fd\u63d0\u5347\u3002\u901a\u904e\u4f7f\u7528 Pydantic \u6a21\u578b\uff0c\u60a8\u53ef\u4ee5\uff1a</p> <ol> <li>\u5b9a\u7fa9\u6578\u64da\u7d50\u69cb\uff1a\u4f7f\u7528 Python \u985e\u578b\u8a3b\u89e3\u6e05\u6670\u5730\u5b9a\u7fa9\u6578\u64da\u6a21\u578b</li> <li>\u9a57\u8b49\u8f38\u5165\u6578\u64da\uff1a\u81ea\u52d5\u9a57\u8b49\u6578\u64da\u7b26\u5408\u5b9a\u7fa9\u7684\u985e\u578b\u548c\u7d04\u675f</li> <li>\u8f49\u63db\u6578\u64da\u683c\u5f0f\uff1a\u5728\u4e0d\u540c\u683c\u5f0f\u4e4b\u9593\u8f49\u63db\u6578\u64da\uff08\u5982 Python \u5c0d\u8c61\u3001\u5b57\u5178\u3001JSON\uff09</li> <li>\u751f\u6210\u6587\u6a94\uff1a\u70ba API \u63d0\u4f9b\u6e05\u6670\u7684\u6578\u64da\u6a21\u578b\u6587\u6a94</li> </ol> <p>Pydantic v2.0 \u7684\u4e3b\u8981 API \u8b8a\u66f4\u5305\u62ec\uff1a</p> <ul> <li><code>dict()</code> \u2192 <code>model_dump()</code></li> <li><code>json()</code> \u2192 <code>model_dump_json()</code></li> <li><code>copy()</code> \u2192 <code>model_copy()</code></li> <li><code>parse_obj()</code> \u2192 <code>model_validate()</code></li> <li><code>from_orm()</code> \u2192 <code>model_validate()</code> (with <code>from_attributes=True</code>)</li> <li><code>validator()</code> \u2192 <code>field_validator()</code></li> <li><code>root_validator()</code> \u2192 <code>model_validator()</code></li> <li><code>Config</code> \u985e \u2192 <code>model_config</code> \u5b57\u5178\u6216 <code>ConfigDict</code></li> </ul> <p>\u9019\u4e9b\u8b8a\u66f4\u4f7f Pydantic \u5728\u4fdd\u6301\u6613\u7528\u6027\u7684\u540c\u6642\uff0c\u63d0\u4f9b\u4e86\u66f4\u597d\u7684\u6027\u80fd\u548c\u66f4\u4e00\u81f4\u7684 API\u3002</p>"},{"location":"openapi/04-openapi-schema/","title":"OpenAPI Schema \u8207 FastAPI/Pydantic \u7684\u6574\u5408","text":""},{"location":"openapi/04-openapi-schema/#openapi-schema","title":"OpenAPI Schema","text":"<p>OpenAPI Schema (\u4ee5\u524d\u7a31\u70ba Swagger Specification) \u662f\u4e00\u7a2e\u7528\u65bc\u63cf\u8ff0 REST API \u7684\u6a19\u6e96\u5316\u683c\u5f0f\u3002\u5b83\u63d0\u4f9b\u4e86\u4e00\u7a2e\u6a5f\u5668\u53ef\u8b80\u7684\u65b9\u5f0f\u4f86\u63cf\u8ff0 API \u7684\u7aef\u9ede\u3001\u53c3\u6578\u3001\u8acb\u6c42\u9ad4\u3001\u97ff\u61c9\u3001\u8a8d\u8b49\u65b9\u5f0f\u7b49\u3002</p> \u6838\u5fc3\u6982\u5ff5 \u8aaa\u660e \u8def\u5f91 API \u7aef\u9ede\u7684 URL \u8def\u5f91\u548c HTTP \u65b9\u6cd5 \u53c3\u6578 \u8def\u5f91\u3001\u67e5\u8a62\u3001\u982d\u90e8\u548c cookie \u53c3\u6578 \u8acb\u6c42\u9ad4 HTTP \u8acb\u6c42\u4e2d\u7684\u6578\u64da\u7d50\u69cb \u97ff\u61c9 \u4e0d\u540c\u72c0\u614b\u78bc\u7684\u97ff\u61c9\u6578\u64da\u7d50\u69cb \u7d44\u4ef6 \u53ef\u91cd\u7528\u7684 schema \u5b9a\u7fa9"},{"location":"openapi/04-openapi-schema/#fastapi-openapi","title":"FastAPI \u8207 OpenAPI \u7684\u6574\u5408","text":"<p>FastAPI \u81ea\u52d5\u751f\u6210 OpenAPI Schema\uff0c\u4e26\u63d0\u4f9b\u5169\u7a2e\u4ea4\u4e92\u5f0f\u6587\u6a94\u754c\u9762\uff1aSwagger UI \u548c ReDoc\u3002</p> <pre><code>from fastapi import FastAPI\n\napp = FastAPI(\n    title=\"\u6211\u7684 API\",\n    description=\"\u9019\u662f\u4e00\u500b\u793a\u4f8b API\",\n    version=\"0.1.0\",\n    openapi_url=\"/api/openapi.json\",  # OpenAPI Schema \u7684\u8def\u5f91\n    docs_url=\"/docs\",                 # Swagger UI \u7684\u8def\u5f91\n    redoc_url=\"/redoc\"                # ReDoc \u7684\u8def\u5f91\n)\n</code></pre> <p>\u8a2a\u554f\u81ea\u52d5\u751f\u6210\u7684\u6587\u6a94</p> \u6587\u6a94\u754c\u9762 \u9ed8\u8a8d URL \u7279\u9ede Swagger UI <code>/docs</code> \u4e92\u52d5\u5f0f\u6e2c\u8a66\u754c\u9762 ReDoc <code>/redoc</code> \u6613\u8b80\u7684\u6587\u6a94\u683c\u5f0f OpenAPI JSON <code>/openapi.json</code> \u539f\u59cb OpenAPI Schema"},{"location":"openapi/04-openapi-schema/#pydantic-json-schema","title":"Pydantic \u6a21\u578b\u8207 JSON Schema","text":"<p>Pydantic \u6a21\u578b\u81ea\u52d5\u8f49\u63db\u70ba JSON Schema\uff0c\u9019\u662f OpenAPI Schema \u7684\u4e00\u90e8\u5206\u3002</p>"},{"location":"openapi/04-openapi-schema/#_1","title":"\u57fa\u672c\u985e\u578b\u6620\u5c04","text":"Python \u985e\u578b JSON Schema \u985e\u578b <code>str</code> <code>string</code> <code>int</code> <code>integer</code> <code>float</code> <code>number</code> <code>bool</code> <code>boolean</code> <code>list</code> <code>array</code> <code>dict</code> <code>object</code> <code>None</code> <code>null</code>"},{"location":"openapi/04-openapi-schema/#_2","title":"\u6a21\u578b\u793a\u4f8b","text":"<pre><code>from pydantic import BaseModel, Field\nfrom typing import List, Optional\n\nclass Item(BaseModel):\n    id: int = Field(description=\"\u9805\u76ee\u7684\u552f\u4e00\u6a19\u8b58\u7b26\")\n    name: str = Field(min_length=1, max_length=100, description=\"\u9805\u76ee\u540d\u7a31\")\n    price: float = Field(gt=0, description=\"\u9805\u76ee\u50f9\u683c\")\n    tags: List[str] = Field(default=[], description=\"\u9805\u76ee\u6a19\u7c64\")\n    description: Optional[str] = Field(None, description=\"\u9805\u76ee\u8a73\u7d30\u63cf\u8ff0\")\n</code></pre>"},{"location":"openapi/04-openapi-schema/#openapi","title":"\u8def\u5f91\u64cd\u4f5c\u88dd\u98fe\u5668\u8207 OpenAPI","text":"<p>FastAPI \u7684\u8def\u5f91\u64cd\u4f5c\u88dd\u98fe\u5668\u81ea\u52d5\u751f\u6210 OpenAPI \u8def\u5f91\u9805\u3002</p> <pre><code>from fastapi import FastAPI, Path, Query, Body\nfrom pydantic import BaseModel\nfrom typing import List, Optional\n\napp = FastAPI()\n\nclass Item(BaseModel):\n    name: str\n    price: float\n    description: Optional[str] = None\n\n@app.get(\n    \"/items/{item_id}\",\n    summary=\"\u7372\u53d6\u55ae\u500b\u9805\u76ee\",\n    description=\"\u6839\u64da ID \u7372\u53d6\u9805\u76ee\u7684\u8a73\u7d30\u4fe1\u606f\",\n    response_description=\"\u9805\u76ee\u8a73\u7d30\u4fe1\u606f\",\n    tags=[\"items\"],\n    response_model=Item\n)\nasync def read_item(\n    item_id: int = Path(..., title=\"\u9805\u76ee ID\", ge=1),\n    q: Optional[str] = Query(None, min_length=3, max_length=50, description=\"\u641c\u7d22\u67e5\u8a62\")\n):\n    \"\"\"\n    \u7372\u53d6\u55ae\u500b\u9805\u76ee\u7684\u8a73\u7d30\u4fe1\u606f:\n\n    - **item_id**: \u9805\u76ee\u7684\u552f\u4e00\u6a19\u8b58\u7b26\n    - **q**: \u53ef\u9078\u7684\u641c\u7d22\u67e5\u8a62\u53c3\u6578\n    \"\"\"\n    return {\"name\": \"\u7bc4\u4f8b\u9805\u76ee\", \"price\": 45.5, \"description\": \"\u9019\u662f\u4e00\u500b\u7bc4\u4f8b\u9805\u76ee\"}\n</code></pre>"},{"location":"openapi/04-openapi-schema/#_3","title":"\u8def\u5f91\u53c3\u6578\u589e\u5f37","text":"<p>\u4f7f\u7528 <code>Path</code> \u985e\u589e\u5f37\u8def\u5f91\u53c3\u6578\u7684 OpenAPI \u6587\u6a94\uff1a</p> <pre><code>from fastapi import FastAPI, Path\n\napp = FastAPI()\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(\n    item_id: int = Path(\n        ...,\n        title=\"\u9805\u76ee ID\",\n        description=\"\u8981\u7372\u53d6\u7684\u9805\u76ee\u7684 ID\",\n        ge=1,\n        le=1000,\n        example=42\n    )\n):\n    return {\"item_id\": item_id}\n</code></pre>"},{"location":"openapi/04-openapi-schema/#_4","title":"\u67e5\u8a62\u53c3\u6578\u589e\u5f37","text":"<p>\u4f7f\u7528 <code>Query</code> \u985e\u589e\u5f37\u67e5\u8a62\u53c3\u6578\u7684 OpenAPI \u6587\u6a94\uff1a</p> <pre><code>from fastapi import FastAPI, Query\nfrom typing import List, Optional\n\napp = FastAPI()\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Optional[str] = Query(\n        None,\n        title=\"\u67e5\u8a62\u5b57\u7b26\u4e32\",\n        description=\"\u7528\u65bc\u904e\u6ffe\u9805\u76ee\u7684\u67e5\u8a62\u5b57\u7b26\u4e32\",\n        min_length=3,\n        max_length=50,\n        pattern=\"^[a-zA-Z0-9_-]*$\",\n        deprecated=False,\n        example=\"example_query\"\n    ),\n    skip: int = Query(0, ge=0, description=\"\u8981\u8df3\u904e\u7684\u9805\u76ee\u6578\"),\n    limit: int = Query(10, ge=1, le=100, description=\"\u8981\u8fd4\u56de\u7684\u9805\u76ee\u6578\")\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n</code></pre>"},{"location":"openapi/04-openapi-schema/#_5","title":"\u8acb\u6c42\u9ad4\u589e\u5f37","text":"<p>\u4f7f\u7528 <code>Body</code> \u985e\u589e\u5f37\u8acb\u6c42\u9ad4\u53c3\u6578\u7684 OpenAPI \u6587\u6a94\uff1a</p> <pre><code>from fastapi import FastAPI, Body\nfrom pydantic import BaseModel, Field\nfrom typing import Optional\n\napp = FastAPI()\n\nclass Item(BaseModel):\n    name: str = Field(..., min_length=1, max_length=100, example=\"Foo\")\n    description: Optional[str] = Field(None, max_length=300, example=\"A very nice Item\")\n    price: float = Field(..., gt=0, example=35.4)\n\n@app.post(\"/items/\")\nasync def create_item(\n    item: Item = Body(\n        ...,\n        embed=True,\n        example={\n            \"name\": \"Foo\",\n            \"description\": \"A very nice Item\",\n            \"price\": 35.4\n        }\n    )\n):\n    return item\n</code></pre>"},{"location":"openapi/04-openapi-schema/#_6","title":"\u97ff\u61c9\u6a21\u578b\u8207\u72c0\u614b\u78bc","text":"<p>\u5b9a\u7fa9\u4e0d\u540c\u72c0\u614b\u78bc\u7684\u97ff\u61c9\u6a21\u578b\uff1a</p> <pre><code>from fastapi import FastAPI, HTTPException, status\nfrom pydantic import BaseModel\nfrom typing import Optional, Dict, Union\n\napp = FastAPI()\n\nclass Item(BaseModel):\n    id: int\n    name: str\n    price: float\n    description: Optional[str] = None\n\nclass Message(BaseModel):\n    message: str\n\n@app.get(\n    \"/items/{item_id}\",\n    response_model=Item,\n    responses={\n        200: {\n            \"description\": \"\u6210\u529f\u7372\u53d6\u9805\u76ee\",\n            \"model\": Item\n        },\n        404: {\n            \"description\": \"\u9805\u76ee\u672a\u627e\u5230\",\n            \"model\": Message\n        },\n        500: {\n            \"description\": \"\u670d\u52d9\u5668\u932f\u8aa4\",\n            \"model\": Message\n        }\n    }\n)\nasync def read_item(item_id: int):\n    if item_id == 404:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"\u9805\u76ee\u672a\u627e\u5230\"\n        )\n    elif item_id == 500:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=\"\u670d\u52d9\u5668\u932f\u8aa4\"\n        )\n    return {\n        \"id\": item_id,\n        \"name\": \"\u7bc4\u4f8b\u9805\u76ee\",\n        \"price\": 45.5,\n        \"description\": \"\u9019\u662f\u4e00\u500b\u7bc4\u4f8b\u9805\u76ee\"\n    }\n</code></pre>"},{"location":"openapi/04-openapi-schema/#openapi-schema-fastapi","title":"OpenAPI Schema \u8207 FastAPI \u7684\u95dc\u4fc2","text":"<p>FastAPI \u4f7f\u7528 Pydantic \u6a21\u578b\u548c\u8def\u5f91\u64cd\u4f5c\u88dd\u98fe\u5668\u81ea\u52d5\u751f\u6210 OpenAPI Schema\u3002\u9019\u7a2e\u95dc\u4fc2\u53ef\u4ee5\u7e3d\u7d50\u70ba\uff1a</p> <ol> <li>Pydantic \u6a21\u578b \u2192 JSON Schema\uff1aPydantic \u6a21\u578b\u88ab\u8f49\u63db\u70ba JSON Schema\uff0c\u5b9a\u7fa9\u4e86\u6578\u64da\u7d50\u69cb\u3002</li> <li>\u8def\u5f91\u64cd\u4f5c\u88dd\u98fe\u5668 \u2192 OpenAPI \u8def\u5f91\u9805\uff1a\u8def\u5f91\u64cd\u4f5c\u88dd\u98fe\u5668\u5b9a\u7fa9\u4e86 API \u7aef\u9ede\uff0c\u5305\u62ec URL\u3001HTTP \u65b9\u6cd5\u548c\u53c3\u6578\u3002</li> <li>\u53c3\u6578\u88dd\u98fe\u5668 \u2192 OpenAPI \u53c3\u6578\uff1a<code>Path</code>\u3001<code>Query</code>\u3001<code>Body</code> \u7b49\u88dd\u98fe\u5668\u589e\u5f37\u4e86\u53c3\u6578\u7684\u63cf\u8ff0\u548c\u9a57\u8b49\u3002</li> <li>\u97ff\u61c9\u6a21\u578b \u2192 OpenAPI \u97ff\u61c9\uff1a<code>response_model</code> \u5b9a\u7fa9\u4e86 API \u7aef\u9ede\u7684\u97ff\u61c9\u7d50\u69cb\u3002</li> <li>\u4f9d\u8cf4\u9805 \u2192 OpenAPI \u5b89\u5168\u6027\u548c\u53c3\u6578\uff1a\u4f9d\u8cf4\u9805\u53ef\u4ee5\u5b9a\u7fa9\u5b89\u5168\u8981\u6c42\u548c\u984d\u5916\u53c3\u6578\u3002</li> </ol>"},{"location":"openapi/04-openapi-schema/#_7","title":"\u7e3d\u7d50","text":"<p>FastAPI \u8207 Pydantic \u7dca\u5bc6\u7d50\u5408\uff0c\u63d0\u4f9b\u4e86\u5f37\u5927\u7684 API \u6587\u6a94\u751f\u6210\u529f\u80fd\uff1a</p> <ol> <li>\u81ea\u52d5\u6587\u6a94\u751f\u6210\uff1a\u6839\u64da\u4ee3\u78bc\u81ea\u52d5\u751f\u6210 API \u6587\u6a94</li> <li>\u985e\u578b\u5b89\u5168\uff1a\u901a\u904e Pydantic \u6a21\u578b\u78ba\u4fdd\u6578\u64da\u985e\u578b\u5b89\u5168</li> <li>\u53c3\u6578\u9a57\u8b49\uff1a\u81ea\u52d5\u9a57\u8b49\u8acb\u6c42\u53c3\u6578\u548c\u8acb\u6c42\u9ad4</li> <li>\u97ff\u61c9\u6a21\u578b\uff1a\u660e\u78ba\u5b9a\u7fa9 API \u97ff\u61c9\u7684\u6578\u64da\u7d50\u69cb</li> <li>\u4ea4\u4e92\u5f0f\u6587\u6a94\uff1a\u63d0\u4f9b Swagger UI \u548c ReDoc \u5169\u7a2e\u4ea4\u4e92\u5f0f\u6587\u6a94\u754c\u9762</li> </ol> <p>\u901a\u904e\u9019\u4e9b\u57fa\u672c\u529f\u80fd\uff0c\u958b\u767c\u8005\u53ef\u4ee5\u8f15\u9b06\u5275\u5efa\u5177\u6709\u5b8c\u6574\u6587\u6a94\u7684 API\uff0c\u540c\u6642\u78ba\u4fdd\u6578\u64da\u9a57\u8b49\u548c\u985e\u578b\u5b89\u5168\u3002</p>"},{"location":"openapi/05-advanced-schema/","title":"OpenAPI Schema \u9032\u968e\u7528\u6cd5","text":""},{"location":"openapi/05-advanced-schema/#schema","title":"\u8907\u96dc\u6578\u64da\u6a21\u578b\u8207 Schema \u5b9a\u5236","text":""},{"location":"openapi/05-advanced-schema/#_1","title":"\u8907\u96dc\u5d4c\u5957\u6a21\u578b","text":"<p>FastAPI \u652f\u6301\u8907\u96dc\u7684\u5d4c\u5957\u6a21\u578b\uff0c\u81ea\u52d5\u8f49\u63db\u70ba OpenAPI Schema\uff1a</p> <pre><code>from typing import List, Optional, Set\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, HttpUrl\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\nclass Item(BaseModel):\n    name: str\n    price: float\n    images: Optional[List[Image]] = None\n    tags: Set[str] = set()\n\napp = FastAPI()\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return item\n</code></pre>"},{"location":"openapi/05-advanced-schema/#json-schema","title":"\u81ea\u5b9a\u7fa9 JSON Schema \u5c6c\u6027","text":"<p>\u4f7f\u7528 Pydantic \u7684 <code>Field</code> \u548c <code>model_config</code> \u81ea\u5b9a\u7fa9 Schema\uff1a</p> <pre><code>from fastapi import FastAPI\nfrom pydantic import BaseModel, Field\n\nclass Item(BaseModel):\n    name: str = Field(..., title=\"\u540d\u7a31\", example=\"Foo\")\n    price: float = Field(..., gt=0, example=35.4)\n\n    model_config = {\n        \"json_schema_extra\": {\n            \"examples\": [\n                {\"name\": \"Foo\", \"price\": 35.4}\n            ]\n        }\n    }\n\napp = FastAPI()\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return item\n</code></pre>"},{"location":"openapi/05-advanced-schema/#openapi","title":"\u679a\u8209\u985e\u578b\u8207 OpenAPI","text":"<p>Python \u7684\u679a\u8209\u985e\u578b\u81ea\u52d5\u8f49\u63db\u70ba OpenAPI \u4e2d\u7684\u679a\u8209\uff1a</p> <pre><code>from enum import Enum\nfrom fastapi import FastAPI\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\napp = FastAPI()\n\n@app.get(\"/models/{model_name}\")\nasync def get_model(model_name: ModelName):\n    return {\"model_name\": model_name}\n</code></pre>"},{"location":"openapi/05-advanced-schema/#_2","title":"\u9ad8\u7d1a\u985e\u578b\u7d04\u675f","text":""},{"location":"openapi/05-advanced-schema/#_3","title":"\u985e\u578b\u7d04\u675f\u5c0d\u6bd4\u8868","text":"\u7d04\u675f\u985e\u578b \u8aaa\u660e FastAPI/Pydantic \u5be6\u73fe anyOf \u7b26\u5408\u591a\u500b schema \u4e2d\u7684\u81f3\u5c11\u4e00\u500b <code>Union[Type1, Type2]</code> oneOf \u7b26\u5408\u591a\u500b schema \u4e2d\u7684\u6070\u597d\u4e00\u500b \u4f7f\u7528\u9451\u5225\u5b57\u6bb5 (<code>discriminator</code>) allOf \u540c\u6642\u7b26\u5408\u6240\u6709\u6307\u5b9a\u7684 schema \u985e\u7e7c\u627f (Class inheritance) not \u4e0d\u7b26\u5408\u6307\u5b9a\u7684 schema \u81ea\u5b9a\u7fa9\u9a57\u8b49\u5668 (<code>field_validator</code>)"},{"location":"openapi/05-advanced-schema/#anyof-union","title":"\u4f7f\u7528 anyOf (Union)","text":"<pre><code>from typing import Union\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\nclass StringModel(BaseModel):\n    value: str\n\nclass NumberModel(BaseModel):\n    value: float\n\napp = FastAPI()\n\n@app.post(\"/items/\")\nasync def create_item(item: Union[StringModel, NumberModel]):\n    return item\n</code></pre>"},{"location":"openapi/05-advanced-schema/#oneof","title":"\u4f7f\u7528 oneOf (\u9451\u5225\u5b57\u6bb5)","text":"<pre><code>from typing import Literal, Union\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, Field\n\nclass Dog(BaseModel):\n    pet_type: Literal[\"dog\"]\n    bark: bool = True\n\nclass Cat(BaseModel):\n    pet_type: Literal[\"cat\"]\n    meow: bool = True\n\nclass Pet(BaseModel):\n    pet: Union[Dog, Cat] = Field(..., discriminator=\"pet_type\")\n\napp = FastAPI()\n\n@app.post(\"/pets/\")\nasync def create_pet(pet_info: Pet):\n    return pet_info\n</code></pre>"},{"location":"openapi/05-advanced-schema/#allof","title":"\u4f7f\u7528 allOf (\u7e7c\u627f)","text":"<pre><code>from fastapi import FastAPI\nfrom pydantic import BaseModel\n\nclass NameModel(BaseModel):\n    name: str\n\nclass AgeModel(BaseModel):\n    age: int\n\nclass Person(NameModel, AgeModel):\n    pass\n\napp = FastAPI()\n\n@app.post(\"/persons/\")\nasync def create_person(person: Person):\n    return person\n</code></pre>"},{"location":"openapi/05-advanced-schema/#not","title":"\u4f7f\u7528 not (\u6392\u9664)","text":"<pre><code>from fastapi import FastAPI\nfrom pydantic import BaseModel, field_validator\n\nclass User(BaseModel):\n    username: str\n\n    @field_validator('username')\n    def username_not_reserved(cls, v):\n        if v in [\"admin\", \"root\", \"superuser\"]:\n            raise ValueError(\"\u4fdd\u7559\u7528\u6236\u540d\")\n        return v\n\napp = FastAPI()\n\n@app.post(\"/users/\")\nasync def create_user(user: User):\n    return user\n</code></pre>"},{"location":"openapi/05-advanced-schema/#openapi_1","title":"\u81ea\u5b9a\u7fa9 OpenAPI \u6587\u6a94","text":""},{"location":"openapi/05-advanced-schema/#_4","title":"\u6587\u6a94\u81ea\u5b9a\u7fa9\u9078\u9805","text":"\u81ea\u5b9a\u7fa9\u9805 \u8aaa\u660e \u4f7f\u7528\u65b9\u5f0f \u64cd\u4f5c ID \u8def\u5f91\u64cd\u4f5c\u7684\u552f\u4e00\u6a19\u8b58\u7b26 <code>@app.get(..., operation_id=\"get_item\")</code> \u6a19\u7c64 \u5c0d\u7aef\u9ede\u9032\u884c\u5206\u985e\u5206\u7d44 <code>@app.get(..., tags=[\"users\"])</code> \u6392\u9664\u7aef\u9ede \u5f9e\u6587\u6a94\u4e2d\u96b1\u85cf\u7aef\u9ede <code>@app.get(..., include_in_schema=False)</code> \u81ea\u5b9a\u7fa9\u914d\u7f6e \u6dfb\u52a0\u984d\u5916\u7684 OpenAPI \u4fe1\u606f <code>@app.get(..., openapi_extra={...})</code>"},{"location":"openapi/05-advanced-schema/#id","title":"\u81ea\u5b9a\u7fa9\u64cd\u4f5c ID \u8207\u6a19\u7c64","text":"<pre><code>from fastapi import FastAPI\n\napp = FastAPI(\n    openapi_tags=[\n        {\"name\": \"users\", \"description\": \"\u7528\u6236\u76f8\u95dc\u64cd\u4f5c\"},\n        {\"name\": \"items\", \"description\": \"\u9805\u76ee\u76f8\u95dc\u64cd\u4f5c\"},\n    ]\n)\n\n@app.get(\"/users/\", tags=[\"users\"], operation_id=\"list_users\")\nasync def read_users():\n    return [{\"name\": \"Harry\"}, {\"name\": \"Ron\"}]\n</code></pre>"},{"location":"openapi/05-advanced-schema/#_5","title":"\u9ad8\u7d1a\u97ff\u61c9\u8655\u7406","text":""},{"location":"openapi/05-advanced-schema/#_6","title":"\u97ff\u61c9\u914d\u7f6e\u9078\u9805","text":"\u914d\u7f6e\u9805 \u8aaa\u660e \u4f7f\u7528\u65b9\u5f0f response_model \u97ff\u61c9\u6578\u64da\u6a21\u578b <code>@app.get(..., response_model=Item)</code> response_model_include \u53ea\u5305\u542b\u6307\u5b9a\u5b57\u6bb5 <code>@app.get(..., response_model_include={\"name\"})</code> response_model_exclude \u6392\u9664\u6307\u5b9a\u5b57\u6bb5 <code>@app.get(..., response_model_exclude={\"description\"})</code> responses \u5b9a\u7fa9\u4e0d\u540c\u72c0\u614b\u78bc\u7684\u97ff\u61c9 <code>@app.get(..., responses={404: {\"model\": Error}})</code>"},{"location":"openapi/05-advanced-schema/#_7","title":"\u52d5\u614b\u97ff\u61c9\u6a21\u578b","text":"<pre><code>from typing import Union\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    id: str\n    value: str\n\nclass Message(BaseModel):\n    message: str\n\napp = FastAPI()\n\n@app.get(\"/items/{item_id}\", response_model=Union[Item, Message])\nasync def read_item(item_id: str):\n    if item_id == \"foo\":\n        return {\"id\": \"foo\", \"value\": \"bar\"}\n    return {\"message\": \"Item not found\"}\n</code></pre>"},{"location":"openapi/05-advanced-schema/#_8","title":"\u97ff\u61c9\u6a21\u578b\u904e\u6ffe","text":"<pre><code>from fastapi import FastAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    description: str\n    price: float\n    tax: float\n\napp = FastAPI()\n\n@app.get(\n    \"/items/{item_id}\",\n    response_model=Item,\n    response_model_include={\"name\", \"price\"}\n)\nasync def read_item(item_id: str):\n    return {\n        \"name\": \"Example\",\n        \"description\": \"Full description\",\n        \"price\": 50.2,\n        \"tax\": 10.5\n    }\n</code></pre>"},{"location":"openapi/05-advanced-schema/#_9","title":"\u5b89\u5168\u6027\u8207\u8a8d\u8b49","text":""},{"location":"openapi/05-advanced-schema/#_10","title":"\u652f\u6301\u7684\u5b89\u5168\u65b9\u6848","text":"\u5b89\u5168\u65b9\u6848 \u8aaa\u660e FastAPI \u985e OAuth2 \u5bc6\u78bc\u6d41 \u4f7f\u7528\u7528\u6236\u540d\u548c\u5bc6\u78bc\u7372\u53d6\u4ee4\u724c <code>OAuth2PasswordBearer</code> OAuth2 \u5ba2\u6236\u7aef\u6191\u8b49 \u4f7f\u7528\u5ba2\u6236\u7aef ID \u548c\u5bc6\u9470 <code>OAuth2ClientCredentials</code> API \u5bc6\u9470 (Header) \u5728\u6a19\u982d\u4e2d\u50b3\u905e API \u5bc6\u9470 <code>APIKeyHeader</code> API \u5bc6\u9470 (Query) \u5728\u67e5\u8a62\u53c3\u6578\u4e2d\u50b3\u905e API \u5bc6\u9470 <code>APIKeyQuery</code> API \u5bc6\u9470 (Cookie) \u5728 Cookie \u4e2d\u50b3\u905e API \u5bc6\u9470 <code>APIKeyCookie</code>"},{"location":"openapi/05-advanced-schema/#oauth2","title":"OAuth2 \u57fa\u672c\u793a\u4f8b","text":"<pre><code>from fastapi import Depends, FastAPI, Security\nfrom fastapi.security import OAuth2PasswordBearer\n\napp = FastAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n@app.get(\"/items/\")\nasync def read_items(token: str = Depends(oauth2_scheme)):\n    return {\"token\": token}\n</code></pre>"},{"location":"openapi/05-advanced-schema/#api","title":"API \u5bc6\u9470\u793a\u4f8b","text":"<pre><code>from fastapi import Depends, FastAPI, Security\nfrom fastapi.security import APIKeyHeader\n\napp = FastAPI()\n\napi_key_header = APIKeyHeader(name=\"X-API-Key\")\n\n@app.get(\"/items/\")\nasync def read_items(api_key: str = Depends(api_key_header)):\n    return {\"api_key\": api_key}\n</code></pre>"},{"location":"openapi/05-advanced-schema/#openapi_2","title":"\u4f9d\u8cf4\u9805\u8207 OpenAPI","text":""},{"location":"openapi/05-advanced-schema/#openapi_3","title":"\u4f9d\u8cf4\u9805\u5728 OpenAPI \u4e2d\u7684\u8868\u73fe","text":"<pre><code>from fastapi import Depends, FastAPI, Query\n\napp = FastAPI()\n\nasync def common_params(\n    q: str = Query(None, min_length=3),\n    skip: int = Query(0, ge=0),\n    limit: int = Query(10, le=100)\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_params)):\n    return commons\n</code></pre>"},{"location":"openapi/05-advanced-schema/#_11","title":"\u8def\u5f91\u4f9d\u8cf4\u9805","text":"<pre><code>from fastapi import Depends, FastAPI, Header, HTTPException\n\napp = FastAPI()\n\nasync def verify_token(x_token: str = Header(...)):\n    if x_token != \"valid-token\":\n        raise HTTPException(status_code=400, detail=\"Invalid token\")\n    return x_token\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}]\n</code></pre>"},{"location":"openapi/05-advanced-schema/#_12","title":"\u5be6\u7528\u6848\u4f8b","text":""},{"location":"openapi/05-advanced-schema/#api_1","title":"\u591a\u614b\u6027 API \u7aef\u9ede","text":"<pre><code>from typing import Literal, Union\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\nclass BasePet(BaseModel):\n    pet_type: str\n    name: str\n\nclass Dog(BasePet):\n    pet_type: Literal[\"dog\"]\n    breed: str\n\nclass Cat(BasePet):\n    pet_type: Literal[\"cat\"]\n    breed: str\n\nclass PetRegistration(BaseModel):\n    owner_name: str\n    pet: Union[Dog, Cat] = Field(..., discriminator=\"pet_type\")\n\n@app.post(\"/register/\")\nasync def register_pet(registration: PetRegistration):\n    return registration\n</code></pre>"},{"location":"openapi/05-advanced-schema/#_13","title":"\u8907\u96dc\u9a57\u8b49\u898f\u5247","text":"<pre><code>from datetime import date\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, field_validator\n\napp = FastAPI()\n\nclass BookingDate(BaseModel):\n    check_in: date\n    check_out: date\n\n    @field_validator('check_out')\n    def check_dates(cls, v, info):\n        if 'check_in' in info.data and v &lt;= info.data['check_in']:\n            raise ValueError('\u9000\u623f\u65e5\u671f\u5fc5\u9808\u665a\u65bc\u5165\u4f4f\u65e5\u671f')\n        return v\n\n@app.post(\"/bookings/\")\nasync def create_booking(booking: BookingDate):\n    return booking\n</code></pre>"},{"location":"openapi/05-advanced-schema/#schema_1","title":"\u5e38\u7528 Schema \u5b9a\u5236\u6280\u5de7","text":""},{"location":"openapi/05-advanced-schema/#field","title":"\u5e38\u7528 Field \u53c3\u6578","text":"\u53c3\u6578 \u8aaa\u660e \u793a\u4f8b <code>default</code> \u9ed8\u8a8d\u503c <code>Field(default=0)</code> <code>title</code> \u5b57\u6bb5\u6a19\u984c <code>Field(title=\"\u9805\u76ee\u540d\u7a31\")</code> <code>description</code> \u5b57\u6bb5\u63cf\u8ff0 <code>Field(description=\"\u9805\u76ee\u7684\u8a73\u7d30\u63cf\u8ff0\")</code> <code>example</code> \u793a\u4f8b\u503c <code>Field(example=\"\u7bc4\u4f8b\u503c\")</code> <code>gt/ge</code> \u5927\u65bc/\u5927\u65bc\u7b49\u65bc <code>Field(ge=0)</code> <code>lt/le</code> \u5c0f\u65bc/\u5c0f\u65bc\u7b49\u65bc <code>Field(lt=100)</code> <code>min_length/max_length</code> \u5b57\u7b26\u4e32\u9577\u5ea6\u9650\u5236 <code>Field(min_length=3, max_length=50)</code> <code>regex</code> \u6b63\u5247\u8868\u9054\u5f0f <code>Field(regex=\"^[a-z]+$\")</code>"},{"location":"openapi/05-advanced-schema/#openapi_4","title":"\u81ea\u5b9a\u7fa9 OpenAPI \u793a\u4f8b","text":"<pre><code>from fastapi import FastAPI, Body\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    price: float\n\n    model_config = {\n        \"json_schema_extra\": {\n            \"examples\": [\n                {\n                    \"name\": \"Foo\",\n                    \"price\": 35.4\n                }\n            ]\n        }\n    }\n\napp = FastAPI()\n\n@app.post(\"/items/\")\nasync def create_item(\n    item: Item = Body(\n        ...,\n        examples=[\n            {\n                \"summary\": \"\u57fa\u672c\u793a\u4f8b\",\n                \"value\": {\n                    \"name\": \"Foo\",\n                    \"price\": 35.4\n                }\n            },\n            {\n                \"summary\": \"\u9ad8\u50f9\u793a\u4f8b\",\n                \"value\": {\n                    \"name\": \"Bar\",\n                    \"price\": 135.4\n                }\n            }\n        ]\n    )\n):\n    return item\n</code></pre>"},{"location":"openapi/05-advanced-schema/#_14","title":"\u7e3d\u7d50","text":"<p>OpenAPI Schema \u9032\u968e\u7528\u6cd5\u7684\u4e3b\u8981\u512a\u52e2\uff1a</p> \u529f\u80fd \u512a\u52e2 \u8907\u96dc\u6578\u64da\u6a21\u578b \u652f\u6301\u5d4c\u5957\u3001\u7e7c\u627f\u548c\u8907\u96dc\u95dc\u4fc2 \u9ad8\u7d1a\u985e\u578b\u7d04\u675f \u63d0\u4f9b\u9748\u6d3b\u7684\u6578\u64da\u9a57\u8b49\u6a5f\u5236 \u81ea\u5b9a\u7fa9\u6587\u6a94 \u6539\u5584 API \u6587\u6a94\u7684\u7d44\u7e54\u548c\u53ef\u8b80\u6027 \u9ad8\u7d1a\u97ff\u61c9\u8655\u7406 \u7cbe\u78ba\u63a7\u5236 API \u8f38\u51fa \u5b89\u5168\u6027\u8207\u8a8d\u8b49 \u5167\u5efa\u591a\u7a2e\u5b89\u5168\u6a5f\u5236\u4e26\u53cd\u6620\u5728\u6587\u6a94\u4e2d \u4f9d\u8cf4\u9805\u6574\u5408 \u7c21\u5316\u4ee3\u78bc\u4e26\u81ea\u52d5\u751f\u6210\u6587\u6a94 <p>\u9019\u4e9b\u9032\u968e\u529f\u80fd\u4f7f FastAPI \u6210\u70ba\u69cb\u5efa\u8907\u96dc\u3001\u9ad8\u6027\u80fd API \u7684\u7406\u60f3\u9078\u64c7\uff0c\u540c\u6642\u4fdd\u6301\u4e86\u51fa\u8272\u7684\u6587\u6a94\u548c\u985e\u578b\u5b89\u5168\u6027\u3002</p>"},{"location":"openapi/06-api-documentation/","title":"API \u6587\u6a94\u6700\u4f73\u5be6\u8e10\uff1aFastAPI \u6574\u5408","text":""},{"location":"openapi/06-api-documentation/#fastapi","title":"FastAPI \u6587\u6a94\u7cfb\u7d71\u6982\u8ff0","text":"<p>FastAPI \u63d0\u4f9b\u81ea\u52d5\u751f\u6210\u7684\u4e92\u52d5\u5f0f API \u6587\u6a94\uff1a</p> \u6587\u6a94\u4ecb\u9762 \u8def\u5f91 \u7279\u9ede Swagger UI <code>/docs</code> \u4e92\u52d5\u5f0f\u6e2c\u8a66\u3001\u8c50\u5bcc\u8996\u89ba\u6548\u679c ReDoc <code>/redoc</code> \u66f4\u6e05\u6670\u7684\u95b1\u8b80\u9ad4\u9a57\u3001\u66f4\u597d\u7684\u5c0e\u822a <pre><code>from fastapi import FastAPI\n\napp = FastAPI(\n    title=\"\u6211\u7684 API\",\n    description=\"\u9019\u662f\u4e00\u500b\u793a\u7bc4 API \u6587\u6a94\u7684\u793a\u4f8b\",\n    version=\"0.1.0\",\n    docs_url=\"/documentation\",  # \u81ea\u8a02 Swagger UI \u8def\u5f91\n    redoc_url=\"/redocumentation\"  # \u81ea\u8a02 ReDoc \u8def\u5f91\n)\n\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n</code></pre>"},{"location":"openapi/06-api-documentation/#_1","title":"\u57fa\u672c\u6587\u6a94\u5143\u7d20","text":""},{"location":"openapi/06-api-documentation/#api","title":"API \u5143\u6578\u64da","text":"<p>\u8a2d\u5b9a API \u7684\u57fa\u672c\u4fe1\u606f\uff1a</p> <pre><code>from fastapi import FastAPI\n\napp = FastAPI(\n    title=\"\u7522\u54c1\u7ba1\u7406\u7cfb\u7d71\",\n    description=\"\"\"\n    # \u7522\u54c1\u7ba1\u7406\u7cfb\u7d71 API\n\n    \u9019\u500b API \u5141\u8a31\u60a8\uff1a\n    * \u5275\u5efa\u7522\u54c1\n    * \u67e5\u8a62\u7522\u54c1\n    * \u66f4\u65b0\u7522\u54c1\n    * \u522a\u9664\u7522\u54c1\n\n    ## \u6ce8\u610f\u4e8b\u9805\n    \u6240\u6709\u64cd\u4f5c\u9700\u8981\u9069\u7576\u7684\u6b0a\u9650\u3002\n    \"\"\",\n    version=\"1.0.0\",\n    terms_of_service=\"http://example.com/terms/\",\n    contact={\n        \"name\": \"API \u652f\u63f4\u5718\u968a\",\n        \"url\": \"http://example.com/contact/\",\n        \"email\": \"support@example.com\",\n    },\n    license_info={\n        \"name\": \"Apache 2.0\",\n        \"url\": \"https://www.apache.org/licenses/LICENSE-2.0.html\",\n    }\n)\n</code></pre>"},{"location":"openapi/06-api-documentation/#_2","title":"\u8def\u5f91\u64cd\u4f5c\u63cf\u8ff0","text":"<p>\u70ba\u6bcf\u500b\u7aef\u9ede\u6dfb\u52a0\u8a73\u7d30\u63cf\u8ff0\uff1a</p> <pre><code>from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\nclass Item(BaseModel):\n    name: str\n    price: float\n\n@app.post(\n    \"/items/\",\n    summary=\"\u5275\u5efa\u65b0\u9805\u76ee\",\n    description=\"\"\"\n    \u5275\u5efa\u4e00\u500b\u65b0\u9805\u76ee\uff0c\u5305\u542b\u4ee5\u4e0b\u4fe1\u606f\uff1a\n    - **name**: \u9805\u76ee\u540d\u7a31\n    - **price**: \u9805\u76ee\u50f9\u683c\n\n    \u50f9\u683c\u5fc5\u9808\u5927\u65bc\u96f6\u3002\n    \"\"\",\n    response_description=\"\u5275\u5efa\u6210\u529f\u7684\u9805\u76ee\u4fe1\u606f\"\n)\nasync def create_item(item: Item):\n    \"\"\"\n    \u5275\u5efa\u9805\u76ee\uff1a\n\n    - **name**: \u6bcf\u500b\u9805\u76ee\u5fc5\u9808\u6709\u4e00\u500b\u540d\u7a31\n    - **price**: \u5fc5\u9808\u662f\u6b63\u6578\n    \"\"\"\n    return item\n</code></pre>"},{"location":"openapi/06-api-documentation/#_3","title":"\u6a19\u7c64\u8207\u5206\u7d44","text":"<p>\u4f7f\u7528\u6a19\u7c64\u7d44\u7e54 API \u7aef\u9ede\uff1a</p> <pre><code>from fastapi import FastAPI\n\napp = FastAPI(\n    openapi_tags=[\n        {\n            \"name\": \"users\",\n            \"description\": \"\u7528\u6236\u7ba1\u7406\u64cd\u4f5c\",\n            \"externalDocs\": {\n                \"description\": \"\u7528\u6236\u76f8\u95dc\u5916\u90e8\u6587\u6a94\",\n                \"url\": \"https://example.com/docs/users/\",\n            },\n        },\n        {\n            \"name\": \"items\",\n            \"description\": \"\u9805\u76ee\u7ba1\u7406\u64cd\u4f5c\",\n        },\n    ]\n)\n\n@app.get(\"/users/\", tags=[\"users\"])\nasync def read_users():\n    return [{\"name\": \"Harry\"}]\n\n@app.get(\"/items/\", tags=[\"items\"])\nasync def read_items():\n    return [{\"name\": \"Wand\"}]\n\n@app.get(\"/both/\", tags=[\"users\", \"items\"])\nasync def read_both():\n    return {\"users\": [{\"name\": \"Harry\"}], \"items\": [{\"name\": \"Wand\"}]}\n</code></pre>"},{"location":"openapi/06-api-documentation/#_4","title":"\u9ad8\u7d1a\u6587\u6a94\u6280\u5de7","text":""},{"location":"openapi/06-api-documentation/#_5","title":"\u8acb\u6c42\u9ad4\u793a\u4f8b","text":"<p>\u63d0\u4f9b\u8acb\u6c42\u9ad4\u7684\u793a\u4f8b\uff1a</p> <pre><code>from fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\nclass Item(BaseModel):\n    name: str\n    price: float\n\n    model_config = {\n        \"json_schema_extra\": {\n            \"examples\": [\n                {\n                    \"name\": \"Foo\",\n                    \"price\": 35.4\n                }\n            ]\n        }\n    }\n\n@app.post(\"/items/\")\nasync def create_item(\n    item: Item = Body(\n        ...,\n        examples=[\n            {\n                \"summary\": \"\u6a19\u6e96\u9805\u76ee\",\n                \"description\": \"\u4e00\u500b\u6a19\u6e96\u50f9\u683c\u7684\u9805\u76ee\u793a\u4f8b\",\n                \"value\": {\n                    \"name\": \"Foo\",\n                    \"price\": 35.4\n                }\n            },\n            {\n                \"summary\": \"\u9ad8\u7d1a\u9805\u76ee\",\n                \"description\": \"\u4e00\u500b\u9ad8\u50f9\u683c\u7684\u9805\u76ee\u793a\u4f8b\",\n                \"value\": {\n                    \"name\": \"Bar\",\n                    \"price\": 62.0\n                }\n            }\n        ]\n    )\n):\n    return item\n</code></pre>"},{"location":"openapi/06-api-documentation/#_6","title":"\u97ff\u61c9\u793a\u4f8b","text":"<p>\u5b9a\u7fa9\u4e0d\u540c\u72c0\u614b\u78bc\u7684\u97ff\u61c9\u6a21\u578b\u548c\u793a\u4f8b\uff1a</p> <pre><code>from typing import Dict, Union\nfrom fastapi import FastAPI, HTTPException, status\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\nclass Item(BaseModel):\n    id: str\n    name: str\n    price: float\n\nclass Message(BaseModel):\n    message: str\n\n@app.get(\n    \"/items/{item_id}\",\n    response_model=Item,\n    responses={\n        200: {\n            \"description\": \"\u6210\u529f\u7372\u53d6\u9805\u76ee\",\n            \"content\": {\n                \"application/json\": {\n                    \"example\": {\"id\": \"foo\", \"name\": \"Foo\", \"price\": 50.2}\n                }\n            }\n        },\n        404: {\n            \"description\": \"\u9805\u76ee\u672a\u627e\u5230\",\n            \"model\": Message,\n            \"content\": {\n                \"application/json\": {\n                    \"example\": {\"message\": \"\u627e\u4e0d\u5230\u6b64\u9805\u76ee\"}\n                }\n            }\n        }\n    }\n)\nasync def read_item(item_id: str):\n    if item_id != \"foo\":\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND, \n            detail=\"\u627e\u4e0d\u5230\u6b64\u9805\u76ee\"\n        )\n    return {\"id\": \"foo\", \"name\": \"Foo\", \"price\": 50.2}\n</code></pre>"},{"location":"openapi/06-api-documentation/#_7","title":"\u68c4\u7528\u6a19\u8a18","text":"<p>\u6a19\u8a18\u5df2\u68c4\u7528\u7684\u7aef\u9ede\uff1a</p> <pre><code>from fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/legacy/\", deprecated=True)\nasync def read_legacy():\n    return {\"message\": \"\u9019\u500b\u7aef\u9ede\u5df2\u68c4\u7528\"}\n\n@app.get(\"/current/\")\nasync def read_current():\n    return {\"message\": \"\u9019\u662f\u7576\u524d\u7248\u672c\u7684\u7aef\u9ede\"}\n</code></pre>"},{"location":"openapi/06-api-documentation/#_8","title":"\u6587\u6a94\u8207\u4ee3\u78bc\u7684\u7d50\u5408","text":""},{"location":"openapi/06-api-documentation/#docstrings","title":"\u6587\u6a94\u5b57\u7b26\u4e32 (Docstrings)","text":"<p>\u5229\u7528 Python \u6587\u6a94\u5b57\u7b26\u4e32\u589e\u5f37\u6587\u6a94\uff1a</p> <pre><code>from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\nclass Item(BaseModel):\n    name: str\n    price: float\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    \"\"\"\n    \u5275\u5efa\u65b0\u9805\u76ee\n\n    \u6b64\u7aef\u9ede\u5141\u8a31\u5275\u5efa\u65b0\u7684\u9805\u76ee\u8a18\u9304\u3002\n\n    - **name**: \u9805\u76ee\u540d\u7a31\uff0c\u4e0d\u80fd\u70ba\u7a7a\n    - **price**: \u9805\u76ee\u50f9\u683c\uff0c\u5fc5\u9808\u5927\u65bc\u96f6\n\n    \u8fd4\u56de\u5275\u5efa\u7684\u9805\u76ee\uff0c\u5305\u62ec\u751f\u6210\u7684 ID\u3002\n    \"\"\"\n    return {\"id\": \"123\", **item.model_dump()}\n</code></pre>"},{"location":"openapi/06-api-documentation/#_9","title":"\u985e\u578b\u8a3b\u89e3\u8207\u6587\u6a94","text":"<p>\u5229\u7528\u985e\u578b\u8a3b\u89e3\u63d0\u9ad8\u6587\u6a94\u8cea\u91cf\uff1a</p> <pre><code>from typing import Dict, List, Optional, Union\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\nclass Item(BaseModel):\n    name: str\n    description: Optional[str] = None\n    price: float\n    tax: Optional[float] = None\n\n@app.get(\"/items/\", response_model=List[Item])\nasync def read_items() -&gt; List[Item]:\n    \"\"\"\n    \u7372\u53d6\u6240\u6709\u9805\u76ee\n\n    \u8fd4\u56de\u7cfb\u7d71\u4e2d\u6240\u6709\u9805\u76ee\u7684\u5217\u8868\u3002\n    \"\"\"\n    return [\n        {\"name\": \"Item1\", \"price\": 50.2},\n        {\"name\": \"Item2\", \"price\": 30, \"description\": \"This is Item2\"}\n    ]\n\n@app.get(\"/items/{item_id}\", response_model=Union[Item, Dict[str, str]])\nasync def read_item(item_id: str) -&gt; Union[Item, Dict[str, str]]:\n    \"\"\"\n    \u7372\u53d6\u7279\u5b9a\u9805\u76ee\n\n    \u5982\u679c\u627e\u5230\u9805\u76ee\uff0c\u8fd4\u56de\u9805\u76ee\u8a73\u60c5\uff1b\u5426\u5247\u8fd4\u56de\u932f\u8aa4\u6d88\u606f\u3002\n    \"\"\"\n    if item_id == \"foo\":\n        return {\"name\": \"Foo\", \"price\": 50.2}\n    return {\"message\": \"Item not found\"}\n</code></pre>"},{"location":"openapi/06-api-documentation/#_10","title":"\u6587\u6a94\u81ea\u5b9a\u7fa9\u8207\u64f4\u5c55","text":""},{"location":"openapi/06-api-documentation/#openapi-id","title":"\u81ea\u5b9a\u7fa9 OpenAPI \u64cd\u4f5c ID","text":"<p>\u6307\u5b9a\u64cd\u4f5c ID \u4ee5\u4fbf\u5ba2\u6236\u7aef\u4ee3\u78bc\u751f\u6210\uff1a</p> <pre><code>from fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/items/\", operation_id=\"get_items_list\")\nasync def read_items():\n    return [{\"name\": \"Foo\"}]\n\n@app.get(\"/items/{item_id}\", operation_id=\"get_item_by_id\")\nasync def read_item(item_id: str):\n    return {\"name\": \"Foo\", \"item_id\": item_id}\n</code></pre>"},{"location":"openapi/06-api-documentation/#openapi-schema","title":"\u64f4\u5c55 OpenAPI Schema","text":"<p>\u6dfb\u52a0\u81ea\u5b9a\u7fa9 OpenAPI \u64f4\u5c55\uff1a</p> <pre><code>from fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\n    \"/items/\",\n    openapi_extra={\n        \"x-custom-extension\": \"value\",\n        \"x-rate-limit\": {\n            \"max\": 100,\n            \"period\": \"hour\"\n        }\n    }\n)\nasync def read_items():\n    return [{\"name\": \"Foo\"}]\n</code></pre>"},{"location":"openapi/06-api-documentation/#openapi-schema_1","title":"\u5b8c\u5168\u81ea\u5b9a\u7fa9 OpenAPI Schema","text":"<pre><code>from fastapi import FastAPI\nfrom fastapi.openapi.utils import get_openapi\n\napp = FastAPI()\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Foo\"}]\n\ndef custom_openapi():\n    if app.openapi_schema:\n        return app.openapi_schema\n\n    openapi_schema = get_openapi(\n        title=\"\u81ea\u5b9a\u7fa9\u6a19\u984c\",\n        version=\"2.5.0\",\n        description=\"\u9019\u662f\u4e00\u500b\u81ea\u5b9a\u7fa9\u7684 OpenAPI schema\",\n        routes=app.routes,\n    )\n\n    # \u81ea\u5b9a\u7fa9\u8def\u5f91\n    openapi_schema[\"paths\"][\"/items/\"][\"get\"][\"summary\"] = \"\u8b80\u53d6\u9805\u76ee\u5217\u8868\"\n\n    # \u6dfb\u52a0\u81ea\u5b9a\u7fa9\u6a19\u7c64\n    openapi_schema[\"tags\"] = [\n        {\n            \"name\": \"items\",\n            \"description\": \"\u9805\u76ee\u64cd\u4f5c\",\n        }\n    ]\n\n    app.openapi_schema = openapi_schema\n    return app.openapi_schema\n\napp.openapi = custom_openapi\n</code></pre>"},{"location":"openapi/06-api-documentation/#_11","title":"\u6587\u6a94\u4e92\u52d5\u529f\u80fd","text":""},{"location":"openapi/06-api-documentation/#_12","title":"\u6388\u6b0a\u914d\u7f6e","text":"<p>\u914d\u7f6e Swagger UI \u7684\u6388\u6b0a\u529f\u80fd\uff1a</p> <pre><code>from fastapi import Depends, FastAPI, Security\nfrom fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\napp = FastAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    # \u7c21\u5316\u7684\u9a57\u8b49\u908f\u8f2f\n    if form_data.username == \"user\" and form_data.password == \"password\":\n        return {\"access_token\": \"fake_token\", \"token_type\": \"bearer\"}\n    return {\"error\": \"Invalid credentials\"}\n\n@app.get(\"/items/\")\nasync def read_items(token: str = Depends(oauth2_scheme)):\n    return [{\"name\": \"Foo\"}]\n</code></pre>"},{"location":"openapi/06-api-documentation/#swagger-ui-redoc","title":"\u81ea\u5b9a\u7fa9 Swagger UI \u548c ReDoc","text":"<p>\u81ea\u5b9a\u7fa9\u6587\u6a94\u754c\u9762\uff1a</p> <pre><code>from fastapi import FastAPI\n\napp = FastAPI(\n    swagger_ui_parameters={\n        \"defaultModelsExpandDepth\": -1,  # \u96b1\u85cf Models \u90e8\u5206\n        \"displayRequestDuration\": True,  # \u986f\u793a\u8acb\u6c42\u6301\u7e8c\u6642\u9593\n        \"docExpansion\": \"none\",  # \u9ed8\u8a8d\u647a\u758a\u6240\u6709\u64cd\u4f5c\n        \"filter\": True,  # \u555f\u7528\u904e\u6ffe\u529f\u80fd\n        \"syntaxHighlight.theme\": \"agate\",  # \u8a9e\u6cd5\u9ad8\u4eae\u4e3b\u984c\n    }\n)\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Foo\"}]\n</code></pre>"},{"location":"openapi/06-api-documentation/#_13","title":"\u6587\u6a94\u7248\u672c\u63a7\u5236","text":""},{"location":"openapi/06-api-documentation/#api_1","title":"API \u7248\u672c\u63a7\u5236","text":"<p>\u4f7f\u7528\u8def\u5f91\u53c3\u6578\u9032\u884c\u7248\u672c\u63a7\u5236\uff1a</p> <pre><code>from fastapi import FastAPI, APIRouter\n\napp = FastAPI()\n\n# v1 API\nv1_router = APIRouter(prefix=\"/v1\", tags=[\"v1\"])\n\n@v1_router.get(\"/items/\")\nasync def read_items_v1():\n    return [{\"name\": \"Foo\", \"version\": \"v1\"}]\n\n# v2 API\nv2_router = APIRouter(prefix=\"/v2\", tags=[\"v2\"])\n\n@v2_router.get(\"/items/\")\nasync def read_items_v2():\n    return [{\"name\": \"Foo\", \"version\": \"v2\", \"extra\": \"data\"}]\n\napp.include_router(v1_router)\napp.include_router(v2_router)\n</code></pre>"},{"location":"openapi/06-api-documentation/#_14","title":"\u68c4\u7528\u8207\u904e\u6e21","text":"<p>\u6a19\u8a18\u68c4\u7528\u7684 API \u7248\u672c\uff1a</p> <pre><code>from fastapi import FastAPI, APIRouter\n\napp = FastAPI()\n\n# \u5df2\u68c4\u7528\u7684 v1 API\nv1_router = APIRouter(prefix=\"/v1\", tags=[\"v1-deprecated\"])\n\n@v1_router.get(\"/items/\", deprecated=True)\nasync def read_items_v1():\n    \"\"\"\n    \u6b64\u7aef\u9ede\u5df2\u68c4\u7528\uff0c\u5c07\u5728 2023 \u5e74 12 \u6708 31 \u65e5\u79fb\u9664\u3002\n    \u8acb\u4f7f\u7528 /v2/items/ \u7aef\u9ede\u3002\n    \"\"\"\n    return [{\"name\": \"Foo\", \"version\": \"v1\"}]\n\n# \u7576\u524d v2 API\nv2_router = APIRouter(prefix=\"/v2\", tags=[\"v2-current\"])\n\n@v2_router.get(\"/items/\")\nasync def read_items_v2():\n    \"\"\"\n    \u7372\u53d6\u9805\u76ee\u5217\u8868\uff08\u7576\u524d\u7248\u672c\uff09\n    \"\"\"\n    return [{\"name\": \"Foo\", \"version\": \"v2\", \"extra\": \"data\"}]\n\napp.include_router(v1_router)\napp.include_router(v2_router)\n</code></pre>"},{"location":"openapi/06-api-documentation/#_15","title":"\u6587\u6a94\u6700\u4f73\u5be6\u8e10","text":""},{"location":"openapi/06-api-documentation/#_16","title":"\u6587\u6a94\u6e05\u6670\u5ea6\u6aa2\u67e5\u8868","text":"\u9805\u76ee \u5efa\u8b70 \u7bc4\u4f8b \u7aef\u9ede\u6458\u8981 \u7c21\u77ed\u3001\u52d5\u8a5e\u958b\u982d \"\u7372\u53d6\u7528\u6236\u5217\u8868\" \u7aef\u9ede\u63cf\u8ff0 \u8a73\u7d30\u8aaa\u660e\u529f\u80fd\u548c\u9650\u5236 \"\u8fd4\u56de\u7cfb\u7d71\u4e2d\u7684\u6240\u6709\u6d3b\u8e8d\u7528\u6236\uff0c\u5206\u9801\u986f\u793a\" \u53c3\u6578\u63cf\u8ff0 \u8aaa\u660e\u7528\u9014\u3001\u683c\u5f0f\u548c\u7d04\u675f \"\u7528\u6236 ID\uff0c\u5fc5\u9808\u662f\u6709\u6548\u7684 UUID \u683c\u5f0f\" \u97ff\u61c9\u63cf\u8ff0 \u8aaa\u660e\u8fd4\u56de\u6578\u64da\u7d50\u69cb\u548c\u72c0\u614b\u78bc \"\u8fd4\u56de\u7528\u6236\u8a73\u7d30\u4fe1\u606f\uff0c\u5305\u62ec\u500b\u4eba\u8cc7\u6599\u548c\u6b0a\u9650\" \u793a\u4f8b\u503c \u63d0\u4f9b\u6709\u610f\u7fa9\u7684\u793a\u4f8b <code>{\"name\": \"\u5f35\u4e09\", \"email\": \"zhang@example.com\"}</code> \u932f\u8aa4\u8655\u7406 \u63cf\u8ff0\u53ef\u80fd\u7684\u932f\u8aa4\u548c\u89e3\u6c7a\u65b9\u6cd5 \"404: \u7528\u6236\u4e0d\u5b58\u5728\uff0c\u8acb\u6aa2\u67e5 ID \u662f\u5426\u6b63\u78ba\""},{"location":"openapi/06-api-documentation/#_17","title":"\u6587\u6a94\u7d44\u7e54\u5efa\u8b70","text":"<pre><code>from fastapi import FastAPI, APIRouter\n\napp = FastAPI(\n    title=\"\u7522\u54c1\u7ba1\u7406\u7cfb\u7d71\",\n    description=\"\"\"\n    # \u7522\u54c1\u7ba1\u7406\u7cfb\u7d71 API \u6587\u6a94\n\n    ## \u529f\u80fd\u6a21\u584a\n    * \u7528\u6236\u7ba1\u7406 - \u8655\u7406\u7528\u6236\u5e33\u6236\u548c\u8a8d\u8b49\n    * \u7522\u54c1\u7ba1\u7406 - \u8655\u7406\u7522\u54c1\u7684 CRUD \u64cd\u4f5c\n    * \u8a02\u55ae\u7ba1\u7406 - \u8655\u7406\u8a02\u55ae\u6d41\u7a0b\n\n    ## \u4f7f\u7528\u6307\u5357\n    \u6240\u6709\u8acb\u6c42\u9700\u8981\u5728\u6a19\u982d\u4e2d\u5305\u542b\u6709\u6548\u7684 API \u5bc6\u9470\u3002\n    \"\"\"\n)\n\n# \u7528\u6236\u76f8\u95dc\u8def\u7531\nuser_router = APIRouter(\n    prefix=\"/users\",\n    tags=[\"\u7528\u6236\u7ba1\u7406\"],\n    responses={404: {\"description\": \"\u7528\u6236\u672a\u627e\u5230\"}}\n)\n\n# \u7522\u54c1\u76f8\u95dc\u8def\u7531\nproduct_router = APIRouter(\n    prefix=\"/products\",\n    tags=[\"\u7522\u54c1\u7ba1\u7406\"],\n    responses={404: {\"description\": \"\u7522\u54c1\u672a\u627e\u5230\"}}\n)\n\n# \u8a02\u55ae\u76f8\u95dc\u8def\u7531\norder_router = APIRouter(\n    prefix=\"/orders\",\n    tags=[\"\u8a02\u55ae\u7ba1\u7406\"],\n    responses={404: {\"description\": \"\u8a02\u55ae\u672a\u627e\u5230\"}}\n)\n\n# \u6dfb\u52a0\u8def\u7531\napp.include_router(user_router)\napp.include_router(product_router)\napp.include_router(order_router)\n</code></pre>"},{"location":"openapi/06-api-documentation/#_18","title":"\u6587\u6a94\u7dad\u8b77\u7b56\u7565","text":"\u7b56\u7565 \u8aaa\u660e \u5be6\u65bd\u65b9\u5f0f \u6587\u6a94\u5be9\u67e5 \u5b9a\u671f\u5be9\u67e5\u6587\u6a94\u7684\u6e96\u78ba\u6027\u548c\u5b8c\u6574\u6027 \u5efa\u7acb\u6587\u6a94\u5be9\u67e5\u6e05\u55ae\u548c\u6d41\u7a0b \u81ea\u52d5\u5316\u6e2c\u8a66 \u78ba\u4fdd\u6587\u6a94\u793a\u4f8b\u8207\u5be6\u969b API \u884c\u70ba\u4e00\u81f4 \u4f7f\u7528\u6587\u6a94\u793a\u4f8b\u4f5c\u70ba\u6e2c\u8a66\u7528\u4f8b \u8b8a\u66f4\u8a18\u9304 \u8a18\u9304 API \u8b8a\u66f4\u548c\u6587\u6a94\u66f4\u65b0 \u7dad\u8b77 CHANGELOG.md \u6587\u4ef6 \u6587\u6a94\u7248\u672c \u5c07\u6587\u6a94\u7248\u672c\u8207 API \u7248\u672c\u540c\u6b65 \u5728\u6587\u6a94\u4e2d\u6a19\u660e\u9069\u7528\u7684 API \u7248\u672c"},{"location":"openapi/06-api-documentation/#_19","title":"\u6587\u6a94\u5de5\u5177\u6574\u5408","text":""},{"location":"openapi/06-api-documentation/#api_2","title":"API \u5ba2\u6236\u7aef\u751f\u6210","text":"<p>\u5f9e OpenAPI \u898f\u7bc4\u751f\u6210\u5ba2\u6236\u7aef\u4ee3\u78bc\uff1a</p> \u5de5\u5177 \u652f\u6301\u8a9e\u8a00 \u7528\u6cd5 OpenAPI Generator \u591a\u7a2e\u8a9e\u8a00 <code>openapi-generator generate -i openapi.json -g python -o ./client</code> Swagger Codegen \u591a\u7a2e\u8a9e\u8a00 <code>swagger-codegen generate -i openapi.json -l typescript-fetch -o ./client</code> TypeScript TypeScript \u4f7f\u7528 <code>openapi-typescript</code> \u5305"},{"location":"openapi/06-api-documentation/#_20","title":"\u6587\u6a94\u5c0e\u51fa","text":"<p>\u5c07 API \u6587\u6a94\u5c0e\u51fa\u70ba\u5176\u4ed6\u683c\u5f0f\uff1a</p> <pre><code># \u5c0e\u51fa OpenAPI \u898f\u7bc4\u70ba JSON \u6587\u4ef6\nimport json\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Foo\"}]\n\nwith open(\"openapi.json\", \"w\") as f:\n    json.dump(app.openapi(), f, indent=2)\n</code></pre>"},{"location":"openapi/06-api-documentation/#_21","title":"\u7b2c\u4e09\u65b9\u6587\u6a94\u5de5\u5177","text":"<p>\u8207\u5176\u4ed6\u6587\u6a94\u5de5\u5177\u6574\u5408\uff1a</p> \u5de5\u5177 \u7528\u9014 \u6574\u5408\u65b9\u5f0f Postman API \u6e2c\u8a66\u8207\u6587\u6a94 \u5c0e\u5165 OpenAPI \u898f\u7bc4 Stoplight API \u8a2d\u8a08\u8207\u6587\u6a94 \u5c0e\u5165/\u5c0e\u51fa OpenAPI \u898f\u7bc4 ReadMe API \u6587\u6a94\u9580\u6236 \u540c\u6b65 OpenAPI \u898f\u7bc4"},{"location":"openapi/06-api-documentation/#_22","title":"\u7e3d\u7d50\u8207\u6700\u4f73\u5be6\u8e10","text":""},{"location":"openapi/06-api-documentation/#_23","title":"\u6587\u6a94\u512a\u5316\u6280\u5de7","text":"\u6280\u5de7 \u8aaa\u660e \u4fdd\u6301\u4e00\u81f4\u6027 \u4f7f\u7528\u4e00\u81f4\u7684\u8853\u8a9e\u3001\u683c\u5f0f\u548c\u7d50\u69cb \u9762\u5411\u4f7f\u7528\u8005 \u5f9e API \u6d88\u8cbb\u8005\u7684\u89d2\u5ea6\u64b0\u5beb\u6587\u6a94 \u63d0\u4f9b\u793a\u4f8b \u70ba\u6bcf\u500b\u7aef\u9ede\u63d0\u4f9b\u5be6\u7528\u7684\u8acb\u6c42\u548c\u97ff\u61c9\u793a\u4f8b \u8aaa\u660e\u696d\u52d9\u908f\u8f2f \u89e3\u91cb API \u884c\u70ba\u80cc\u5f8c\u7684\u696d\u52d9\u908f\u8f2f \u6587\u6a94\u5373\u4ee3\u78bc \u5c07\u6587\u6a94\u8996\u70ba\u4ee3\u78bc\u7684\u4e00\u90e8\u5206\uff0c\u96a8\u4ee3\u78bc\u4e00\u8d77\u7dad\u8b77"},{"location":"openapi/06-api-documentation/#_24","title":"\u5e38\u898b\u554f\u984c\u8207\u89e3\u6c7a\u65b9\u6848","text":"\u554f\u984c \u89e3\u6c7a\u65b9\u6848 \u6587\u6a94\u8207\u4ee3\u78bc\u4e0d\u540c\u6b65 \u5c07\u6587\u6a94\u5d4c\u5165\u4ee3\u78bc\u4e2d\uff0c\u4f7f\u7528\u81ea\u52d5\u751f\u6210\u5de5\u5177 \u6587\u6a94\u904e\u65bc\u6280\u8853\u5316 \u589e\u52a0\u696d\u52d9\u8aaa\u660e\uff0c\u4f7f\u7528\u975e\u6280\u8853\u8a9e\u8a00 \u7f3a\u4e4f\u4f7f\u7528\u793a\u4f8b \u70ba\u6bcf\u500b\u7aef\u9ede\u6dfb\u52a0\u5be6\u7528\u7684\u793a\u4f8b \u5b89\u5168\u4fe1\u606f\u66b4\u9732 \u4f7f\u7528\u74b0\u5883\u8b8a\u91cf\uff0c\u907f\u514d\u5728\u6587\u6a94\u4e2d\u5305\u542b\u654f\u611f\u4fe1\u606f \u6587\u6a94\u96e3\u4ee5\u5c0e\u822a \u4f7f\u7528\u6a19\u7c64\u548c\u5206\u7d44\u7d44\u7e54\u7aef\u9ede"},{"location":"openapi/06-api-documentation/#_25","title":"\u6587\u6a94\u9a45\u52d5\u958b\u767c","text":"<ol> <li>\u5148\u8a2d\u8a08 API \u6587\u6a94</li> <li>\u6839\u64da\u6587\u6a94\u5be6\u73fe API</li> <li>\u4f7f\u7528\u6587\u6a94\u9a57\u8b49\u5be6\u73fe</li> <li>\u8fed\u4ee3\u6539\u9032\u6587\u6a94\u548c\u5be6\u73fe</li> </ol> <pre><code># \u6587\u6a94\u9a45\u52d5\u958b\u767c\u793a\u4f8b\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n# 1. \u5148\u5b9a\u7fa9\u6578\u64da\u6a21\u578b\u548c\u7aef\u9ede\u898f\u7bc4\nclass Item(BaseModel):\n    name: str\n    price: float\n\n    model_config = {\n        \"json_schema_extra\": {\n            \"examples\": [\n                {\"name\": \"Foo\", \"price\": 35.4}\n            ]\n        }\n    }\n\n# 2. \u6839\u64da\u898f\u7bc4\u5be6\u73fe API\napp = FastAPI(\n    title=\"\u9805\u76ee API\",\n    description=\"\u57fa\u65bc\u6587\u6a94\u9a45\u52d5\u958b\u767c\u7684\u9805\u76ee API\"\n)\n\n@app.post(\n    \"/items/\",\n    summary=\"\u5275\u5efa\u65b0\u9805\u76ee\",\n    description=\"\u5275\u5efa\u4e00\u500b\u65b0\u7684\u9805\u76ee\u8a18\u9304\",\n    response_description=\"\u8fd4\u56de\u5275\u5efa\u7684\u9805\u76ee\"\n)\nasync def create_item(item: Item):\n    \"\"\"\n    \u5275\u5efa\u65b0\u9805\u76ee:\n\n    - \u9805\u76ee\u540d\u7a31\u4e0d\u80fd\u70ba\u7a7a\n    - \u50f9\u683c\u5fc5\u9808\u5927\u65bc\u96f6\n    \"\"\"\n    return item\n</code></pre> <p>\u900f\u904e\u9019\u4e9b\u6700\u4f73\u5be6\u8e10\uff0c\u60a8\u53ef\u4ee5\u5275\u5efa\u6e05\u6670\u3001\u5b8c\u6574\u4e14\u6613\u65bc\u4f7f\u7528\u7684 API \u6587\u6a94\uff0c\u63d0\u9ad8\u958b\u767c\u6548\u7387\u4e26\u6539\u5584 API \u4f7f\u7528\u9ad4\u9a57\u3002</p>"},{"location":"openapi/07-best-practice/","title":"OpenAPI \u8207 FastAPI \u6700\u4f73\u5be6\u8e10","text":""},{"location":"openapi/07-best-practice/#_1","title":"\u67b6\u69cb\u8a2d\u8a08\u539f\u5247","text":""},{"location":"openapi/07-best-practice/#api","title":"API \u8a2d\u8a08\u6a21\u5f0f","text":"\u6a21\u5f0f \u8aaa\u660e \u9069\u7528\u5834\u666f \u8cc7\u6e90\u5c0e\u5411 \u4ee5\u8cc7\u6e90\u70ba\u4e2d\u5fc3\u8a2d\u8a08\u7aef\u9ede CRUD \u64cd\u4f5c\u3001RESTful API \u52d5\u4f5c\u5c0e\u5411 \u4ee5\u64cd\u4f5c\u70ba\u4e2d\u5fc3\u8a2d\u8a08\u7aef\u9ede \u8907\u96dc\u696d\u52d9\u6d41\u7a0b\u3001RPC \u98a8\u683c API \u6df7\u5408\u6a21\u5f0f \u7d50\u5408\u8cc7\u6e90\u548c\u52d5\u4f5c \u5927\u578b\u7cfb\u7d71\u3001\u591a\u6a23\u5316\u9700\u6c42 <pre><code># \u8cc7\u6e90\u5c0e\u5411\u793a\u4f8b\n@app.get(\"/users/{user_id}\")\nasync def read_user(user_id: int):\n    return {\"id\": user_id, \"name\": \"Alice\"}\n\n# \u52d5\u4f5c\u5c0e\u5411\u793a\u4f8b\n@app.post(\"/process-payment/\")\nasync def process_payment(payment: PaymentModel):\n    return {\"status\": \"processed\", \"transaction_id\": \"123\"}\n</code></pre>"},{"location":"openapi/07-best-practice/#_2","title":"\u6a21\u7d44\u5316\u8a2d\u8a08","text":"<p>\u4f7f\u7528 APIRouter \u7d44\u7e54\u5927\u578b API\uff1a</p> <pre><code>from fastapi import APIRouter, FastAPI\n\napp = FastAPI()\n\n# \u7528\u6236\u76f8\u95dc\u8def\u7531\nuser_router = APIRouter(prefix=\"/users\", tags=[\"users\"])\n\n@user_router.get(\"/{user_id}\")\nasync def read_user(user_id: int):\n    return {\"id\": user_id, \"name\": \"Alice\"}\n\n# \u8a3b\u518a\u8def\u7531\napp.include_router(user_router)\n</code></pre>"},{"location":"openapi/07-best-practice/#_3","title":"\u7248\u672c\u63a7\u5236\u7b56\u7565","text":"\u7b56\u7565 \u5be6\u73fe\u65b9\u5f0f \u512a\u9ede \u7f3a\u9ede URL \u8def\u5f91 <code>/v1/users/</code> \u7c21\u55ae\u76f4\u89c0 URL \u8b8a\u9577 \u67e5\u8a62\u53c3\u6578 <code>/users/?version=1</code> \u4e0d\u6539\u8b8a\u8cc7\u6e90\u8def\u5f91 \u53ef\u9078\u6027\u5c0e\u81f4\u8907\u96dc\u6027 \u6a19\u982d <code>X-API-Version: 1</code> \u4fdd\u6301 URL \u6e05\u6f54 \u4e0d\u6613\u65bc\u700f\u89bd\u5668\u76f4\u63a5\u8a2a\u554f \u5167\u5bb9\u5354\u5546 <code>Accept: application/vnd.api+json;version=1</code> \u7b26\u5408 HTTP \u6a19\u6e96 \u8f03\u8907\u96dc <pre><code># URL \u8def\u5f91\u7248\u672c\u63a7\u5236\n@app.get(\"/v1/users/\")\nasync def read_users_v1():\n    return [{\"id\": 1, \"name\": \"Alice\"}]\n\n# v2 API \u6dfb\u52a0\u4e86\u66f4\u591a\u5b57\u6bb5\n@app.get(\"/v2/users/\")\nasync def read_users_v2():\n    return [{\"id\": 1, \"name\": \"Alice\", \"email\": \"alice@example.com\"}]\n</code></pre>"},{"location":"openapi/07-best-practice/#_4","title":"\u6578\u64da\u6a21\u578b\u6700\u4f73\u5be6\u8e10","text":""},{"location":"openapi/07-best-practice/#_5","title":"\u6a21\u578b\u8a2d\u8a08\u539f\u5247","text":"\u539f\u5247 \u8aaa\u660e \u793a\u4f8b \u55ae\u4e00\u8077\u8cac \u6bcf\u500b\u6a21\u578b\u5c08\u6ce8\u65bc\u4e00\u500b\u9818\u57df \u5206\u96e2 <code>UserProfile</code> \u548c <code>UserCredentials</code> \u7e7c\u627f\u8207\u7d44\u5408 \u5229\u7528\u7e7c\u627f\u6e1b\u5c11\u91cd\u8907\u4ee3\u78bc <code>BaseItem</code> \u2192 <code>BookItem</code>, <code>ElectronicItem</code> \u9a57\u8b49\u908f\u8f2f\u5167\u7f6e \u5728\u6a21\u578b\u4e2d\u5167\u7f6e\u9a57\u8b49\u908f\u8f2f \u4f7f\u7528 Pydantic \u9a57\u8b49\u5668 \u6587\u6a94\u53cb\u597d \u6dfb\u52a0\u6e05\u6670\u7684\u5b57\u6bb5\u63cf\u8ff0\u548c\u793a\u4f8b \u4f7f\u7528 <code>Field</code> \u7684 <code>description</code> \u548c <code>example</code> <pre><code>from pydantic import BaseModel, EmailStr, Field, field_validator\n\nclass UserBase(BaseModel):\n    username: str = Field(..., min_length=3, example=\"johndoe\")\n    email: EmailStr = Field(..., example=\"john@example.com\")\n\nclass UserCreate(UserBase):\n    password: str = Field(..., min_length=8)\n\n    @field_validator(\"password\")\n    def password_strength(cls, v):\n        if not any(char.isdigit() for char in v):\n            raise ValueError(\"\u5bc6\u78bc\u5fc5\u9808\u5305\u542b\u81f3\u5c11\u4e00\u500b\u6578\u5b57\")\n        return v\n\nclass User(UserBase):\n    id: int = Field(..., example=1)\n    is_active: bool = True\n</code></pre>"},{"location":"openapi/07-best-practice/#_6","title":"\u8acb\u6c42\u8207\u97ff\u61c9\u6a21\u578b\u5206\u96e2","text":"<p>\u70ba\u4e0d\u540c\u64cd\u4f5c\u8a2d\u8a08\u5c08\u7528\u6a21\u578b\uff1a</p> <pre><code># \u8acb\u6c42\u6a21\u578b\nclass UserCreate(BaseModel):\n    username: str\n    email: EmailStr\n    password: str\n\nclass UserUpdate(BaseModel):\n    email: EmailStr = None\n    full_name: str = None\n\n# \u97ff\u61c9\u6a21\u578b\nclass UserResponse(BaseModel):\n    id: int\n    username: str\n    email: EmailStr\n    is_active: bool\n\n@app.post(\"/users/\", response_model=UserResponse)\nasync def create_user(user: UserCreate):\n    # \u5275\u5efa\u7528\u6236\u908f\u8f2f\n    return {\n        \"id\": 1,\n        \"username\": user.username,\n        \"email\": user.email,\n        \"is_active\": True\n    }\n</code></pre>"},{"location":"openapi/07-best-practice/#_7","title":"\u901a\u7528\u6a21\u5f0f\u8207\u6a21\u578b","text":"<p>\u5e38\u7528\u6a21\u578b\u6a21\u5f0f\uff1a</p> <pre><code>from typing import Generic, List, TypeVar\nfrom pydantic.generics import GenericModel\n\n# \u5206\u9801\u97ff\u61c9\nT = TypeVar('T')\n\nclass Page(GenericModel, Generic[T]):\n    items: List[T]\n    total: int\n    page: int\n    size: int\n\n# \u4f7f\u7528\u793a\u4f8b\n@app.get(\"/users/\", response_model=Page[User])\nasync def read_users(page: int = 1, size: int = 10):\n    users = [{\"id\": i, \"username\": f\"user{i}\", \"email\": f\"user{i}@example.com\", \"is_active\": True} \n             for i in range(1, 11)]\n    return {\n        \"items\": users,\n        \"total\": 100,\n        \"page\": page,\n        \"size\": size\n    }\n</code></pre>"},{"location":"openapi/07-best-practice/#_8","title":"\u8def\u5f91\u64cd\u4f5c\u6700\u4f73\u5be6\u8e10","text":""},{"location":"openapi/07-best-practice/#http","title":"HTTP \u65b9\u6cd5\u4f7f\u7528\u6307\u5357","text":"HTTP \u65b9\u6cd5 \u7528\u9014 \u793a\u4f8b GET \u7372\u53d6\u8cc7\u6e90 <code>GET /users/</code> \u7372\u53d6\u7528\u6236\u5217\u8868 POST \u5275\u5efa\u8cc7\u6e90 <code>POST /users/</code> \u5275\u5efa\u65b0\u7528\u6236 PUT \u5168\u91cf\u66f4\u65b0\u8cc7\u6e90 <code>PUT /users/123</code> \u66f4\u65b0\u6574\u500b\u7528\u6236 PATCH \u90e8\u5206\u66f4\u65b0\u8cc7\u6e90 <code>PATCH /users/123</code> \u66f4\u65b0\u90e8\u5206\u7528\u6236\u5b57\u6bb5 DELETE \u522a\u9664\u8cc7\u6e90 <code>DELETE /users/123</code> \u522a\u9664\u7528\u6236 <pre><code>@app.post(\"/items/\", status_code=status.HTTP_201_CREATED)\nasync def create_item(item: Item):\n    \"\"\"\u5275\u5efa\u65b0\u9805\u76ee (201 Created)\"\"\"\n    return {\"id\": 1, **item.model_dump()}\n\n@app.delete(\"/items/{item_id}\", status_code=status.HTTP_204_NO_CONTENT)\nasync def delete_item(item_id: int):\n    \"\"\"\u522a\u9664\u9805\u76ee (204 No Content)\"\"\"\n    if item_id != 1:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return Response(status_code=status.HTTP_204_NO_CONTENT)\n</code></pre>"},{"location":"openapi/07-best-practice/#_9","title":"\u8def\u5f91\u53c3\u6578\u8207\u67e5\u8a62\u53c3\u6578","text":"<p>\u4f7f\u7528\u6307\u5357\uff1a</p> \u53c3\u6578\u985e\u578b \u9069\u7528\u5834\u666f \u793a\u4f8b \u8def\u5f91\u53c3\u6578 \u8cc7\u6e90\u6a19\u8b58\u7b26 <code>/users/{user_id}</code> \u67e5\u8a62\u53c3\u6578 \u904e\u6ffe\u3001\u6392\u5e8f\u3001\u5206\u9801 <code>/users/?role=admin&amp;sort=name</code> <pre><code>@app.get(\"/users/{user_id}\")\nasync def read_user(\n    user_id: int = Path(..., title=\"\u7528\u6236 ID\", ge=1),\n    include_inactive: bool = False\n):\n    \"\"\"\u7372\u53d6\u7279\u5b9a\u7528\u6236\u4fe1\u606f\"\"\"\n    return {\"user_id\": user_id, \"include_inactive\": include_inactive}\n\n@app.get(\"/users/\")\nasync def read_users(\n    skip: int = Query(0, ge=0),\n    limit: int = Query(100, ge=1, le=1000),\n    role: str = None,\n    sort: List[str] = Query([])\n):\n    \"\"\"\u7372\u53d6\u7528\u6236\u5217\u8868\"\"\"\n    return {\n        \"skip\": skip,\n        \"limit\": limit,\n        \"role\": role,\n        \"sort\": sort\n    }\n</code></pre>"},{"location":"openapi/07-best-practice/#_10","title":"\u72c0\u614b\u78bc\u4f7f\u7528\u6307\u5357","text":"\u72c0\u614b\u78bc \u7528\u9014 FastAPI \u5be6\u73fe 200 OK \u6210\u529f\u7372\u53d6\u8cc7\u6e90 \u9ed8\u8a8d GET \u97ff\u61c9 201 Created \u6210\u529f\u5275\u5efa\u8cc7\u6e90 <code>status_code=201</code> 204 No Content \u6210\u529f\u4f46\u7121\u8fd4\u56de\u5167\u5bb9 <code>status_code=204</code> + <code>Response()</code> 400 Bad Request \u8acb\u6c42\u683c\u5f0f\u932f\u8aa4 \u9a57\u8b49\u932f\u8aa4\u6216 <code>HTTPException(400)</code> 401 Unauthorized \u672a\u8a8d\u8b49 <code>HTTPException(401)</code> 403 Forbidden \u6b0a\u9650\u4e0d\u8db3 <code>HTTPException(403)</code> 404 Not Found \u8cc7\u6e90\u4e0d\u5b58\u5728 <code>HTTPException(404)</code> <pre><code>@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int):\n    if item_id == 0:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"Invalid item ID\"\n        )\n    elif item_id == 999:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Item not found\"\n        )\n    return {\"item_id\": item_id, \"name\": \"Example Item\"}\n</code></pre>"},{"location":"openapi/07-best-practice/#_11","title":"\u5b89\u5168\u8207\u8a8d\u8b49\u6700\u4f73\u5be6\u8e10","text":""},{"location":"openapi/07-best-practice/#_12","title":"\u8a8d\u8b49\u65b9\u6848\u5c0d\u6bd4","text":"\u8a8d\u8b49\u65b9\u6848 \u9069\u7528\u5834\u666f \u5be6\u73fe\u65b9\u5f0f API \u5bc6\u9470 \u7c21\u55ae\u7684 API \u8a2a\u554f\u63a7\u5236 \u8acb\u6c42\u6a19\u982d\u3001\u67e5\u8a62\u53c3\u6578\u6216 Cookie OAuth2 \u5bc6\u78bc\u6d41 \u7528\u6236\u540d/\u5bc6\u78bc\u767b\u9304 <code>OAuth2PasswordBearer</code> JWT \u4ee4\u724c \u7121\u72c0\u614b\u8eab\u4efd\u9a57\u8b49 <code>OAuth2PasswordBearer</code> + JWT \u7de8\u78bc/\u89e3\u78bc <pre><code>from fastapi.security import OAuth2PasswordBearer, APIKeyHeader\n\n# OAuth2 \u5bc6\u78bc\u6d41\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    if form_data.username != \"johndoe\" or form_data.password != \"secret\":\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    return {\"access_token\": \"fake_token\", \"token_type\": \"bearer\"}\n\n@app.get(\"/users/me\")\nasync def read_users_me(token: str = Depends(oauth2_scheme)):\n    return {\"username\": \"johndoe\", \"token\": token}\n\n# API \u5bc6\u9470\napi_key_header = APIKeyHeader(name=\"X-API-Key\")\n\n@app.get(\"/items/\")\nasync def read_items(api_key: str = Depends(api_key_header)):\n    if api_key != \"valid_api_key\":\n        raise HTTPException(status_code=401, detail=\"Invalid API Key\")\n    return [{\"id\": 1, \"name\": \"Item 1\"}]\n</code></pre>"},{"location":"openapi/07-best-practice/#jwt","title":"JWT \u8a8d\u8b49\u5be6\u73fe","text":"<pre><code>from datetime import datetime, timedelta\nfrom jose import JWTError, jwt\n\n# JWT \u914d\u7f6e\nSECRET_KEY = \"your-secret-key\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\ndef create_access_token(data: dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expire})\n    return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise HTTPException(status_code=401, detail=\"Invalid token\")\n    except JWTError:\n        raise HTTPException(status_code=401, detail=\"Invalid token\")\n    return {\"username\": username}\n\n@app.post(\"/token\")\nasync def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends()):\n    # \u9a57\u8b49\u7528\u6236\n    if form_data.username != \"johndoe\" or form_data.password != \"secret\":\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    # \u5275\u5efa\u8a2a\u554f\u4ee4\u724c\n    access_token = create_access_token(data={\"sub\": form_data.username})\n    return {\"access_token\": access_token, \"token_type\": \"bearer\"}\n</code></pre>"},{"location":"openapi/07-best-practice/#_13","title":"\u6b0a\u9650\u63a7\u5236","text":"<pre><code>from fastapi import Security\nfrom fastapi.security import SecurityScopes\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\n        \"users:read\": \"\u8b80\u53d6\u7528\u6236\u4fe1\u606f\",\n        \"users:write\": \"\u4fee\u6539\u7528\u6236\u4fe1\u606f\",\n        \"items:read\": \"\u8b80\u53d6\u9805\u76ee\",\n        \"items:write\": \"\u5275\u5efa\u6216\u4fee\u6539\u9805\u76ee\",\n    },\n)\n\nasync def get_current_user_with_scopes(\n    security_scopes: SecurityScopes, \n    token: str = Depends(oauth2_scheme)\n):\n    # \u7c21\u5316\u793a\u4f8b\uff0c\u5be6\u969b\u61c9\u89e3\u6790 JWT \u4ee4\u724c\n    if token != \"valid_token\":\n        raise HTTPException(status_code=401, detail=\"Invalid token\")\n\n    # \u5047\u8a2d\u4ee4\u724c\u5305\u542b\u9019\u4e9b\u7bc4\u570d\n    token_scopes = [\"users:read\", \"items:read\"]\n\n    # \u6aa2\u67e5\u6240\u9700\u7bc4\u570d\n    for scope in security_scopes.scopes:\n        if scope not in token_scopes:\n            raise HTTPException(\n                status_code=403,\n                detail=f\"Not enough permissions. Required: {scope}\",\n            )\n\n    return {\"username\": \"johndoe\", \"scopes\": token_scopes}\n\n@app.get(\n    \"/users/\", \n    dependencies=[Security(get_current_user_with_scopes, scopes=[\"users:read\"])]\n)\nasync def read_users():\n    return [{\"username\": \"johndoe\"}]\n\n@app.post(\n    \"/users/\", \n    dependencies=[Security(get_current_user_with_scopes, scopes=[\"users:write\"])]\n)\nasync def create_user(username: str):\n    return {\"username\": username}\n</code></pre>"},{"location":"openapi/07-best-practice/#_14","title":"\u932f\u8aa4\u8655\u7406\u6700\u4f73\u5be6\u8e10","text":""},{"location":"openapi/07-best-practice/#_15","title":"\u6a19\u6e96\u5316\u932f\u8aa4\u97ff\u61c9","text":"<pre><code>from fastapi import FastAPI, HTTPException\nfrom fastapi.exceptions import RequestValidationError\nfrom fastapi.responses import JSONResponse\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\nclass ErrorResponse(BaseModel):\n    code: str\n    message: str\n    details: dict = None\n\n@app.exception_handler(RequestValidationError)\nasync def validation_exception_handler(request, exc):\n    return JSONResponse(\n        status_code=422,\n        content=ErrorResponse(\n            code=\"VALIDATION_ERROR\",\n            message=\"\u8cc7\u6599\u9a57\u8b49\u932f\u8aa4\",\n            details={\"errors\": exc.errors()}\n        ).model_dump(),\n    )\n\n@app.exception_handler(HTTPException)\nasync def http_exception_handler(request, exc):\n    return JSONResponse(\n        status_code=exc.status_code,\n        content=ErrorResponse(\n            code=f\"HTTP_{exc.status_code}\",\n            message=exc.detail,\n            details=exc.headers if hasattr(exc, \"headers\") else None\n        ).model_dump(),\n    )\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int):\n    if item_id == 0:\n        raise HTTPException(status_code=400, detail=\"Invalid item ID\")\n    if item_id == 999:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return {\"item_id\": item_id, \"name\": \"Sample Item\"}\n</code></pre>"},{"location":"openapi/07-best-practice/#_16","title":"\u81ea\u5b9a\u7fa9\u7570\u5e38","text":"<pre><code>class NotFoundError(Exception):\n    def __init__(self, resource_type: str, resource_id: str):\n        self.resource_type = resource_type\n        self.resource_id = resource_id\n        self.message = f\"{resource_type} with ID {resource_id} not found\"\n        super().__init__(self.message)\n\n@app.exception_handler(NotFoundError)\nasync def not_found_exception_handler(request, exc):\n    return JSONResponse(\n        status_code=404,\n        content=ErrorResponse(\n            code=\"RESOURCE_NOT_FOUND\",\n            message=exc.message,\n            details={\n                \"resource_type\": exc.resource_type,\n                \"resource_id\": exc.resource_id\n            }\n        ).model_dump(),\n    )\n\n@app.get(\"/users/{user_id}\")\nasync def read_user(user_id: int):\n    if user_id == 999:\n        raise NotFoundError(\"User\", str(user_id))\n    return {\"id\": user_id, \"name\": \"Sample User\"}\n</code></pre>"},{"location":"openapi/07-best-practice/#_17","title":"\u7e3d\u7d50","text":"\u985e\u5225 \u6700\u4f73\u5be6\u8e10 API \u8a2d\u8a08 \u4f7f\u7528\u8cc7\u6e90\u5c0e\u5411\u8a2d\u8a08\u3001\u6a21\u7d44\u5316\u8def\u7531\u3001\u4e00\u81f4\u7684\u7248\u672c\u63a7\u5236 \u6578\u64da\u6a21\u578b \u5206\u96e2\u8acb\u6c42/\u97ff\u61c9\u6a21\u578b\u3001\u4f7f\u7528\u7e7c\u627f\u6e1b\u5c11\u91cd\u8907\u3001\u6dfb\u52a0\u5b8c\u6574\u9a57\u8b49 \u8def\u5f91\u64cd\u4f5c \u6b63\u78ba\u4f7f\u7528 HTTP \u65b9\u6cd5\u3001\u9069\u7576\u4f7f\u7528\u72c0\u614b\u78bc\u3001\u6e05\u6670\u7684\u53c3\u6578\u8a2d\u8a08 \u5b89\u5168\u6027 \u5be6\u73fe OAuth2/JWT \u8a8d\u8b49\u3001\u7cbe\u7d30\u7684\u6b0a\u9650\u63a7\u5236\u3001\u5b89\u5168\u7684\u5bc6\u78bc\u8655\u7406 \u932f\u8aa4\u8655\u7406 \u6a19\u6e96\u5316\u932f\u8aa4\u97ff\u61c9\u3001\u81ea\u5b9a\u7fa9\u7570\u5e38\u8655\u7406\u3001\u5b8c\u6574\u7684\u932f\u8aa4\u4fe1\u606f"},{"location":"openapi/08-troubleshooting/","title":"OpenAPI \u8207 FastAPI \u6545\u969c\u6392\u9664\u6307\u5357","text":""},{"location":"openapi/08-troubleshooting/#openapi","title":"OpenAPI \u6587\u6a94\u751f\u6210\u554f\u984c","text":""},{"location":"openapi/08-troubleshooting/#swagger-ui","title":"Swagger UI \u986f\u793a\u554f\u984c","text":"\u554f\u984c \u53ef\u80fd\u539f\u56e0 \u89e3\u6c7a\u65b9\u6848 Swagger UI \u5b8c\u5168\u7121\u6cd5\u8f09\u5165 \u8def\u7531\u5b9a\u7fa9\u932f\u8aa4\u6216\u6a21\u578b\u5b9a\u7fa9\u554f\u984c \u6aa2\u67e5\u63a7\u5236\u53f0\u932f\u8aa4\u4fe1\u606f\uff1b\u555f\u7528\u8a73\u7d30\u65e5\u8a8c [2] API \u6587\u6a94\u5167\u5bb9\u4e0d\u5b8c\u6574 OpenAPI \u751f\u6210\u932f\u8aa4 \u66ab\u6642\u7981\u7528 OpenAPI \u4e26\u9010\u6b65\u555f\u7528\u529f\u80fd\u4f86\u5b9a\u4f4d\u554f\u984c [1] \u793a\u4f8b\u503c\u986f\u793a\u4e0d\u6b63\u78ba \u6a21\u578b\u914d\u7f6e\u554f\u984c \u4f7f\u7528 <code>Field</code> \u53c3\u6578\u6b63\u78ba\u8a2d\u7f6e\u793a\u4f8b\u503c [3] <pre><code># \u555f\u7528\u8a73\u7d30\u65e5\u8a8c\u9032\u884c\u8abf\u8a66\nimport logging\nlogging.basicConfig(level=logging.DEBUG)\n\n# \u6216\u4f7f\u7528 uvicorn \u7684\u8a73\u7d30\u65e5\u8a8c\n# uvicorn main:app --log-level debug\n\n# \u66ab\u6642\u7981\u7528 OpenAPI \u4ee5\u5b9a\u4f4d\u554f\u984c\napp = FastAPI(openapi_url=None)\n</code></pre>"},{"location":"openapi/08-troubleshooting/#openapi_1","title":"\u81ea\u5b9a\u7fa9 OpenAPI \u6587\u6a94","text":"\u554f\u984c \u89e3\u6c7a\u65b9\u6848 \u793a\u4f8b \u6a19\u7c64\u9806\u5e8f\u6df7\u4e82 \u81ea\u5b9a\u7fa9 OpenAPI \u6a21\u5f0f \u4f7f\u7528 <code>get_openapi()</code> \u4e26\u4fee\u6539\u6a19\u7c64\u9806\u5e8f \u63cf\u8ff0\u4fe1\u606f\u7f3a\u5931 \u6b63\u78ba\u8a2d\u7f6e\u8def\u7531\u548c\u6a21\u578b\u63cf\u8ff0 \u5728\u8def\u7531\u548c\u6a21\u578b\u5b9a\u7fa9\u4e2d\u6dfb\u52a0 docstring \u8907\u96dc\u6a21\u578b\u5e8f\u5217\u5316\u5931\u6557 \u7c21\u5316\u6a21\u578b\u7d50\u69cb \u62c6\u5206\u8907\u96dc\u6a21\u578b\u70ba\u66f4\u5c0f\u7684\u7d44\u4ef6 <pre><code>def custom_openapi():\n    if app.openapi_schema:\n        return app.openapi_schema\n\n    openapi_schema = get_openapi(\n        title=\"\u81ea\u5b9a\u7fa9 API \u6587\u6a94\",\n        version=\"1.0.0\",\n        description=\"\u9019\u662f\u4e00\u500b\u81ea\u5b9a\u7fa9\u7684 API \u6587\u6a94\",\n        routes=app.routes,\n    )\n\n    # \u81ea\u5b9a\u7fa9\u6a19\u7c64\u9806\u5e8f\n    openapi_schema[\"tags\"] = [\n        {\"name\": \"users\", \"description\": \"\u7528\u6236\u64cd\u4f5c\"},\n        {\"name\": \"items\", \"description\": \"\u9805\u76ee\u64cd\u4f5c\"},\n        # \u5176\u4ed6\u6a19\u7c64...\n    ]\n\n    app.openapi_schema = openapi_schema\n    return app.openapi_schema\n\napp.openapi = custom_openapi\n</code></pre>"},{"location":"openapi/08-troubleshooting/#_1","title":"\u8def\u7531\u548c\u8acb\u6c42\u8655\u7406\u554f\u984c","text":""},{"location":"openapi/08-troubleshooting/#_2","title":"\u8def\u5f91\u53c3\u6578\u554f\u984c","text":"\u554f\u984c \u75c7\u72c0 \u89e3\u6c7a\u65b9\u6848 \u8def\u5f91\u9806\u5e8f\u885d\u7a81 \u7279\u5b9a\u8def\u7531\u7121\u6cd5\u8a2a\u554f \u8abf\u6574\u8def\u7531\u9806\u5e8f\uff0c\u56fa\u5b9a\u8def\u5f91\u5148\u65bc\u53c3\u6578\u8def\u5f91 \u53c3\u6578\u985e\u578b\u8f49\u63db\u5931\u6557 404 \u932f\u8aa4 \u6aa2\u67e5\u53c3\u6578\u985e\u578b\u5b9a\u7fa9\uff1b\u6dfb\u52a0\u8def\u5f91\u53c3\u6578\u9a57\u8b49 \u8def\u5f91\u53c3\u6578\u89e3\u6790\u932f\u8aa4 500 \u5167\u90e8\u670d\u52d9\u5668\u932f\u8aa4 \u4f7f\u7528 <code>Path()</code> \u6dfb\u52a0\u984d\u5916\u9a57\u8b49 <pre><code># \u6b63\u78ba\u7684\u8def\u7531\u9806\u5e8f\n@app.get(\"/users/me\")  # \u56fa\u5b9a\u8def\u5f91\u5148\u5b9a\u7fa9\nasync def read_current_user():\n    return {\"user_id\": \"current\"}\n\n@app.get(\"/users/{user_id}\")  # \u53c3\u6578\u8def\u5f91\u5f8c\u5b9a\u7fa9\nasync def read_user(user_id: int = Path(..., ge=1)):\n    return {\"user_id\": user_id}\n</code></pre>"},{"location":"openapi/08-troubleshooting/#_3","title":"\u8acb\u6c42\u9ad4\u89e3\u6790\u554f\u984c","text":"\u554f\u984c \u932f\u8aa4\u4fe1\u606f \u8abf\u8a66\u65b9\u6cd5 JSON \u89e3\u6790\u5931\u6557 <code>json.decoder.JSONDecodeError</code> \u81ea\u5b9a\u7fa9\u7570\u5e38\u8655\u7406\u5668\u6355\u7372\u4e26\u8a18\u9304\u539f\u59cb\u8acb\u6c42\u9ad4 \u8868\u55ae\u6578\u64da\u8655\u7406\u932f\u8aa4 <code>FormException</code> \u6aa2\u67e5\u8868\u55ae\u5b57\u6bb5\u540d\u7a31\u548c\u985e\u578b\uff1b\u9a57\u8b49 <code>enctype</code> \u8a2d\u7f6e \u6587\u4ef6\u4e0a\u50b3\u554f\u984c <code>UploadFileException</code> \u6aa2\u67e5\u6587\u4ef6\u5927\u5c0f\u9650\u5236\uff1b\u9a57\u8b49 <code>multipart/form-data</code> \u8a2d\u7f6e <pre><code>@app.exception_handler(RequestValidationError)\nasync def validation_exception_handler(request: Request, exc: RequestValidationError):\n    # \u7372\u53d6\u4e26\u8a18\u9304\u539f\u59cb\u8acb\u6c42\u9ad4\n    body = await request.body()\n    logger.error(f\"\u8acb\u6c42\u9a57\u8b49\u932f\u8aa4: {exc.errors()}\")\n    logger.debug(f\"\u539f\u59cb\u8acb\u6c42\u9ad4: {body.decode()}\")\n\n    return JSONResponse(\n        status_code=422,\n        content={\"detail\": exc.errors()},\n    )\n</code></pre>"},{"location":"openapi/08-troubleshooting/#_4","title":"\u6578\u64da\u9a57\u8b49\u548c\u6a21\u578b\u554f\u984c","text":""},{"location":"openapi/08-troubleshooting/#pydantic","title":"Pydantic \u6a21\u578b\u9a57\u8b49\u932f\u8aa4","text":"\u932f\u8aa4\u985e\u578b \u5e38\u898b\u539f\u56e0 \u89e3\u6c7a\u65b9\u6848 \u5b57\u6bb5\u985e\u578b\u4e0d\u5339\u914d \u524d\u7aef\u767c\u9001\u7684\u6578\u64da\u985e\u578b\u932f\u8aa4 \u6dfb\u52a0\u8a73\u7d30\u7684\u932f\u8aa4\u4fe1\u606f\uff1b\u4f7f\u7528 <code>field_validator</code> \u7f3a\u5c11\u5fc5\u586b\u5b57\u6bb5 \u8acb\u6c42\u4e2d\u7f3a\u5c11\u5fc5\u8981\u5b57\u6bb5 \u6aa2\u67e5\u8acb\u6c42\u6578\u64da\uff1b\u4f7f\u7528 <code>Field(...)</code> \u6a19\u8a18\u5fc5\u586b\u5b57\u6bb5 \u81ea\u5b9a\u7fa9\u9a57\u8b49\u5931\u6557 \u9a57\u8b49\u908f\u8f2f\u932f\u8aa4 \u6dfb\u52a0\u8abf\u8a66\u65e5\u8a8c\uff1b\u4f7f\u7528 <code>debug_validation</code> \u65b9\u6cd5 <pre><code>class UserCreate(BaseModel):\n    username: str = Field(..., min_length=3, max_length=50)\n    email: str\n    password: str = Field(..., min_length=8)\n\n    @field_validator(\"email\")\n    def validate_email(cls, v):\n        if \"@\" not in v:\n            raise ValueError(\"\u7121\u6548\u7684\u96fb\u5b50\u90f5\u4ef6\u683c\u5f0f\uff0c\u5fc5\u9808\u5305\u542b @ \u7b26\u865f\")\n        return v\n\n    # \u8abf\u8a66\u6a21\u578b\u9a57\u8b49\n    @classmethod\n    def debug_validation(cls, data: dict):\n        try:\n            return cls(**data)\n        except ValidationError as e:\n            print(f\"\u9a57\u8b49\u932f\u8aa4: {e}\")\n            print(f\"\u932f\u8aa4\u8a73\u60c5: {e.errors()}\")\n            print(f\"\u8f38\u5165\u6578\u64da: {data}\")\n            raise\n</code></pre>"},{"location":"openapi/08-troubleshooting/#_5","title":"\u97ff\u61c9\u6a21\u578b\u554f\u984c","text":"\u554f\u984c \u75c7\u72c0 \u89e3\u6c7a\u65b9\u6848 \u97ff\u61c9\u5e8f\u5217\u5316\u5931\u6557 500 \u5167\u90e8\u670d\u52d9\u5668\u932f\u8aa4 \u6aa2\u67e5\u8fd4\u56de\u6578\u64da\u7d50\u69cb\uff1b\u7c21\u5316\u97ff\u61c9\u6a21\u578b \u5faa\u74b0\u5f15\u7528 OpenAPI \u751f\u6210\u932f\u8aa4 \u4f7f\u7528 <code>Optional</code> \u548c\u5ef6\u9072\u5f15\u7528\uff1b\u62c6\u5206\u6a21\u578b \u6a21\u578b\u5d4c\u5957\u904e\u6df1 \u6027\u80fd\u554f\u984c\u6216\u5e8f\u5217\u5316\u932f\u8aa4 \u6e1b\u5c11\u5d4c\u5957\u5c64\u7d1a\uff1b\u4f7f\u7528\u66f4\u6241\u5e73\u7684\u7d50\u69cb <pre><code># \u8655\u7406\u5faa\u74b0\u5f15\u7528\u554f\u984c\nclass Parent(BaseModel):\n    name: str\n    # \u4f7f\u7528 Optional \u548c\u5ef6\u9072\u5f15\u7528\n    children: Optional[List[\"Child\"]] = None\n\nclass Child(BaseModel):\n    name: str\n    parent_name: str  # \u53ea\u5f15\u7528\u7236\u7d1a\u7684\u540d\u7a31\u800c\u4e0d\u662f\u6574\u500b\u5c0d\u8c61\n\n# \u66f4\u65b0 Pydantic \u6a21\u578b\u914d\u7f6e\nParent.model_rebuild()\n\n# \u97ff\u61c9\u5e8f\u5217\u5316\u932f\u8aa4\u8abf\u8a66\n@app.get(\"/items/{item_id}\", response_model=ItemResponse)\nasync def read_item(item_id: int):\n    try:\n        result = get_item_from_db(item_id)\n        return result\n    except Exception as e:\n        logger.error(f\"\u97ff\u61c9\u5e8f\u5217\u5316\u932f\u8aa4: {e}\")\n        # \u8fd4\u56de\u7c21\u5316\u7684\u97ff\u61c9\u4ee5\u4fbf\u8abf\u8a66\n        return {\"id\": item_id, \"name\": \"\u8abf\u8a66\u9805\u76ee\"}\n</code></pre>"},{"location":"openapi/08-troubleshooting/#_6","title":"\u8a8d\u8b49\u548c\u5b89\u5168\u554f\u984c","text":""},{"location":"openapi/08-troubleshooting/#oauth2-jwt","title":"OAuth2 \u548c JWT \u554f\u984c","text":"\u554f\u984c \u932f\u8aa4\u4fe1\u606f \u8abf\u8a66\u65b9\u6cd5 \u4ee4\u724c\u9a57\u8b49\u5931\u6557 <code>Could not validate credentials</code> \u6aa2\u67e5\u5bc6\u9470\u548c\u7b97\u6cd5\uff1b\u8a18\u9304\u8a73\u7d30\u7684 JWT \u932f\u8aa4 \u4ee4\u724c\u904e\u671f <code>Token expired</code> \u6aa2\u67e5\u4ee4\u724c\u904e\u671f\u6642\u9593\uff1b\u6dfb\u52a0\u4ee4\u724c\u5237\u65b0\u6a5f\u5236 \u7bc4\u570d\u6b0a\u9650\u932f\u8aa4 <code>Not enough permissions</code> \u8a18\u9304\u4ee4\u724c\u7bc4\u570d\u548c\u7aef\u9ede\u6240\u9700\u7bc4\u570d <pre><code>async def get_current_user(token: str = Depends(oauth2_scheme)):\n    try:\n        # \u8a18\u9304\u4ee4\u724c\u4fe1\u606f\uff08\u4e0d\u8a18\u9304\u5b8c\u6574\u4ee4\u724c\uff09\n        logger.debug(f\"\u9a57\u8b49\u4ee4\u724c: {token[:10]}...\")\n\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n\n        if username is None:\n            logger.warning(\"\u4ee4\u724c\u7f3a\u5c11 'sub' \u5b57\u6bb5\")\n            raise credentials_exception\n\n        # \u6aa2\u67e5\u4ee4\u724c\u662f\u5426\u904e\u671f\n        exp = payload.get(\"exp\")\n        if exp and datetime.fromtimestamp(exp) &lt; datetime.utcnow():\n            logger.warning(f\"\u4ee4\u724c\u5df2\u904e\u671f: {datetime.fromtimestamp(exp)}\")\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Token expired\",\n                headers={\"WWW-Authenticate\": \"Bearer\"},\n            )\n\n        return {\"username\": username}\n    except JWTError as e:\n        logger.error(f\"JWT \u932f\u8aa4: {str(e)}\")\n        raise credentials_exception\n</code></pre>"},{"location":"openapi/08-troubleshooting/#cors","title":"CORS \u914d\u7f6e\u554f\u984c","text":"\u554f\u984c \u700f\u89bd\u5668\u932f\u8aa4\u4fe1\u606f \u89e3\u6c7a\u65b9\u6848 \u524d\u7aef\u7121\u6cd5\u8a2a\u554f API <code>Access-Control-Allow-Origin</code> \u932f\u8aa4 \u6b63\u78ba\u914d\u7f6e <code>allow_origins</code>\uff1b\u6dfb\u52a0\u6240\u6709\u5fc5\u8981\u7684\u6e90 \u9810\u6aa2\u8acb\u6c42\u5931\u6557 <code>Method OPTIONS is not allowed</code> \u78ba\u4fdd\u6b63\u78ba\u8655\u7406 OPTIONS \u8acb\u6c42\uff1b\u914d\u7f6e <code>allow_methods</code> \u6191\u8b49\u8acb\u6c42\u88ab\u62d2\u7d55 <code>Credentials is not supported</code> \u8a2d\u7f6e <code>allow_credentials=True</code> <pre><code># CORS \u914d\u7f6e\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\n        \"http://localhost:3000\",\n        \"https://frontend.example.com\",\n    ],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n# CORS \u8abf\u8a66\u4e2d\u9593\u4ef6\n@app.middleware(\"http\")\nasync def log_cors_requests(request, call_next):\n    if request.method == \"OPTIONS\":\n        logger.debug(\"\u6536\u5230 OPTIONS \u9810\u6aa2\u8acb\u6c42\")\n        logger.debug(f\"Origin: {request.headers.get('origin')}\")\n\n    response = await call_next(request)\n\n    if \"origin\" in request.headers:\n        logger.debug(f\"CORS \u97ff\u61c9\u982d:\")\n        logger.debug(f\"Access-Control-Allow-Origin: {response.headers.get('access-control-allow-origin')}\")\n\n    return response\n</code></pre>"},{"location":"openapi/08-troubleshooting/#_7","title":"\u6027\u80fd\u548c\u90e8\u7f72\u554f\u984c","text":""},{"location":"openapi/08-troubleshooting/#api","title":"API \u97ff\u61c9\u6027\u80fd\u554f\u984c","text":"\u554f\u984c \u75c7\u72c0 \u8a3a\u65b7\u65b9\u6cd5 \u6162\u901f\u6578\u64da\u5eab\u67e5\u8a62 API \u97ff\u61c9\u5ef6\u9072 \u6dfb\u52a0\u6027\u80fd\u76e3\u63a7\u4e2d\u9593\u4ef6\uff1b\u8a18\u9304\u67e5\u8a62\u57f7\u884c\u6642\u9593 \u963b\u585e\u64cd\u4f5c \u670d\u52d9\u5668\u541e\u5410\u91cf\u4e0b\u964d \u4f7f\u7528\u7570\u6b65\u64cd\u4f5c\uff1b\u907f\u514d\u5728\u4e8b\u4ef6\u5faa\u74b0\u4e2d\u57f7\u884c\u963b\u585e\u4ee3\u78bc \u8cc7\u6e90\u9650\u5236 \u670d\u52d9\u5668 CPU/\u5167\u5b58\u4f7f\u7528\u7387\u9ad8 \u76e3\u63a7\u7cfb\u7d71\u8cc7\u6e90\uff1b\u512a\u5316\u8cc7\u6e90\u4f7f\u7528 <pre><code>@app.middleware(\"http\")\nasync def add_process_time_header(request: Request, call_next):\n    start_time = time.time()\n    response = await call_next(request)\n    process_time = time.time() - start_time\n\n    # \u8a18\u9304\u8655\u7406\u6642\u9593\n    response.headers[\"X-Process-Time\"] = str(process_time)\n\n    # \u5c0d\u65bc\u6162\u8acb\u6c42\u9032\u884c\u8b66\u544a\n    if process_time &gt; 1.0:  # \u8d85\u904e 1 \u79d2\u7684\u8acb\u6c42\n        logger.warning(\n            f\"\u6162\u8acb\u6c42: {request.method} {request.url.path} \u8017\u6642 {process_time:.4f}s\"\n        )\n        # \u6dfb\u52a0\u66f4\u591a\u8a3a\u65b7\u4fe1\u606f\n        logger.debug(f\"\u8acb\u6c42\u53c3\u6578: {request.query_params}\")\n\n    return response\n</code></pre>"},{"location":"openapi/08-troubleshooting/#_8","title":"\u90e8\u7f72\u548c\u74b0\u5883\u554f\u984c","text":"\u554f\u984c \u53ef\u80fd\u539f\u56e0 \u89e3\u6c7a\u65b9\u6848 \u751f\u7522\u74b0\u5883\u8207\u958b\u767c\u74b0\u5883\u4e0d\u4e00\u81f4 \u74b0\u5883\u914d\u7f6e\u5dee\u7570 \u4f7f\u7528\u74b0\u5883\u8b8a\u91cf\uff1b\u5be6\u73fe\u74b0\u5883\u7279\u5b9a\u914d\u7f6e \u4f9d\u8cf4\u9805\u885d\u7a81 \u5305\u7248\u672c\u4e0d\u517c\u5bb9 \u4f7f\u7528\u865b\u64ec\u74b0\u5883\uff1b\u56fa\u5b9a\u4f9d\u8cf4\u9805\u7248\u672c \u4ee3\u7406\u548c\u8ca0\u8f09\u5747\u8861\u554f\u984c \u4ee3\u7406\u914d\u7f6e\u4e0d\u6b63\u78ba \u8a2d\u7f6e\u6b63\u78ba\u7684\u4e3b\u6a5f\u982d\uff1b\u914d\u7f6e <code>root_path</code> <pre><code># \u4f7f\u7528\u74b0\u5883\u8b8a\u91cf\u9032\u884c\u914d\u7f6e\nimport os\nfrom fastapi import FastAPI\nfrom pydantic_settings import BaseSettings\n\nclass Settings(BaseSettings):\n    app_name: str = \"FastAPI App\"\n    debug: bool = False\n    database_url: str\n\n    class Config:\n        env_file = \".env\"\n\nsettings = Settings()\napp = FastAPI(\n    title=settings.app_name,\n    debug=settings.debug,\n    # \u5982\u679c\u5728\u4ee3\u7406\u5f8c\u9762\u904b\u884c\uff0c\u8a2d\u7f6e root_path\n    root_path=os.getenv(\"ROOT_PATH\", \"\")\n)\n</code></pre>"},{"location":"openapi/08-troubleshooting/#_9","title":"\u8abf\u8a66\u6280\u5de7\u8207\u5de5\u5177","text":""},{"location":"openapi/08-troubleshooting/#_10","title":"\u65e5\u8a8c\u914d\u7f6e\u8207\u5206\u6790","text":"\u65e5\u8a8c\u7d1a\u5225 \u9069\u7528\u5834\u666f \u914d\u7f6e\u793a\u4f8b DEBUG \u958b\u767c\u74b0\u5883\uff1b\u8a73\u7d30\u8abf\u8a66 \u8a18\u9304\u8acb\u6c42/\u97ff\u61c9\u8a73\u60c5\uff1b\u5305\u542b\u5806\u68e7\u8ddf\u8e2a INFO \u4e00\u822c\u64cd\u4f5c\u4fe1\u606f \u8a18\u9304\u8acb\u6c42\u958b\u59cb/\u7d50\u675f\uff1b\u57fa\u672c\u6d41\u7a0b\u4fe1\u606f WARNING \u6f5b\u5728\u554f\u984c \u6162\u97ff\u61c9\uff1b\u8cc7\u6e90\u4f7f\u7528\u7387\u9ad8 ERROR \u932f\u8aa4\u4f46\u53ef\u6062\u5fa9 \u8acb\u6c42\u8655\u7406\u5931\u6557\uff1b\u6578\u64da\u5eab\u9023\u63a5\u554f\u984c CRITICAL \u56b4\u91cd\u932f\u8aa4 \u61c9\u7528\u5d29\u6f70\uff1b\u6578\u64da\u640d\u58de <pre><code># \u7d50\u69cb\u5316\u65e5\u8a8c\u914d\u7f6e\nimport logging\nimport uuid\nfrom fastapi import FastAPI, Request\n\n# \u914d\u7f6e\u65e5\u8a8c\nlogging.basicConfig(\n    level=logging.INFO,\n    format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s - %(request_id)s\",\n    handlers=[\n        logging.StreamHandler(),\n        logging.FileHandler(\"app.log\"),\n    ],\n)\n\nlogger = logging.getLogger(\"app\")\n\n# \u6dfb\u52a0\u8acb\u6c42 ID \u4e2d\u9593\u4ef6\n@app.middleware(\"http\")\nasync def add_request_id(request: Request, call_next):\n    request_id = str(uuid.uuid4())\n    request.state.request_id = request_id\n\n    logger.info(f\"Request started: {request.method} {request.url.path}\", \n                extra={\"request_id\": request_id})\n\n    try:\n        response = await call_next(request)\n        logger.info(f\"Request completed: {response.status_code}\", \n                    extra={\"request_id\": request_id})\n        return response\n    except Exception as e:\n        logger.error(f\"Unhandled exception: {str(e)}\", \n                     extra={\"request_id\": request_id}, exc_info=True)\n        raise\n</code></pre>"},{"location":"openapi/08-troubleshooting/#_11","title":"\u8abf\u8a66\u5de5\u5177\u8207\u6280\u5de7","text":"\u5de5\u5177 \u7528\u9014 \u4f7f\u7528\u5834\u666f FastAPI \u6e2c\u8a66\u5ba2\u6236\u7aef API \u7aef\u9ede\u6e2c\u8a66 \u55ae\u5143\u6e2c\u8a66\uff1b\u672c\u5730\u8abf\u8a66 Pydantic \u8abf\u8a66\u6a21\u5f0f \u6578\u64da\u6a21\u578b\u9a57\u8b49 \u6aa2\u67e5\u6a21\u578b\u9a57\u8b49\u932f\u8aa4 Python \u8abf\u8a66\u5668 (pdb) \u4ee3\u78bc\u57f7\u884c\u8abf\u8a66 \u8907\u96dc\u908f\u8f2f\u8abf\u8a66\uff1b\u689d\u4ef6\u65b7\u9ede API \u6587\u6a94 UI \u4ea4\u4e92\u5f0f API \u6e2c\u8a66 \u5feb\u901f\u6e2c\u8a66\u7aef\u9ede\uff1b\u6aa2\u67e5\u8acb\u6c42/\u97ff\u61c9\u6a21\u5f0f <pre><code># \u4f7f\u7528 FastAPI \u6e2c\u8a66\u5ba2\u6236\u7aef\u9032\u884c\u8abf\u8a66\nfrom fastapi.testclient import TestClient\n\nclient = TestClient(app)\n\ndef debug_api():\n    # \u767c\u9001\u6e2c\u8a66\u8acb\u6c42\n    response = client.get(\"/items/42\", headers={\"X-Test\": \"test\"})\n    print(f\"Status Code: {response.status_code}\")\n    print(f\"Response: {response.json()}\")\n\n    # \u6aa2\u67e5\u8acb\u6c42\u982d\u548c\u97ff\u61c9\u982d\n    print(f\"Request Headers: {response.request.headers}\")\n    print(f\"Response Headers: {response.headers}\")\n\n    # \u5982\u679c\u6709\u932f\u8aa4\uff0c\u6253\u5370\u932f\u8aa4\u4fe1\u606f\n    if response.status_code &gt;= 400:\n        print(f\"Error: {response.text}\")\n</code></pre>"},{"location":"openapi/08-troubleshooting/#_12","title":"\u5e38\u898b\u554f\u984c\u5feb\u901f\u53c3\u8003\u8868","text":"\u554f\u984c\u985e\u5225 \u5e38\u898b\u75c7\u72c0 \u9996\u8981\u6aa2\u67e5\u9805 Swagger UI \u7121\u6cd5\u8f09\u5165 <code>/docs</code> \u9801\u9762\u7a7a\u767d\u6216\u5831\u932f \u63a7\u5236\u53f0\u932f\u8aa4\uff1b\u8def\u7531\u5b9a\u7fa9 \u8def\u7531\u8a2a\u554f 404 \u7121\u6cd5\u8a2a\u554f\u7279\u5b9a\u7aef\u9ede \u8def\u7531\u9806\u5e8f\uff1b\u8def\u5f91\u53c3\u6578\u5b9a\u7fa9 \u8acb\u6c42\u9a57\u8b49\u932f\u8aa4 422 Unprocessable Entity \u8acb\u6c42\u6578\u64da\u683c\u5f0f\uff1b\u6a21\u578b\u9a57\u8b49\u898f\u5247 \u8a8d\u8b49\u5931\u6557 401 Unauthorized \u4ee4\u724c\u6709\u6548\u6027\uff1b\u8a8d\u8b49\u914d\u7f6e CORS \u932f\u8aa4 \u700f\u89bd\u5668\u63a7\u5236\u53f0\u8de8\u57df\u932f\u8aa4 CORS \u4e2d\u9593\u4ef6\u914d\u7f6e\uff1b\u9810\u6aa2\u8acb\u6c42\u8655\u7406 \u97ff\u61c9\u7de9\u6162 API \u8acb\u6c42\u5ef6\u9072\u9ad8 \u6578\u64da\u5eab\u67e5\u8a62\uff1b\u963b\u585e\u64cd\u4f5c \u90e8\u7f72\u554f\u984c \u751f\u7522\u74b0\u5883\u7570\u5e38 \u74b0\u5883\u914d\u7f6e\uff1b\u4ee3\u7406\u8a2d\u7f6e OpenAPI \u751f\u6210\u932f\u8aa4 \u6587\u6a94\u751f\u6210\u5931\u6557 \u6a21\u578b\u5faa\u74b0\u5f15\u7528\uff1b\u4e0d\u652f\u6301\u7684\u985e\u578b"},{"location":"openapi/08-troubleshooting/#_13","title":"\u7e3d\u7d50","text":"<p>FastAPI \u548c OpenAPI \u6545\u969c\u6392\u9664\u7684\u95dc\u9375\u6b65\u9a5f\uff1a</p> <ol> <li>\u8b58\u5225\u554f\u984c\u985e\u578b\uff1a\u78ba\u5b9a\u554f\u984c\u5c6c\u65bc\u54ea\u500b\u985e\u5225\uff08\u6587\u6a94\u751f\u6210\u3001\u8def\u7531\u8655\u7406\u3001\u6578\u64da\u9a57\u8b49\u3001\u8a8d\u8b49\u7b49\uff09</li> <li>\u555f\u7528\u8a73\u7d30\u65e5\u8a8c\uff1a\u8a2d\u7f6e\u9069\u7576\u7684\u65e5\u8a8c\u7d1a\u5225\uff0c\u6355\u7372\u8a73\u7d30\u7684\u932f\u8aa4\u4fe1\u606f</li> <li>\u9694\u96e2\u554f\u984c\uff1a\u901a\u904e\u7981\u7528\u6216\u7c21\u5316\u76f8\u95dc\u529f\u80fd\u4f86\u5b9a\u4f4d\u554f\u984c\u6839\u6e90</li> <li>\u4f7f\u7528\u9069\u7576\u5de5\u5177\uff1a\u6839\u64da\u554f\u984c\u985e\u578b\u9078\u64c7\u5408\u9069\u7684\u8abf\u8a66\u5de5\u5177\u548c\u6280\u8853</li> <li>\u67e5\u95b1\u6587\u6a94\uff1a\u53c3\u8003 FastAPI \u5b98\u65b9\u6587\u6a94\u4e2d\u7684\u76f8\u95dc\u6307\u5357\u548c\u6700\u4f73\u5be6\u8e10</li> </ol>"},{"location":"testing/01-introduction/","title":"\u6e2c\u8a66\u57fa\u790e","text":""},{"location":"testing/01-introduction/#fastapi","title":"FastAPI \u6e2c\u8a66\u7c21\u4ecb","text":"<p>FastAPI \u662f\u4e00\u500b\u73fe\u4ee3\u3001\u5feb\u901f\u3001\u9ad8\u6548\u80fd\u7684 Python Web \u6846\u67b6\uff0c\u5c08\u70ba API \u958b\u767c\u800c\u8a2d\u8a08\uff0c\u5176\u5167\u5efa\u7684\u529f\u80fd\u4f7f\u5f97\u6e2c\u8a66\u8b8a\u5f97\u76f8\u5c0d\u76f4\u63a5\u548c\u9ad8\u6548\u3002FastAPI \u57fa\u65bc Starlette \u548c Pydantic\uff0c\u9019\u5169\u500b\u7d44\u4ef6\u90fd\u6709\u826f\u597d\u7684\u6e2c\u8a66\u652f\u6301\uff0c\u4f7f\u5f97 FastAPI \u61c9\u7528\u7a0b\u5e8f\u7684\u6e2c\u8a66\u66f4\u52a0\u4fbf\u6377\u3002</p> <p>\u5728 FastAPI \u4e2d\u9032\u884c\u6e2c\u8a66\uff0c\u6211\u5011\u4e3b\u8981\u95dc\u6ce8\u4ee5\u4e0b\u5e7e\u500b\u65b9\u9762\uff1a</p> <ul> <li>API \u7aef\u9ede\u7684\u529f\u80fd\u6e2c\u8a66</li> <li>\u8acb\u6c42\u548c\u97ff\u61c9\u6a21\u578b\u7684\u9a57\u8b49</li> <li>\u4f9d\u8cf4\u6ce8\u5165\u7cfb\u7d71\u7684\u884c\u70ba</li> <li>\u932f\u8aa4\u8655\u7406\u548c\u7570\u5e38\u60c5\u6cc1</li> <li>\u4e2d\u9593\u4ef6\u548c\u80cc\u666f\u4efb\u52d9</li> </ul> <p>FastAPI \u63d0\u4f9b\u4e86 <code>TestClient</code> \u985e\uff0c\u9019\u662f\u57fa\u65bc <code>httpx</code> \u5eab\u7684\u5ba2\u6236\u7aef\uff0c\u53ef\u4ee5\u6a21\u64ec\u5c0d API \u7684\u8acb\u6c42\uff0c\u4e26\u6aa2\u67e5\u97ff\u61c9\uff0c\u800c\u7121\u9700\u5be6\u969b\u555f\u52d5\u670d\u52d9\u5668\u3002</p> <pre><code>from fastapi.testclient import TestClient\nfrom .main import app\n\nclient = TestClient(app)\n\ndef test_read_main():\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"message\": \"Hello World\"}\n</code></pre>"},{"location":"testing/01-introduction/#_2","title":"\u6e2c\u8a66\u7684\u91cd\u8981\u6027\u8207\u512a\u52e2","text":""},{"location":"testing/01-introduction/#_3","title":"\u70ba\u4ec0\u9ebc\u6e2c\u8a66\u5f88\u91cd\u8981\uff1f","text":"\u512a\u52e2 \u8aaa\u660e \u54c1\u8cea\u4fdd\u8b49 \u6e2c\u8a66\u78ba\u4fdd\u4f60\u7684\u4ee3\u78bc\u6309\u9810\u671f\u5de5\u4f5c\uff0c\u4e26\u5728\u767c\u5e03\u524d\u6355\u7372\u932f\u8aa4 \u91cd\u69cb\u4fe1\u5fc3 \u6709\u4e86\u826f\u597d\u7684\u6e2c\u8a66\u8986\u84cb\uff0c\u4f60\u53ef\u4ee5\u66f4\u81ea\u4fe1\u5730\u4fee\u6539\u548c\u6539\u9032\u4ee3\u78bc \u6587\u6a94\u4f5c\u7528 \u6e2c\u8a66\u53ef\u4ee5\u4f5c\u70ba\u4ee3\u78bc\u529f\u80fd\u7684\u6d3b\u6587\u6a94\uff0c\u5c55\u793a\u5982\u4f55\u4f7f\u7528 API \u5354\u4f5c\u6548\u7387 \u6e2c\u8a66\u5e6b\u52a9\u5718\u968a\u6210\u54e1\u7406\u89e3\u4ee3\u78bc\u7684\u9810\u671f\u884c\u70ba\uff0c\u4fc3\u9032\u5354\u4f5c \u6301\u7e8c\u96c6\u6210 \u81ea\u52d5\u5316\u6e2c\u8a66\u662f CI/CD \u6d41\u7a0b\u7684\u95dc\u9375\u7d44\u6210\u90e8\u5206"},{"location":"testing/01-introduction/#fastapi_1","title":"FastAPI \u6e2c\u8a66\u7684\u7279\u6b8a\u512a\u52e2","text":"\u512a\u52e2 \u8aaa\u660e \u985e\u578b\u5b89\u5168 FastAPI \u7684\u985e\u578b\u63d0\u793a\u548c Pydantic \u6a21\u578b\u4f7f\u5f97\u6e2c\u8a66\u66f4\u52a0\u7cbe\u78ba \u81ea\u52d5\u6587\u6a94 \u6e2c\u8a66\u53ef\u4ee5\u9a57\u8b49 API \u6587\u6a94\u7684\u6e96\u78ba\u6027 \u4f9d\u8cf4\u6ce8\u5165 FastAPI \u7684\u4f9d\u8cf4\u6ce8\u5165\u7cfb\u7d71\u4f7f\u5f97\u6a21\u64ec\u548c\u6e2c\u8a66\u9694\u96e2\u8b8a\u5f97\u7c21\u55ae \u975e\u540c\u6b65\u652f\u6301 \u53ef\u4ee5\u76f4\u63a5\u6e2c\u8a66\u975e\u540c\u6b65\u4ee3\u78bc\uff0c\u7121\u9700\u7279\u6b8a\u8655\u7406 OpenAPI \u9a57\u8b49 \u53ef\u4ee5\u6e2c\u8a66 API \u662f\u5426\u7b26\u5408 OpenAPI \u898f\u7bc4"},{"location":"testing/01-introduction/#_4","title":"\u6e2c\u8a66\u7b56\u7565\u8207\u6e2c\u8a66\u91d1\u5b57\u5854","text":""},{"location":"testing/01-introduction/#_5","title":"\u6e2c\u8a66\u91d1\u5b57\u5854","text":"<p>\u6e2c\u8a66\u91d1\u5b57\u5854\u662f\u4e00\u7a2e\u8996\u89ba\u5316\u6a21\u578b\uff0c\u63cf\u8ff0\u4e86\u4e0d\u540c\u985e\u578b\u6e2c\u8a66\u7684\u6bd4\u4f8b\u95dc\u4fc2\uff1a</p> \u6e2c\u8a66\u985e\u578b \u5c64\u7d1a \u6578\u91cf \u7279\u9ede FastAPI \u61c9\u7528 \u55ae\u5143\u6e2c\u8a66 \u5e95\u5c64 \u6700\u591a \u6e2c\u8a66\u6700\u5c0f\u7684\u4ee3\u78bc\u55ae\u5143\u57f7\u884c\u5feb\u901f\uff0c\u9694\u96e2\u6027\u597d \u6e2c\u8a66\u8def\u7531\u51fd\u6578\u6e2c\u8a66\u4f9d\u8cf4\u9805\u6e2c\u8a66\u5de5\u5177\u51fd\u6578 \u6574\u5408\u6e2c\u8a66 \u4e2d\u5c64 \u9069\u4e2d \u6e2c\u8a66\u591a\u500b\u7d44\u4ef6\u5354\u540c\u5de5\u4f5c\u53ef\u80fd\u5305\u62ec\u5916\u90e8\u4f9d\u8cf4 \u4f7f\u7528 TestClient \u6e2c\u8a66 API \u7aef\u9ede\u6e2c\u8a66\u6578\u64da\u5eab\u4ea4\u4e92\u6e2c\u8a66\u5916\u90e8\u670d\u52d9\u6a21\u64ec \u7aef\u5230\u7aef\u6e2c\u8a66 \u9802\u5c64 \u6700\u5c11 \u6e2c\u8a66\u6574\u500b\u61c9\u7528\u7a0b\u5e8f\u6d41\u7a0b\u5728\u771f\u5be6\u74b0\u5883\u4e2d\u904b\u884c \u6e2c\u8a66\u5b8c\u6574\u7528\u6236\u6d41\u7a0b\u6e2c\u8a66\u524d\u5f8c\u7aef\u4ea4\u4e92\u6e2c\u8a66\u7cfb\u7d71\u6574\u9ad4\u529f\u80fd"},{"location":"testing/01-introduction/#_6","title":"\u6709\u6548\u7684\u6e2c\u8a66\u7b56\u7565","text":"\u7b56\u7565 \u8aaa\u660e \u9069\u7528\u5834\u666f \u6e2c\u8a66\u9a45\u52d5\u958b\u767c (TDD) \u5148\u5beb\u6e2c\u8a66\uff0c\u518d\u5be6\u73fe\u529f\u80fd \u7279\u5225\u9069\u5408 FastAPI \u7684\u8072\u660e\u5f0f\u98a8\u683c \u884c\u70ba\u9a45\u52d5\u958b\u767c (BDD) \u57fa\u65bc\u7528\u6236\u884c\u70ba\u548c\u9700\u6c42\u7de8\u5beb\u6e2c\u8a66 \u4f7f\u7528 pytest-bdd \u7b49\u5de5\u5177\u5be6\u73fe \u6df7\u5408\u65b9\u6cd5 \u55ae\u5143\u6e2c\u8a66\u63a1\u7528 TDD\u6574\u5408\u6e2c\u8a66\u63a1\u7528 BDD \u6839\u64da\u9805\u76ee\u9700\u6c42\u9748\u6d3b\u8abf\u6574"},{"location":"testing/01-introduction/#fastapi_2","title":"FastAPI \u6e2c\u8a66\u5de5\u5177\u6982\u8ff0","text":""},{"location":"testing/01-introduction/#_7","title":"\u6838\u5fc3\u6e2c\u8a66\u5de5\u5177","text":"\u5de5\u5177 \u6838\u5fc3\u6982\u5ff5 \u4e3b\u8981\u7528\u9014 pytest \u5f37\u5927\u7684 Python \u6e2c\u8a66\u6846\u67b6 \u63d0\u4f9b\u6e2c\u8a66\u767c\u73fe\u3001\u57f7\u884c\u548c\u5831\u544a\u652f\u6301 fixture\u3001\u53c3\u6578\u5316\u6e2c\u8a66\u548c\u6a19\u8a18\u64c1\u6709\u8c50\u5bcc\u7684\u63d2\u4ef6\u751f\u614b\u7cfb\u7d71 FastAPI TestClient \u57fa\u65bc httpx \u7684\u6e2c\u8a66\u5ba2\u6236\u7aef \u7121\u9700\u555f\u52d5\u670d\u52d9\u5668\u5373\u53ef\u6e2c\u8a66 API \u7aef\u9ede\u6a21\u64ec HTTP \u8acb\u6c42\u548c\u6aa2\u67e5\u97ff\u61c9\u652f\u6301\u540c\u6b65\u548c\u975e\u540c\u6b65\u6e2c\u8a66\u65b9\u5f0f pytest-asyncio \u975e\u540c\u6b65\u6e2c\u8a66\u64f4\u5c55 \u652f\u6301\u6e2c\u8a66\u975e\u540c\u6b65\u51fd\u6578\u548c\u5354\u7a0b\u63d0\u4f9b\u975e\u540c\u6b65 fixture \u529f\u80fd\u8207 FastAPI \u7684\u975e\u540c\u6b65\u672c\u8cea\u5b8c\u7f8e\u5339\u914d"},{"location":"testing/01-introduction/#_8","title":"\u8f14\u52a9\u6e2c\u8a66\u5de5\u5177","text":"\u5de5\u5177 \u6838\u5fc3\u6982\u5ff5 \u4e3b\u8981\u7528\u9014 pytest-cov \u4ee3\u78bc\u8986\u84cb\u7387\u5206\u6790 \u6e2c\u91cf\u6e2c\u8a66\u8986\u84cb\u7684\u4ee3\u78bc\u6bd4\u4f8b\u751f\u6210\u8986\u84cb\u7387\u5831\u544a\u5e6b\u52a9\u8b58\u5225\u672a\u6e2c\u8a66\u7684\u4ee3\u78bc\u5340\u57df mock / unittest.mock \u5c0d\u8c61\u6a21\u64ec \u5275\u5efa\u548c\u7ba1\u7406\u6a21\u64ec\u5c0d\u8c61\u9694\u96e2\u88ab\u6e2c\u4ee3\u78bc\u7684\u5916\u90e8\u4f9d\u8cf4\u63a7\u5236\u548c\u9a57\u8b49\u51fd\u6578\u8abf\u7528 pytest-xdist \u4e26\u884c\u6e2c\u8a66\u57f7\u884c \u52a0\u901f\u6e2c\u8a66\u5957\u4ef6\u904b\u884c\u5206\u914d\u6e2c\u8a66\u5230\u591a\u500b CPU \u6838\u5fc3\u652f\u6301\u5206\u5e03\u5f0f\u6e2c\u8a66\u57f7\u884c factory_boy / faker \u6e2c\u8a66\u6578\u64da\u751f\u6210 \u5275\u5efa\u6e2c\u8a66\u6a21\u578b\u5be6\u4f8b\u751f\u6210\u96a8\u6a5f\u4f46\u5408\u7406\u7684\u6e2c\u8a66\u6578\u64da\u6e1b\u5c11\u6e2c\u8a66\u4ee3\u78bc\u4e2d\u7684\u91cd\u8907\u6578\u64da\u5b9a\u7fa9"},{"location":"testing/01-introduction/#_9","title":"\u8a2d\u7f6e\u6e2c\u8a66\u74b0\u5883","text":""},{"location":"testing/01-introduction/#_10","title":"\u9805\u76ee\u7d50\u69cb","text":"<p>\u4e00\u500b\u826f\u597d\u7d44\u7e54\u7684 FastAPI \u9805\u76ee\u6e2c\u8a66\u7d50\u69cb\u53ef\u80fd\u5982\u4e0b\uff1a</p> <pre><code>my_fastapi_app/\n\u251c\u2500\u2500 app/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 main.py\n\u2502   \u251c\u2500\u2500 api/\n\u2502   \u251c\u2500\u2500 models/\n\u2502   \u2514\u2500\u2500 services/\n\u251c\u2500\u2500 tests/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 conftest.py           # \u5171\u4eab\u7684 pytest fixtures\n\u2502   \u251c\u2500\u2500 test_main.py          # \u4e3b\u61c9\u7528\u6e2c\u8a66\n\u2502   \u251c\u2500\u2500 api/                  # API \u7aef\u9ede\u6e2c\u8a66\n\u2502   \u251c\u2500\u2500 models/               # \u6a21\u578b\u6e2c\u8a66\n\u2502   \u2514\u2500\u2500 services/             # \u670d\u52d9\u5c64\u6e2c\u8a66\n\u2514\u2500\u2500 pytest.ini                # pytest \u914d\u7f6e\n</code></pre>"},{"location":"testing/01-introduction/#pytest","title":"pytest \u914d\u7f6e","text":"<p>\u5178\u578b\u7684 <code>pytest.ini</code> \u6587\u4ef6\uff1a</p> <pre><code>[pytest]\ntestpaths = tests\npython_files = test_*.py\npython_functions = test_*\nasyncio_mode = auto\nmarkers =\n    slow: marks tests as slow (deselect with '-m \"not slow\"')\n    integration: marks tests as integration tests\n</code></pre>"},{"location":"testing/01-introduction/#_11","title":"\u6e2c\u8a66\u4f9d\u8cf4\u7ba1\u7406","text":"<p>\u5efa\u8b70\u5728 <code>conftest.py</code> \u4e2d\u5b9a\u7fa9\u5171\u4eab\u7684\u6e2c\u8a66\u56fa\u4ef6\uff0c\u7528\u65bc\uff1a</p> <ul> <li>\u5275\u5efa\u6e2c\u8a66\u6578\u64da\u5eab\u9023\u63a5</li> <li>\u8a2d\u7f6e\u6e2c\u8a66\u5ba2\u6236\u7aef</li> <li>\u8986\u84cb\u4f9d\u8cf4\u6ce8\u5165</li> <li>\u63d0\u4f9b\u6e2c\u8a66\u6578\u64da</li> <li>\u7ba1\u7406\u6e2c\u8a66\u524d\u5f8c\u7684\u6e05\u7406\u5de5\u4f5c</li> </ul>"},{"location":"testing/01-introduction/#_12","title":"\u6e2c\u8a66\u57f7\u884c\u8207\u5831\u544a","text":""},{"location":"testing/01-introduction/#_13","title":"\u5e38\u7528\u6e2c\u8a66\u547d\u4ee4","text":"\u547d\u4ee4\u985e\u578b \u7528\u9014 \u793a\u4f8b\u547d\u4ee4 \u57fa\u672c\u57f7\u884c \u904b\u884c\u6e2c\u8a66 <code>pytest</code><code>pytest tests/test_users.py</code><code>pytest tests/test_users.py::test_create_user</code> \u9078\u64c7\u6027\u57f7\u884c \u57fa\u65bc\u6a19\u8a18\u6216\u8868\u9054\u5f0f\u9078\u64c7\u6e2c\u8a66 <code>pytest -m integration</code><code>pytest -k \"user and not delete\"</code> \u6548\u7387\u512a\u5316 \u63d0\u9ad8\u6e2c\u8a66\u57f7\u884c\u6548\u7387 <code>pytest -n auto</code><code>pytest --lf</code> (\u53ea\u904b\u884c\u4e0a\u6b21\u5931\u6557\u7684\u6e2c\u8a66) \u8986\u84cb\u7387\u5206\u6790 \u6aa2\u67e5\u4ee3\u78bc\u8986\u84cb\u60c5\u6cc1 <code>pytest --cov=app --cov-report=html</code>"},{"location":"testing/01-introduction/#_14","title":"\u6e2c\u8a66\u5831\u544a\u9078\u9805","text":"\u5831\u544a\u985e\u578b \u7528\u9014 \u547d\u4ee4\u9078\u9805 \u63a7\u5236\u53f0\u8f38\u51fa \u8abf\u6574\u6e2c\u8a66\u7d50\u679c\u986f\u793a\u65b9\u5f0f <code>-v</code> (\u8a73\u7d30)<code>--durations=10</code> (\u986f\u793a\u6700\u6162\u7684\u6e2c\u8a66) \u7d50\u69cb\u5316\u5831\u544a \u751f\u6210\u6a5f\u5668\u53ef\u8b80\u7684\u5831\u544a\u683c\u5f0f <code>--junitxml=report.xml</code> (CI \u7cfb\u7d71\u5e38\u7528) \u53ef\u8996\u5316\u5831\u544a \u751f\u6210\u4eba\u985e\u53ef\u8b80\u7684\u5831\u544a <code>--html=report.html</code> (\u9700\u8981 pytest-html \u63d2\u4ef6)"},{"location":"testing/01-introduction/#_15","title":"\u5e38\u898b\u7684\u6e2c\u8a66\u8986\u84cb\u7387\u76ee\u6a19","text":"\u8986\u84cb\u7387\u985e\u578b \u7406\u60f3\u76ee\u6a19 \u6700\u4f4e\u8981\u6c42 \u884c\u8986\u84cb\u7387 &gt; 90% &gt; 75% \u5206\u652f\u8986\u84cb\u7387 &gt; 85% &gt; 70% \u51fd\u6578\u8986\u84cb\u7387 &gt; 95% &gt; 80%"},{"location":"testing/01-introduction/#_16","title":"\u7e3d\u7d50","text":"\u65b9\u9762 \u95dc\u9375\u9ede \u5de5\u5177\u9078\u64c7 \u4f7f\u7528 pytest \u4f5c\u70ba\u4e3b\u8981\u6e2c\u8a66\u6846\u67b6\u5229\u7528 FastAPI TestClient \u6e2c\u8a66 API \u7aef\u9ede\u9078\u64c7\u9069\u5408\u7684\u8f14\u52a9\u5de5\u5177\u63d0\u9ad8\u6e2c\u8a66\u6548\u7387 \u6e2c\u8a66\u7b56\u7565 \u9075\u5faa\u6e2c\u8a66\u91d1\u5b57\u5854\u539f\u5247\u512a\u5148\u8986\u84cb\u6838\u5fc3\u696d\u52d9\u908f\u8f2f\u6839\u64da\u9805\u76ee\u9700\u6c42\u9078\u64c7\u9069\u5408\u7684\u6e2c\u8a66\u65b9\u6cd5 \u74b0\u5883\u8a2d\u7f6e \u4f7f\u7528\u9694\u96e2\u7684\u6e2c\u8a66\u74b0\u5883\u5408\u7406\u7d44\u7e54\u6e2c\u8a66\u6587\u4ef6\u7d50\u69cb\u5229\u7528 fixtures \u6e1b\u5c11\u91cd\u8907\u4ee3\u78bc \u6301\u7e8c\u6539\u9032 \u5b9a\u671f\u6aa2\u67e5\u6e2c\u8a66\u8986\u84cb\u7387\u91cd\u69cb\u6e2c\u8a66\u4ee5\u63d0\u9ad8\u53ef\u7dad\u8b77\u6027\u5c07\u6e2c\u8a66\u96c6\u6210\u5230 CI/CD \u6d41\u7a0b\u4e2d <p>\u901a\u904e\u9019\u4e9b\u57fa\u790e\u77e5\u8b58\uff0c\u4f60\u5df2\u7d93\u6e96\u5099\u597d\u958b\u59cb\u70ba\u4f60\u7684 FastAPI \u61c9\u7528\u7a0b\u5e8f\u7de8\u5beb\u9ad8\u8cea\u91cf\u7684\u6e2c\u8a66\u4e86\u3002\u8a18\u4f4f\uff0c\u597d\u7684\u6e2c\u8a66\u4e0d\u50c5\u50c5\u662f\u6355\u7372\u932f\u8aa4\uff0c\u5b83\u5011\u9084\u662f\u4f60\u7684 API \u8a2d\u8a08\u548c\u529f\u80fd\u7684\u6307\u5357\u3002</p>"},{"location":"testing/02-unit-testing/","title":"\u55ae\u5143\u6e2c\u8a66","text":""},{"location":"testing/02-unit-testing/#_2","title":"\u55ae\u5143\u6e2c\u8a66\u7684\u57fa\u672c\u6982\u5ff5","text":"<p>\u55ae\u5143\u6e2c\u8a66\u662f\u6e2c\u8a66\u91d1\u5b57\u5854\u7684\u57fa\u790e\u5c64\uff0c\u5c08\u6ce8\u65bc\u6e2c\u8a66\u4ee3\u78bc\u7684\u6700\u5c0f\u55ae\u5143\uff08\u901a\u5e38\u662f\u51fd\u6578\u6216\u65b9\u6cd5\uff09\u3002\u5728 FastAPI \u61c9\u7528\u7a0b\u5e8f\u4e2d\uff0c\u55ae\u5143\u6e2c\u8a66\u4e3b\u8981\u91dd\u5c0d\u4e0d\u4f9d\u8cf4\u65bc HTTP \u8acb\u6c42/\u97ff\u61c9\u6d41\u7a0b\u7684\u7368\u7acb\u7d44\u4ef6\u3002</p> \u6982\u5ff5 \u8aaa\u660e \u6e2c\u8a66\u7bc4\u570d \u55ae\u4e00\u51fd\u6578\u3001\u65b9\u6cd5\u6216\u985e\u7684\u884c\u70ba \u9694\u96e2\u6027 \u8207\u5176\u4ed6\u7d44\u4ef6\u548c\u5916\u90e8\u7cfb\u7d71\u5b8c\u5168\u9694\u96e2 \u57f7\u884c\u901f\u5ea6 \u975e\u5e38\u5feb\u901f\uff0c\u901a\u5e38\u6beb\u79d2\u7d1a \u4f9d\u8cf4\u8655\u7406 \u4f7f\u7528\u6a21\u64ec(mock)\u6216\u5b58\u6839(stub)\u66ff\u4ee3\u5916\u90e8\u4f9d\u8cf4 \u6578\u91cf\u6bd4\u4f8b \u5728\u6e2c\u8a66\u91d1\u5b57\u5854\u4e2d\u4f54\u6bd4\u6700\u5927\uff0c\u7d04 70-80%"},{"location":"testing/02-unit-testing/#fastapi","title":"FastAPI \u4e2d\u7684\u55ae\u5143\u6e2c\u8a66\u76ee\u6a19","text":"<p>\u5728 FastAPI \u61c9\u7528\u4e2d\uff0c\u4ee5\u4e0b\u7d44\u4ef6\u662f\u55ae\u5143\u6e2c\u8a66\u7684\u4e3b\u8981\u76ee\u6a19\uff1a</p> \u7d44\u4ef6\u985e\u578b \u6e2c\u8a66\u91cd\u9ede \u793a\u4f8b \u5de5\u5177\u51fd\u6578 \u8f38\u5165/\u8f38\u51fa\u8f49\u63db\u3001\u683c\u5f0f\u5316\u3001\u8a08\u7b97 \u65e5\u671f\u8f49\u63db\u3001\u91d1\u984d\u8a08\u7b97\u3001\u5b57\u7b26\u4e32\u8655\u7406 \u696d\u52d9\u908f\u8f2f \u6838\u5fc3\u696d\u52d9\u898f\u5247\u548c\u7b97\u6cd5 \u6298\u6263\u8a08\u7b97\u3001\u8cc7\u683c\u9a57\u8b49\u3001\u72c0\u614b\u8f49\u63db Pydantic \u6a21\u578b \u6578\u64da\u9a57\u8b49\u548c\u8f49\u63db \u6a21\u578b\u5be6\u4f8b\u5316\u3001\u9a57\u8b49\u3001\u8f49\u63db\u65b9\u6cd5 \u4f9d\u8cf4\u51fd\u6578 \u63d0\u4f9b\u7d66\u8def\u7531\u7684\u53ef\u6ce8\u5165\u4f9d\u8cf4 \u6b0a\u9650\u6aa2\u67e5\u3001\u53c3\u6578\u9a57\u8b49 \u81ea\u5b9a\u7fa9\u7570\u5e38 \u7570\u5e38\u884c\u70ba\u548c\u5c6c\u6027 \u932f\u8aa4\u78bc\u3001\u932f\u8aa4\u6d88\u606f\u683c\u5f0f"},{"location":"testing/02-unit-testing/#_3","title":"\u55ae\u5143\u6e2c\u8a66\u7684\u6700\u4f73\u5be6\u8e10","text":""},{"location":"testing/02-unit-testing/#_4","title":"\u547d\u540d\u548c\u7d44\u7e54","text":"\u5be6\u8e10 \u8aaa\u660e \u4e00\u81f4\u7684\u547d\u540d \u4f7f\u7528\u63cf\u8ff0\u6027\u540d\u7a31\uff0c\u5982 <code>test_calculate_discount_with_valid_input</code> \u6309\u6a21\u584a\u7d44\u7e54 \u6e2c\u8a66\u6587\u4ef6\u7d50\u69cb\u61c9\u53cd\u6620\u61c9\u7528\u7d50\u69cb\uff0c\u5982 <code>test_utils.py</code> \u5c0d\u61c9 <code>utils.py</code> \u6e2c\u8a66\u985e\u5206\u7d44 \u76f8\u95dc\u6e2c\u8a66\u53ef\u4ee5\u7d44\u7e54\u5728\u6e2c\u8a66\u985e\u4e2d\uff0c\u5982 <code>TestUserService</code> \u529f\u80fd\u5206\u985e \u6309\u529f\u80fd\u6216\u5834\u666f\u5206\u985e\u6e2c\u8a66\uff0c\u5982 <code>test_validation_cases</code>, <code>test_error_cases</code>"},{"location":"testing/02-unit-testing/#_5","title":"\u6e2c\u8a66\u8a2d\u8a08\u539f\u5247","text":"\u539f\u5247 \u8aaa\u660e \u55ae\u4e00\u8077\u8cac \u6bcf\u500b\u6e2c\u8a66\u53ea\u6e2c\u8a66\u4e00\u500b\u884c\u70ba\u6216\u529f\u80fd\u9ede \u7368\u7acb\u6027 \u6e2c\u8a66\u4e4b\u9593\u4e0d\u61c9\u6709\u4f9d\u8cf4\u95dc\u4fc2\u6216\u57f7\u884c\u9806\u5e8f\u8981\u6c42 \u78ba\u5b9a\u6027 \u6e2c\u8a66\u7d50\u679c\u61c9\u8a72\u662f\u53ef\u9810\u6e2c\u7684\uff0c\u4e0d\u53d7\u74b0\u5883\u8b8a\u5316\u5f71\u97ff \u908a\u754c\u6e2c\u8a66 \u6e2c\u8a66\u908a\u754c\u689d\u4ef6\u548c\u6975\u7aef\u60c5\u6cc1 \u932f\u8aa4\u6848\u4f8b \u4e0d\u50c5\u6e2c\u8a66\u6b63\u5e38\u6d41\u7a0b\uff0c\u4e5f\u8981\u6e2c\u8a66\u932f\u8aa4\u8655\u7406 \u4ee3\u78bc\u8986\u84cb \u78ba\u4fdd\u6e2c\u8a66\u8986\u84cb\u6240\u6709\u4ee3\u78bc\u8def\u5f91\u548c\u5206\u652f"},{"location":"testing/02-unit-testing/#aaa","title":"AAA \u6a21\u5f0f","text":"<p>\u55ae\u5143\u6e2c\u8a66\u901a\u5e38\u9075\u5faa Arrange-Act-Assert (AAA) \u6a21\u5f0f\uff1a</p> \u968e\u6bb5 \u76ee\u7684 \u5167\u5bb9 Arrange \u8a2d\u7f6e\u6e2c\u8a66\u74b0\u5883 \u5275\u5efa\u5c0d\u8c61\u3001\u8a2d\u7f6e\u53c3\u6578\u3001\u6e96\u5099\u8f38\u5165\u6578\u64da Act \u57f7\u884c\u88ab\u6e2c\u8a66\u7684\u884c\u70ba \u8abf\u7528\u88ab\u6e2c\u51fd\u6578\u6216\u65b9\u6cd5 Assert \u9a57\u8b49\u7d50\u679c \u6aa2\u67e5\u8fd4\u56de\u503c\u3001\u72c0\u614b\u8b8a\u5316\u6216\u7570\u5e38"},{"location":"testing/02-unit-testing/#_6","title":"\u5de5\u5177\u51fd\u6578\u7684\u55ae\u5143\u6e2c\u8a66","text":"<p>\u5de5\u5177\u51fd\u6578\u901a\u5e38\u662f\u6700\u5bb9\u6613\u9032\u884c\u55ae\u5143\u6e2c\u8a66\u7684\u7d44\u4ef6\uff0c\u56e0\u70ba\u5b83\u5011\u5f80\u5f80\u662f\u7d14\u51fd\u6578\uff08\u7d66\u5b9a\u76f8\u540c\u8f38\u5165\u7e3d\u662f\u7522\u751f\u76f8\u540c\u8f38\u51fa\uff0c\u6c92\u6709\u526f\u4f5c\u7528\uff09\u3002</p>"},{"location":"testing/02-unit-testing/#_7","title":"\u6e2c\u8a66\u7b56\u7565","text":"\u7b56\u7565 \u8aaa\u660e \u53c3\u6578\u5316\u6e2c\u8a66 \u4f7f\u7528\u591a\u7d44\u8f38\u5165/\u8f38\u51fa\u6578\u64da\u6e2c\u8a66\u540c\u4e00\u51fd\u6578 \u908a\u754c\u503c\u5206\u6790 \u6e2c\u8a66\u51fd\u6578\u5728\u908a\u754c\u689d\u4ef6\u4e0b\u7684\u884c\u70ba \u7570\u5e38\u8655\u7406 \u9a57\u8b49\u51fd\u6578\u5c0d\u7121\u6548\u8f38\u5165\u7684\u8655\u7406 \u6027\u80fd\u6aa2\u67e5 \u5c0d\u65bc\u95dc\u9375\u5de5\u5177\u51fd\u6578\uff0c\u53ef\u4ee5\u6e2c\u8a66\u6027\u80fd\u8868\u73fe"},{"location":"testing/02-unit-testing/#_8","title":"\u793a\u4f8b\uff1a\u65e5\u671f\u8655\u7406\u51fd\u6578\u6e2c\u8a66","text":"<p>\u5047\u8a2d\u6211\u5011\u6709\u4e00\u500b\u5c07\u5b57\u7b26\u4e32\u8f49\u63db\u70ba\u65e5\u671f\u7684\u5de5\u5177\u51fd\u6578\uff1a</p> <pre><code># app/utils/date_utils.py\nfrom datetime import datetime, date\nfrom typing import Optional\n\ndef parse_date_string(date_str: str) -&gt; Optional[date]:\n    \"\"\"\u5c07\u5b57\u7b26\u4e32\u89e3\u6790\u70ba\u65e5\u671f\u5c0d\u8c61\uff0c\u652f\u6301\u591a\u7a2e\u683c\u5f0f\"\"\"\n    formats = [\"%Y-%m-%d\", \"%d/%m/%Y\", \"%Y.%m.%d\"]\n\n    for fmt in formats:\n        try:\n            return datetime.strptime(date_str, fmt).date()\n        except ValueError:\n            continue\n\n    return None\n</code></pre> <p>\u5c0d\u61c9\u7684\u55ae\u5143\u6e2c\u8a66\uff1a</p> <pre><code># tests/utils/test_date_utils.py\nimport pytest\nfrom datetime import date\nfrom app.utils.date_utils import parse_date_string\n\n@pytest.mark.parametrize(\"date_str, expected\", [\n    (\"2023-01-15\", date(2023, 1, 15)),  # ISO \u683c\u5f0f\n    (\"15/01/2023\", date(2023, 1, 15)),  # \u6b50\u6d32\u683c\u5f0f\n    (\"2023.01.15\", date(2023, 1, 15)),  # \u9ede\u5206\u9694\u683c\u5f0f\n    (\"invalid-date\", None),             # \u7121\u6548\u683c\u5f0f\n    (\"\", None),                         # \u7a7a\u5b57\u7b26\u4e32\n])\ndef test_parse_date_string(date_str, expected):\n    # Act\n    result = parse_date_string(date_str)\n\n    # Assert\n    assert result == expected\n</code></pre>"},{"location":"testing/02-unit-testing/#_9","title":"\u696d\u52d9\u908f\u8f2f\u7684\u55ae\u5143\u6e2c\u8a66","text":"<p>\u696d\u52d9\u908f\u8f2f\u662f\u61c9\u7528\u7684\u6838\u5fc3\uff0c\u9700\u8981\u5168\u9762\u7684\u6e2c\u8a66\u8986\u84cb\u3002</p>"},{"location":"testing/02-unit-testing/#_10","title":"\u6e2c\u8a66\u7b56\u7565","text":"\u7b56\u7565 \u8aaa\u660e \u5834\u666f\u6e2c\u8a66 \u6e2c\u8a66\u4e0d\u540c\u696d\u52d9\u5834\u666f\u4e0b\u7684\u908f\u8f2f\u884c\u70ba \u898f\u5247\u9a57\u8b49 \u78ba\u4fdd\u696d\u52d9\u898f\u5247\u5f97\u5230\u6b63\u78ba\u5be6\u65bd \u72c0\u614b\u8f49\u63db \u6e2c\u8a66\u72c0\u614b\u6a5f\u6216\u5de5\u4f5c\u6d41\u908f\u8f2f \u4f9d\u8cf4\u6a21\u64ec \u4f7f\u7528 mock \u9694\u96e2\u5916\u90e8\u4f9d\u8cf4"},{"location":"testing/02-unit-testing/#_11","title":"\u793a\u4f8b\uff1a\u6298\u6263\u8a08\u7b97\u670d\u52d9\u6e2c\u8a66","text":"<p>\u5047\u8a2d\u6211\u5011\u6709\u4e00\u500b\u8a08\u7b97\u8a02\u55ae\u6298\u6263\u7684\u670d\u52d9\uff1a</p> <pre><code># app/services/discount_service.py\nfrom decimal import Decimal\nfrom typing import Optional\n\nclass DiscountService:\n    def calculate_discount(\n        self, \n        order_total: Decimal, \n        user_tier: str, \n        coupon_code: Optional[str] = None\n    ) -&gt; Decimal:\n        \"\"\"\u8a08\u7b97\u8a02\u55ae\u6298\u6263\u91d1\u984d\"\"\"\n        # \u57fa\u790e\u6298\u6263\u7387\n        discount_rate = Decimal('0.0')\n\n        # \u6703\u54e1\u7b49\u7d1a\u6298\u6263\n        if user_tier == \"gold\":\n            discount_rate += Decimal('0.05')\n        elif user_tier == \"platinum\":\n            discount_rate += Decimal('0.1')\n\n        # \u512a\u60e0\u5238\u6298\u6263\n        if coupon_code == \"SAVE10\":\n            discount_rate += Decimal('0.1')\n        elif coupon_code == \"SAVE20\":\n            discount_rate += Decimal('0.2')\n\n        # \u6700\u5927\u6298\u6263\u7387\u70ba 30%\n        discount_rate = min(discount_rate, Decimal('0.3'))\n\n        return order_total * discount_rate\n</code></pre> <p>\u5c0d\u61c9\u7684\u55ae\u5143\u6e2c\u8a66\uff1a</p> <pre><code># tests/services/test_discount_service.py\nimport pytest\nfrom decimal import Decimal\nfrom app.services.discount_service import DiscountService\n\nclass TestDiscountService:\n    @pytest.fixture\n    def service(self):\n        return DiscountService()\n\n    @pytest.mark.parametrize(\"order_total, user_tier, coupon_code, expected_discount\", [\n        # \u57fa\u672c\u6e2c\u8a66\u6848\u4f8b\n        (Decimal('100.00'), \"regular\", None, Decimal('0.00')),\n        (Decimal('100.00'), \"gold\", None, Decimal('5.00')),\n        (Decimal('100.00'), \"platinum\", None, Decimal('10.00')),\n\n        # \u512a\u60e0\u5238\u6e2c\u8a66\n        (Decimal('100.00'), \"regular\", \"SAVE10\", Decimal('10.00')),\n        (Decimal('100.00'), \"regular\", \"SAVE20\", Decimal('20.00')),\n        (Decimal('100.00'), \"regular\", \"INVALID\", Decimal('0.00')),\n\n        # \u7d44\u5408\u6298\u6263\u6e2c\u8a66\n        (Decimal('100.00'), \"gold\", \"SAVE10\", Decimal('15.00')),\n        (Decimal('100.00'), \"platinum\", \"SAVE20\", Decimal('30.00')),  # \u6700\u5927\u6298\u6263\u7387 30%\n\n        # \u91d1\u984d\u6e2c\u8a66\n        (Decimal('0.00'), \"platinum\", \"SAVE20\", Decimal('0.00')),\n        (Decimal('1000.00'), \"gold\", \"SAVE10\", Decimal('150.00')),\n    ])\n    def test_calculate_discount(\n        self, service, order_total, user_tier, coupon_code, expected_discount\n    ):\n        # Act\n        discount = service.calculate_discount(order_total, user_tier, coupon_code)\n\n        # Assert\n        assert discount == expected_discount\n</code></pre>"},{"location":"testing/02-unit-testing/#pydantic","title":"Pydantic \u6a21\u578b\u7684\u55ae\u5143\u6e2c\u8a66","text":"<p>Pydantic \u6a21\u578b\u662f FastAPI \u61c9\u7528\u7684\u91cd\u8981\u7d44\u6210\u90e8\u5206\uff0c\u8ca0\u8cac\u6578\u64da\u9a57\u8b49\u548c\u8f49\u63db\u3002</p>"},{"location":"testing/02-unit-testing/#_12","title":"\u6e2c\u8a66\u7b56\u7565","text":"\u7b56\u7565 \u8aaa\u660e \u5be6\u4f8b\u5316\u9a57\u8b49 \u6e2c\u8a66\u6a21\u578b\u80fd\u5426\u6b63\u78ba\u5be6\u4f8b\u5316 \u5b57\u6bb5\u9a57\u8b49 \u6e2c\u8a66\u5b57\u6bb5\u7d04\u675f\u548c\u9a57\u8b49\u908f\u8f2f \u9ed8\u8a8d\u503c \u9a57\u8b49\u9ed8\u8a8d\u503c\u662f\u5426\u6b63\u78ba\u8a2d\u7f6e \u8f49\u63db\u65b9\u6cd5 \u6e2c\u8a66\u81ea\u5b9a\u7fa9\u7684\u8f49\u63db\u65b9\u6cd5 \u932f\u8aa4\u8655\u7406 \u9a57\u8b49\u7121\u6548\u6578\u64da\u7684\u932f\u8aa4\u4fe1\u606f"},{"location":"testing/02-unit-testing/#_13","title":"\u793a\u4f8b\uff1a\u7528\u6236\u6a21\u578b\u6e2c\u8a66","text":"<p>\u5047\u8a2d\u6211\u5011\u6709\u4e00\u500b\u7528\u6236\u6a21\u578b\uff1a</p> <pre><code># app/models/user.py\nfrom pydantic import BaseModel, EmailStr, Field, validator\nfrom datetime import date\nfrom typing import Optional\n\nclass UserCreate(BaseModel):\n    username: str = Field(..., min_length=3, max_length=50)\n    email: EmailStr\n    birth_date: Optional[date] = None\n    password: str = Field(..., min_length=8)\n    password_confirm: str\n\n    @validator('password_confirm')\n    def passwords_match(cls, v, values):\n        if 'password' in values and v != values['password']:\n            raise ValueError('\u5bc6\u78bc\u4e0d\u5339\u914d')\n        return v\n\n    def to_user_model(self):\n        \"\"\"\u8f49\u63db\u70ba\u7528\u6236\u6a21\u578b\uff08\u4e0d\u5305\u542b\u78ba\u8a8d\u5bc6\u78bc\uff09\"\"\"\n        data = self.dict(exclude={'password_confirm'})\n        return data\n</code></pre> <p>\u5c0d\u61c9\u7684\u55ae\u5143\u6e2c\u8a66\uff1a</p> <pre><code># tests/models/test_user.py\nimport pytest\nfrom pydantic import ValidationError\nfrom datetime import date\nfrom app.models.user import UserCreate\n\nclass TestUserCreateModel:\n    def test_valid_user_data(self):\n        # Arrange\n        user_data = {\n            \"username\": \"testuser\",\n            \"email\": \"test@example.com\",\n            \"birth_date\": \"1990-01-01\",\n            \"password\": \"securepass\",\n            \"password_confirm\": \"securepass\"\n        }\n\n        # Act\n        user = UserCreate(**user_data)\n\n        # Assert\n        assert user.username == \"testuser\"\n        assert user.email == \"test@example.com\"\n        assert user.birth_date == date(1990, 1, 1)\n        assert user.password == \"securepass\"\n\n    def test_password_validation(self):\n        # Arrange\n        user_data = {\n            \"username\": \"testuser\",\n            \"email\": \"test@example.com\",\n            \"password\": \"securepass\",\n            \"password_confirm\": \"different\"\n        }\n\n        # Act &amp; Assert\n        with pytest.raises(ValidationError) as exc_info:\n            UserCreate(**user_data)\n\n        errors = exc_info.value.errors()\n        assert any(error[\"msg\"] == \"\u5bc6\u78bc\u4e0d\u5339\u914d\" for error in errors)\n\n    def test_username_length_validation(self):\n        # Arrange - \u7528\u6236\u540d\u592a\u77ed\n        user_data = {\n            \"username\": \"ab\",  # \u5c11\u65bc\u6700\u5c0f\u9577\u5ea6 3\n            \"email\": \"test@example.com\",\n            \"password\": \"securepass\",\n            \"password_confirm\": \"securepass\"\n        }\n\n        # Act &amp; Assert\n        with pytest.raises(ValidationError) as exc_info:\n            UserCreate(**user_data)\n\n        errors = exc_info.value.errors()\n        assert any(\"username\" in error[\"loc\"] for error in errors)\n\n    def test_to_user_model(self):\n        # Arrange\n        user_data = {\n            \"username\": \"testuser\",\n            \"email\": \"test@example.com\",\n            \"birth_date\": \"1990-01-01\",\n            \"password\": \"securepass\",\n            \"password_confirm\": \"securepass\"\n        }\n        user = UserCreate(**user_data)\n\n        # Act\n        user_model_data = user.to_user_model()\n\n        # Assert\n        assert \"password_confirm\" not in user_model_data\n        assert user_model_data[\"username\"] == \"testuser\"\n        assert user_model_data[\"email\"] == \"test@example.com\"\n        assert user_model_data[\"birth_date\"] == date(1990, 1, 1)\n        assert user_model_data[\"password\"] == \"securepass\"\n</code></pre>"},{"location":"testing/02-unit-testing/#_14","title":"\u4f9d\u8cf4\u51fd\u6578\u7684\u55ae\u5143\u6e2c\u8a66","text":"<p>\u4f9d\u8cf4\u51fd\u6578\u662f FastAPI \u7684\u91cd\u8981\u7279\u6027\uff0c\u7528\u65bc\u8def\u7531\u4e4b\u9593\u5171\u4eab\u4ee3\u78bc\u548c\u908f\u8f2f\u3002</p>"},{"location":"testing/02-unit-testing/#_15","title":"\u6e2c\u8a66\u7b56\u7565","text":"\u7b56\u7565 \u8aaa\u660e \u7368\u7acb\u6e2c\u8a66 \u5c07\u4f9d\u8cf4\u51fd\u6578\u8996\u70ba\u666e\u901a\u51fd\u6578\u9032\u884c\u6e2c\u8a66 \u6a21\u64ec\u8acb\u6c42\u4e0a\u4e0b\u6587 \u6a21\u64ec\u4f9d\u8cf4\u51fd\u6578\u5728\u8acb\u6c42\u4e2d\u7684\u884c\u70ba \u7570\u5e38\u8655\u7406 \u6e2c\u8a66\u4f9d\u8cf4\u51fd\u6578\u7684\u932f\u8aa4\u8655\u7406\u908f\u8f2f \u8fd4\u56de\u503c\u9a57\u8b49 \u78ba\u4fdd\u4f9d\u8cf4\u51fd\u6578\u8fd4\u56de\u6b63\u78ba\u7684\u503c"},{"location":"testing/02-unit-testing/#_16","title":"\u793a\u4f8b\uff1a\u7c21\u55ae\u8a8d\u8b49\u4f9d\u8cf4\u6e2c\u8a66","text":"<p>\u5047\u8a2d\u6211\u5011\u6709\u4e00\u500b\u7c21\u55ae\u7684\u8a8d\u8b49\u4f9d\u8cf4\u51fd\u6578\uff1a</p> <pre><code># app/dependencies/auth.py\nfrom fastapi import Header, HTTPException, status\nfrom typing import Optional\n\ndef get_api_key(api_key: Optional[str] = Header(None)) -&gt; str:\n    \"\"\"\u9a57\u8b49 API \u91d1\u9470\"\"\"\n    if api_key is None:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"\u7f3a\u5c11 API \u91d1\u9470\"\n        )\n\n    # \u5728\u5be6\u969b\u61c9\u7528\u4e2d\uff0c\u9019\u88e1\u6703\u6aa2\u67e5\u6578\u64da\u5eab\u6216\u914d\u7f6e\n    valid_api_keys = [\"test_key\", \"dev_key\", \"prod_key\"]\n\n    if api_key not in valid_api_keys:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"\u7121\u6548\u7684 API \u91d1\u9470\"\n        )\n\n    return api_key\n</code></pre> <p>\u5c0d\u61c9\u7684\u55ae\u5143\u6e2c\u8a66\uff1a</p> <pre><code># tests/dependencies/test_auth.py\nimport pytest\nfrom fastapi import HTTPException\nfrom app.dependencies.auth import get_api_key\n\ndef test_get_api_key_valid():\n    # Arrange\n    valid_key = \"test_key\"\n\n    # Act\n    result = get_api_key(valid_key)\n\n    # Assert\n    assert result == valid_key\n\ndef test_get_api_key_missing():\n    # Arrange &amp; Act &amp; Assert\n    with pytest.raises(HTTPException) as exc_info:\n        get_api_key(None)\n\n    assert exc_info.value.status_code == 401\n    assert \"\u7f3a\u5c11 API \u91d1\u9470\" in exc_info.value.detail\n\ndef test_get_api_key_invalid():\n    # Arrange\n    invalid_key = \"invalid_key\"\n\n    # Act &amp; Assert\n    with pytest.raises(HTTPException) as exc_info:\n        get_api_key(invalid_key)\n\n    assert exc_info.value.status_code == 403\n    assert \"\u7121\u6548\u7684 API \u91d1\u9470\" in exc_info.value.detail\n</code></pre>"},{"location":"testing/02-unit-testing/#mock","title":"\u4f7f\u7528\u6a21\u64ec (Mock) \u9032\u884c\u55ae\u5143\u6e2c\u8a66","text":"<p>\u5728\u55ae\u5143\u6e2c\u8a66\u4e2d\uff0c\u6211\u5011\u7d93\u5e38\u9700\u8981\u9694\u96e2\u5916\u90e8\u4f9d\u8cf4\uff0c\u5982\u6578\u64da\u5eab\u3001\u5916\u90e8 API \u6216\u6587\u4ef6\u7cfb\u7d71\u3002Python \u7684 <code>unittest.mock</code> \u6a21\u584a\u63d0\u4f9b\u4e86\u5f37\u5927\u7684\u6a21\u64ec\u529f\u80fd\u3002</p>"},{"location":"testing/02-unit-testing/#_17","title":"\u5e38\u7528\u6a21\u64ec\u6280\u8853","text":"\u6280\u8853 \u7528\u9014 \u9069\u7528\u5834\u666f patch \u88dd\u98fe\u5668 \u66ff\u63db\u6a21\u584a\u4e2d\u7684\u5c0d\u8c61 \u6a21\u64ec\u5c0e\u5165\u7684\u51fd\u6578\u6216\u985e MagicMock \u5275\u5efa\u5177\u6709\u7279\u5b9a\u884c\u70ba\u7684\u6a21\u64ec\u5c0d\u8c61 \u6a21\u64ec\u8907\u96dc\u5c0d\u8c61\u548c\u65b9\u6cd5\u93c8 side_effect \u5b9a\u7fa9\u6a21\u64ec\u8abf\u7528\u7684\u884c\u70ba \u6a21\u64ec\u7570\u5e38\u6216\u52d5\u614b\u8fd4\u56de\u503c return_value \u8a2d\u7f6e\u6a21\u64ec\u8abf\u7528\u7684\u8fd4\u56de\u503c \u7c21\u55ae\u7684\u8fd4\u56de\u503c\u6a21\u64ec assert_called_with \u9a57\u8b49\u6a21\u64ec\u662f\u5426\u4f7f\u7528\u7279\u5b9a\u53c3\u6578\u8abf\u7528 \u9a57\u8b49\u51fd\u6578\u8abf\u7528\u53c3\u6578"},{"location":"testing/02-unit-testing/#_18","title":"\u793a\u4f8b\uff1a\u4f7f\u7528\u6a21\u64ec\u7684\u670d\u52d9\u6e2c\u8a66","text":"<p>\u5047\u8a2d\u6211\u5011\u6709\u4e00\u500b\u4f7f\u7528\u5916\u90e8\u670d\u52d9\u7684\u7522\u54c1\u670d\u52d9\uff1a</p> <pre><code># app/services/product_service.py\nfrom typing import Dict, List, Any\nfrom app.repositories.product_repository import ProductRepository\n\nclass ProductService:\n    def __init__(self, product_repo: ProductRepository):\n        self.product_repo = product_repo\n\n    def get_product_by_id(self, product_id: int) -&gt; Dict[str, Any]:\n        \"\"\"\u6839\u64da ID \u7372\u53d6\u7522\u54c1\"\"\"\n        product = self.product_repo.get_by_id(product_id)\n        if not product:\n            raise ValueError(f\"\u7522\u54c1\u4e0d\u5b58\u5728: {product_id}\")\n        return product\n\n    def get_products_by_category(self, category: str) -&gt; List[Dict[str, Any]]:\n        \"\"\"\u7372\u53d6\u6307\u5b9a\u985e\u5225\u7684\u6240\u6709\u7522\u54c1\"\"\"\n        return self.product_repo.get_by_category(category)\n\n    def search_products(self, query: str, limit: int = 10) -&gt; List[Dict[str, Any]]:\n        \"\"\"\u641c\u7d22\u7522\u54c1\"\"\"\n        if not query or len(query) &lt; 3:\n            raise ValueError(\"\u641c\u7d22\u67e5\u8a62\u5fc5\u9808\u81f3\u5c11\u5305\u542b 3 \u500b\u5b57\u7b26\")\n\n        return self.product_repo.search(query, limit)\n</code></pre> <p>\u5c0d\u61c9\u7684\u55ae\u5143\u6e2c\u8a66\uff1a</p> <pre><code># tests/services/test_product_service.py\nimport pytest\nfrom unittest.mock import Mock\nfrom app.services.product_service import ProductService\n\n@pytest.fixture\ndef mock_product_repo():\n    return Mock()\n\n@pytest.fixture\ndef product_service(mock_product_repo):\n    return ProductService(mock_product_repo)\n\ndef test_get_product_by_id_success(product_service, mock_product_repo):\n    # Arrange\n    product_id = 1\n    expected_product = {\"id\": product_id, \"name\": \"\u6e2c\u8a66\u7522\u54c1\", \"price\": 99.99}\n    mock_product_repo.get_by_id.return_value = expected_product\n\n    # Act\n    result = product_service.get_product_by_id(product_id)\n\n    # Assert\n    assert result == expected_product\n    mock_product_repo.get_by_id.assert_called_once_with(product_id)\n\ndef test_get_product_by_id_not_found(product_service, mock_product_repo):\n    # Arrange\n    product_id = 999\n    mock_product_repo.get_by_id.return_value = None\n\n    # Act &amp; Assert\n    with pytest.raises(ValueError) as exc_info:\n        product_service.get_product_by_id(product_id)\n\n    assert f\"\u7522\u54c1\u4e0d\u5b58\u5728: {product_id}\" in str(exc_info.value)\n    mock_product_repo.get_by_id.assert_called_once_with(product_id)\n\ndef test_get_products_by_category(product_service, mock_product_repo):\n    # Arrange\n    category = \"\u96fb\u5b50\u7522\u54c1\"\n    expected_products = [\n        {\"id\": 1, \"name\": \"\u624b\u6a5f\", \"category\": category},\n        {\"id\": 2, \"name\": \"\u5e73\u677f\u96fb\u8166\", \"category\": category}\n    ]\n    mock_product_repo.get_by_category.return_value = expected_products\n\n    # Act\n    result = product_service.get_products_by_category(category)\n\n    # Assert\n    assert result == expected_products\n    mock_product_repo.get_by_category.assert_called_once_with(category)\n\ndef test_search_products_valid_query(product_service, mock_product_repo):\n    # Arrange\n    query = \"\u624b\u6a5f\"\n    limit = 5\n    expected_results = [{\"id\": 1, \"name\": \"\u667a\u80fd\u624b\u6a5f\"}]\n    mock_product_repo.search.return_value = expected_results\n\n    # Act\n    result = product_service.search_products(query, limit)\n\n    # Assert\n    assert result == expected_results\n    mock_product_repo.search.assert_called_once_with(query, limit)\n\ndef test_search_products_invalid_query(product_service, mock_product_repo):\n    # Arrange\n    query = \"ab\"  # \u5c11\u65bc 3 \u500b\u5b57\u7b26\n\n    # Act &amp; Assert\n    with pytest.raises(ValueError) as exc_info:\n        product_service.search_products(query)\n\n    assert \"\u641c\u7d22\u67e5\u8a62\u5fc5\u9808\u81f3\u5c11\u5305\u542b 3 \u500b\u5b57\u7b26\" in str(exc_info.value)\n    mock_product_repo.search.assert_not_called()\n</code></pre>"},{"location":"testing/02-unit-testing/#_19","title":"\u55ae\u5143\u6e2c\u8a66\u7684\u5e38\u898b\u9677\u9631\u8207\u89e3\u6c7a\u65b9\u6848","text":"\u9677\u9631 \u554f\u984c \u89e3\u6c7a\u65b9\u6848 \u904e\u5ea6\u6a21\u64ec \u904e\u591a\u7684\u6a21\u64ec\u4f7f\u6e2c\u8a66\u8b8a\u5f97\u8106\u5f31\u4e14\u96e3\u4ee5\u7dad\u8b77 \u53ea\u6a21\u64ec\u5916\u90e8\u4f9d\u8cf4\uff0c\u4e0d\u6a21\u64ec\u88ab\u6e2c\u7cfb\u7d71\u7684\u5167\u90e8 \u6e2c\u8a66\u5be6\u73fe\u800c\u975e\u884c\u70ba \u6e2c\u8a66\u4f9d\u8cf4\u65bc\u4ee3\u78bc\u7684\u5177\u9ad4\u5be6\u73fe \u5c08\u6ce8\u65bc\u6e2c\u8a66\u516c\u5171 API \u548c\u53ef\u89c0\u5bdf\u884c\u70ba \u6e2c\u8a66\u8986\u84cb\u7387\u8ff7\u601d \u904e\u5206\u8ffd\u6c42\u9ad8\u8986\u84cb\u7387\u800c\u5ffd\u7565\u6e2c\u8a66\u8cea\u91cf \u95dc\u6ce8\u95dc\u9375\u8def\u5f91\u548c\u908a\u754c\u689d\u4ef6\u7684\u6e2c\u8a66 \u5ffd\u7565\u908a\u754c\u689d\u4ef6 \u53ea\u6e2c\u8a66\u6b63\u5e38\u60c5\u6cc1\uff0c\u5ffd\u7565\u6975\u7aef\u60c5\u6cc1 \u7cfb\u7d71\u5730\u8b58\u5225\u548c\u6e2c\u8a66\u908a\u754c\u689d\u4ef6 \u6e2c\u8a66\u4e0d\u7a69\u5b9a \u6e2c\u8a66\u7d50\u679c\u4e0d\u4e00\u81f4\u6216\u4f9d\u8cf4\u74b0\u5883 \u78ba\u4fdd\u6e2c\u8a66\u7684\u78ba\u5b9a\u6027\u548c\u7368\u7acb\u6027 \u6e2c\u8a66\u904e\u65bc\u8907\u96dc \u6e2c\u8a66\u4ee3\u78bc\u6bd4\u88ab\u6e2c\u4ee3\u78bc\u66f4\u8907\u96dc \u4fdd\u6301\u6e2c\u8a66\u7c21\u55ae\uff0c\u4e00\u500b\u6e2c\u8a66\u53ea\u6e2c\u4e00\u500b\u884c\u70ba"},{"location":"testing/02-unit-testing/#_20","title":"\u7e3d\u7d50","text":"<p>\u55ae\u5143\u6e2c\u8a66\u662f FastAPI \u61c9\u7528\u7a0b\u5e8f\u6e2c\u8a66\u7b56\u7565\u7684\u57fa\u790e\u3002\u901a\u904e\u6709\u6548\u5730\u6e2c\u8a66\u5de5\u5177\u51fd\u6578\u3001\u696d\u52d9\u908f\u8f2f\u3001Pydantic \u6a21\u578b\u548c\u4f9d\u8cf4\u51fd\u6578\uff0c\u4f60\u53ef\u4ee5\u78ba\u4fdd\u61c9\u7528\u7a0b\u5e8f\u7684\u6838\u5fc3\u7d44\u4ef6\u6309\u9810\u671f\u5de5\u4f5c\u3002</p>"},{"location":"testing/02-unit-testing/#_21","title":"\u55ae\u5143\u6e2c\u8a66\u8981\u9ede","text":"\u65b9\u9762 \u95dc\u9375\u9ede \u6e2c\u8a66\u7bc4\u570d \u5c08\u6ce8\u65bc\u6e2c\u8a66\u6700\u5c0f\u7684\u7368\u7acb\u4ee3\u78bc\u55ae\u5143\u78ba\u4fdd\u6e2c\u8a66\u7684\u9694\u96e2\u6027\u548c\u78ba\u5b9a\u6027 \u6e2c\u8a66\u8a2d\u8a08 \u9075\u5faa AAA \u6a21\u5f0f\u7d44\u7e54\u6e2c\u8a66\u4f7f\u7528\u53c3\u6578\u5316\u6e2c\u8a66\u6e1b\u5c11\u91cd\u8907 \u4f9d\u8cf4\u8655\u7406 \u4f7f\u7528\u6a21\u64ec\u9694\u96e2\u5916\u90e8\u4f9d\u8cf4\u9a57\u8b49\u8207\u4f9d\u8cf4\u7684\u4ea4\u4e92 \u6e2c\u8a66\u8986\u84cb \u78ba\u4fdd\u6e2c\u8a66\u8986\u84cb\u6b63\u5e38\u6d41\u7a0b\u548c\u932f\u8aa4\u60c5\u6cc1\u95dc\u6ce8\u908a\u754c\u689d\u4ef6\u548c\u6975\u7aef\u60c5\u6cc1 \u4ee3\u78bc\u8cea\u91cf \u4fdd\u6301\u6e2c\u8a66\u4ee3\u78bc\u7684\u7c21\u6f54\u548c\u53ef\u8b80\u6027\u907f\u514d\u6e2c\u8a66\u4ee3\u78bc\u4e2d\u7684\u908f\u8f2f\u8907\u96dc\u6027 <p>\u901a\u904e\u826f\u597d\u7684\u55ae\u5143\u6e2c\u8a66\u5be6\u8e10\uff0c\u4f60\u53ef\u4ee5\u5efa\u7acb\u5c0d\u4ee3\u78bc\u7684\u4fe1\u5fc3\uff0c\u4f7f\u91cd\u69cb\u548c\u65b0\u529f\u80fd\u958b\u767c\u8b8a\u5f97\u66f4\u52a0\u5b89\u5168\u548c\u9ad8\u6548\u3002\u8a18\u4f4f\uff0c\u55ae\u5143\u6e2c\u8a66\u4e0d\u50c5\u662f\u6355\u7372\u932f\u8aa4\u7684\u5de5\u5177\uff0c\u4e5f\u662f\u4ee3\u78bc\u8a2d\u8a08\u7684\u6307\u5357\u3002</p>"},{"location":"testing/03-integration-testing/","title":"\u6574\u5408\u6e2c\u8a66","text":""},{"location":"testing/03-integration-testing/#_2","title":"\u6574\u5408\u6e2c\u8a66\u7684\u57fa\u672c\u6982\u5ff5","text":"<p>\u6574\u5408\u6e2c\u8a66\u662f\u6e2c\u8a66\u91d1\u5b57\u5854\u7684\u4e2d\u9593\u5c64\uff0c\u5c08\u6ce8\u65bc\u6e2c\u8a66\u591a\u500b\u7d44\u4ef6\u5982\u4f55\u5354\u540c\u5de5\u4f5c\u3002\u5728 FastAPI \u61c9\u7528\u7a0b\u5e8f\u4e2d\uff0c\u6574\u5408\u6e2c\u8a66\u4e3b\u8981\u95dc\u6ce8 API \u7aef\u9ede\u548c\u4f9d\u8cf4\u9805\u7684\u4ea4\u4e92\uff0c\u4ee5\u53ca\u8207\u5916\u90e8\u7cfb\u7d71\uff08\u5982\u6578\u64da\u5eab\u3001\u7de9\u5b58\u6216\u5916\u90e8\u670d\u52d9\uff09\u7684\u96c6\u6210\u3002</p> \u6982\u5ff5 \u8aaa\u660e \u6e2c\u8a66\u7bc4\u570d \u591a\u500b\u7d44\u4ef6\u7684\u5354\u540c\u5de5\u4f5c \u9694\u96e2\u7a0b\u5ea6 \u90e8\u5206\u9694\u96e2\uff0c\u53ef\u80fd\u5305\u542b\u90e8\u5206\u771f\u5be6\u4f9d\u8cf4 \u57f7\u884c\u901f\u5ea6 \u4e2d\u7b49\uff0c\u901a\u5e38\u79d2\u7d1a \u4f9d\u8cf4\u8655\u7406 \u53ef\u80fd\u4f7f\u7528\u771f\u5be6\u4f9d\u8cf4\u6216\u6e2c\u8a66\u66ff\u8eab \u6578\u91cf\u6bd4\u4f8b \u5728\u6e2c\u8a66\u91d1\u5b57\u5854\u4e2d\u4f54\u6bd4\u7d04 20-25%"},{"location":"testing/03-integration-testing/#fastapi","title":"FastAPI \u4e2d\u7684\u6574\u5408\u6e2c\u8a66\u76ee\u6a19","text":"<p>\u5728 FastAPI \u61c9\u7528\u4e2d\uff0c\u4ee5\u4e0b\u662f\u6574\u5408\u6e2c\u8a66\u7684\u4e3b\u8981\u76ee\u6a19\uff1a</p> \u6e2c\u8a66\u76ee\u6a19 \u6e2c\u8a66\u91cd\u9ede \u793a\u4f8b API \u7aef\u9ede \u8def\u7531\u8655\u7406\u3001\u8acb\u6c42/\u97ff\u61c9\u6d41\u7a0b \u6e2c\u8a66 GET/POST/PUT/DELETE \u7aef\u9ede \u4e2d\u9593\u4ef6 \u8acb\u6c42\u8655\u7406\u6d41\u7a0b\u4e2d\u7684\u4e2d\u9593\u4ef6\u529f\u80fd \u8a8d\u8b49\u3001\u65e5\u8a8c\u3001CORS \u8655\u7406 \u4f9d\u8cf4\u6ce8\u5165\u93c8 \u591a\u500b\u4f9d\u8cf4\u9805\u7684\u5354\u540c\u5de5\u4f5c \u8a8d\u8b49+\u6388\u6b0a+\u8cc7\u6e90\u7372\u53d6\u6d41\u7a0b \u6578\u64da\u5eab\u4ea4\u4e92 ORM/\u67e5\u8a62\u64cd\u4f5c\u8207\u696d\u52d9\u908f\u8f2f\u7684\u96c6\u6210 \u5275\u5efa/\u8b80\u53d6/\u66f4\u65b0/\u522a\u9664\u64cd\u4f5c \u5916\u90e8\u670d\u52d9\u96c6\u6210 \u8207\u5916\u90e8 API \u6216\u670d\u52d9\u7684\u4ea4\u4e92 \u652f\u4ed8\u8655\u7406\u3001\u90f5\u4ef6\u767c\u9001\u3001\u6587\u4ef6\u5b58\u5132"},{"location":"testing/03-integration-testing/#fastapi-testclient","title":"FastAPI TestClient \u7c21\u4ecb","text":"<p>FastAPI \u63d0\u4f9b\u4e86 <code>TestClient</code> \u985e\uff0c\u9019\u662f\u6574\u5408\u6e2c\u8a66\u7684\u6838\u5fc3\u5de5\u5177\uff0c\u5b83\u57fa\u65bc <code>httpx</code> \u5eab\uff0c\u5141\u8a31\u4f60\u5411\u61c9\u7528\u7a0b\u5e8f\u767c\u9001\u8acb\u6c42\u4e26\u6aa2\u67e5\u97ff\u61c9\uff0c\u800c\u7121\u9700\u5be6\u969b\u555f\u52d5\u670d\u52d9\u5668\u3002</p> \u7279\u6027 \u8aaa\u660e \u7121\u670d\u52d9\u5668\u6e2c\u8a66 \u76f4\u63a5\u6e2c\u8a66 ASGI \u61c9\u7528\uff0c\u7121\u9700\u555f\u52d5\u5be6\u969b\u670d\u52d9\u5668 \u5b8c\u6574\u8acb\u6c42\u6d41\u7a0b \u6a21\u64ec\u5b8c\u6574\u7684 HTTP \u8acb\u6c42/\u97ff\u61c9\u5468\u671f \u4e2d\u9593\u4ef6\u652f\u6301 \u6e2c\u8a66\u5305\u62ec\u4e2d\u9593\u4ef6\u5728\u5167\u7684\u5b8c\u6574\u61c9\u7528\u5806\u68e7 \u6703\u8a71\u652f\u6301 \u7dad\u8b77 cookie \u548c\u6703\u8a71\u72c0\u614b \u540c\u6b65 API \u63d0\u4f9b\u540c\u6b65\u63a5\u53e3\uff0c\u7c21\u5316\u6e2c\u8a66\u7de8\u5beb"},{"location":"testing/03-integration-testing/#_3","title":"\u57fa\u672c\u7528\u6cd5\u793a\u4f8b","text":"<pre><code>from fastapi.testclient import TestClient\nfrom app.main import app  # \u4f60\u7684 FastAPI \u61c9\u7528\n\nclient = TestClient(app)\n\ndef test_read_main():\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"message\": \"Hello World\"}\n</code></pre>"},{"location":"testing/03-integration-testing/#_4","title":"\u8a2d\u7f6e\u6574\u5408\u6e2c\u8a66\u74b0\u5883","text":""},{"location":"testing/03-integration-testing/#_5","title":"\u6e2c\u8a66\u914d\u7f6e\u8207\u593e\u5177","text":"<p>\u4f7f\u7528 pytest \u593e\u5177 (fixtures) \u53ef\u4ee5\u6709\u6548\u7ba1\u7406\u6e2c\u8a66\u74b0\u5883\u7684\u8a2d\u7f6e\u548c\u6e05\u7406\uff1a</p> <pre><code># tests/conftest.py\nimport pytest\nfrom fastapi.testclient import TestClient\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\n\nfrom app.main import app\nfrom app.database import Base, get_db\n\n# \u5275\u5efa\u6e2c\u8a66\u6578\u64da\u5eab\u5f15\u64ce\nTEST_DATABASE_URL = \"sqlite:///./test.db\"\nengine = create_engine(TEST_DATABASE_URL)\n\n# \u5275\u5efa\u6e2c\u8a66\u6703\u8a71\nTestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\n@pytest.fixture(scope=\"function\")\ndef db():\n    # \u5275\u5efa\u8868\n    Base.metadata.create_all(bind=engine)\n\n    # \u5275\u5efa\u6703\u8a71\n    db = TestingSessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n    # \u6e05\u7406\u8868\n    Base.metadata.drop_all(bind=engine)\n\n@pytest.fixture(scope=\"function\")\ndef client(db):\n    # \u8986\u84cb\u4f9d\u8cf4\n    def override_get_db():\n        try:\n            yield db\n        finally:\n            pass\n\n    app.dependency_overrides[get_db] = override_get_db\n\n    with TestClient(app) as c:\n        yield c\n\n    # \u6e05\u7406\u4f9d\u8cf4\u8986\u84cb\n    app.dependency_overrides = {}\n</code></pre>"},{"location":"testing/03-integration-testing/#api","title":"API \u7aef\u9ede\u6574\u5408\u6e2c\u8a66","text":""},{"location":"testing/03-integration-testing/#_6","title":"\u6e2c\u8a66\u7b56\u7565","text":"\u7b56\u7565 \u8aaa\u660e CRUD \u64cd\u4f5c\u6e2c\u8a66 \u6e2c\u8a66\u5275\u5efa\u3001\u8b80\u53d6\u3001\u66f4\u65b0\u548c\u522a\u9664\u8cc7\u6e90\u7684\u7aef\u9ede \u8a8d\u8b49/\u6388\u6b0a\u6e2c\u8a66 \u6e2c\u8a66\u9700\u8981\u8a8d\u8b49\u7684\u7aef\u9ede\u548c\u6b0a\u9650\u6aa2\u67e5 \u932f\u8aa4\u8655\u7406\u6e2c\u8a66 \u6e2c\u8a66\u7aef\u9ede\u5c0d\u932f\u8aa4\u8f38\u5165\u7684\u8655\u7406 \u696d\u52d9\u6d41\u7a0b\u6e2c\u8a66 \u6e2c\u8a66\u6d89\u53ca\u591a\u500b\u7aef\u9ede\u7684\u696d\u52d9\u6d41\u7a0b"},{"location":"testing/03-integration-testing/#api_1","title":"\u793a\u4f8b\uff1a\u7c21\u55ae\u5546\u54c1 API \u7aef\u9ede\u6e2c\u8a66","text":"<p>\u5047\u8a2d\u6211\u5011\u6709\u4ee5\u4e0b\u5546\u54c1 API \u7aef\u9ede\uff1a</p> <pre><code># app/routers/items.py\nfrom fastapi import APIRouter, Depends, HTTPException, status\nfrom typing import List\n\nfrom app.schemas import Item, ItemCreate\nfrom app.services.item_service import ItemService\nfrom app.dependencies.database import get_item_service\n\nrouter = APIRouter(prefix=\"/items\", tags=[\"items\"])\n\n@router.post(\"/\", response_model=Item, status_code=status.HTTP_201_CREATED)\ndef create_item(item: ItemCreate, service: ItemService = Depends(get_item_service)):\n    return service.create_item(item)\n\n@router.get(\"/\", response_model=List[Item])\ndef read_items(skip: int = 0, limit: int = 100, service: ItemService = Depends(get_item_service)):\n    return service.get_items(skip=skip, limit=limit)\n\n@router.get(\"/{item_id}\", response_model=Item)\ndef read_item(item_id: int, service: ItemService = Depends(get_item_service)):\n    item = service.get_item(item_id)\n    if item is None:\n        raise HTTPException(status_code=404, detail=\"\u5546\u54c1\u4e0d\u5b58\u5728\")\n    return item\n</code></pre> <p>\u5c0d\u61c9\u7684\u6574\u5408\u6e2c\u8a66\uff1a</p> <pre><code># tests/api/test_items.py\nimport pytest\n\ndef test_create_item(client):\n    # Arrange\n    item_data = {\n        \"name\": \"\u6e2c\u8a66\u5546\u54c1\",\n        \"description\": \"\u9019\u662f\u4e00\u500b\u6e2c\u8a66\u5546\u54c1\",\n        \"price\": 99.99\n    }\n\n    # Act\n    response = client.post(\"/items/\", json=item_data)\n\n    # Assert\n    assert response.status_code == 201\n    data = response.json()\n    assert data[\"name\"] == item_data[\"name\"]\n    assert data[\"price\"] == item_data[\"price\"]\n    assert \"id\" in data\n\ndef test_read_items(client):\n    # Arrange - \u5275\u5efa\u5e7e\u500b\u5546\u54c1\n    client.post(\"/items/\", json={\"name\": \"\u5546\u54c11\", \"price\": 10.0})\n    client.post(\"/items/\", json={\"name\": \"\u5546\u54c12\", \"price\": 20.0})\n\n    # Act\n    response = client.get(\"/items/\")\n\n    # Assert\n    assert response.status_code == 200\n    data = response.json()\n    assert len(data) == 2\n    assert data[0][\"name\"] == \"\u5546\u54c11\"\n    assert data[1][\"name\"] == \"\u5546\u54c12\"\n\ndef test_read_item(client):\n    # Arrange - \u5275\u5efa\u4e00\u500b\u5546\u54c1\n    create_response = client.post(\"/items/\", json={\"name\": \"\u6e2c\u8a66\u5546\u54c1\", \"price\": 15.0})\n    item_id = create_response.json()[\"id\"]\n\n    # Act\n    response = client.get(f\"/items/{item_id}\")\n\n    # Assert\n    assert response.status_code == 200\n    data = response.json()\n    assert data[\"id\"] == item_id\n    assert data[\"name\"] == \"\u6e2c\u8a66\u5546\u54c1\"\n    assert data[\"price\"] == 15.0\n\ndef test_read_item_not_found(client):\n    # Act\n    response = client.get(\"/items/999\")  # \u5047\u8a2d ID 999 \u4e0d\u5b58\u5728\n\n    # Assert\n    assert response.status_code == 404\n    assert \"\u5546\u54c1\u4e0d\u5b58\u5728\" in response.json()[\"detail\"]\n</code></pre>"},{"location":"testing/03-integration-testing/#_7","title":"\u8a8d\u8b49\u548c\u6388\u6b0a\u7684\u6574\u5408\u6e2c\u8a66","text":"<p>\u6e2c\u8a66\u9700\u8981\u8a8d\u8b49\u7684 API \u7aef\u9ede\u662f\u6574\u5408\u6e2c\u8a66\u7684\u91cd\u8981\u90e8\u5206\u3002</p>"},{"location":"testing/03-integration-testing/#_8","title":"\u6e2c\u8a66\u7b56\u7565","text":"\u7b56\u7565 \u8aaa\u660e \u6a21\u64ec\u8a8d\u8b49 \u5275\u5efa\u6e2c\u8a66\u7528\u6236\u548c\u4ee4\u724c \u6b0a\u9650\u6e2c\u8a66 \u6e2c\u8a66\u4e0d\u540c\u89d2\u8272\u7684\u7528\u6236\u5c0d\u53d7\u4fdd\u8b77\u8cc7\u6e90\u7684\u8a2a\u554f \u4ee4\u724c\u5931\u6548\u6e2c\u8a66 \u6e2c\u8a66\u904e\u671f\u6216\u7121\u6548\u4ee4\u724c\u7684\u8655\u7406 \u767b\u9304\u6d41\u7a0b\u6e2c\u8a66 \u6e2c\u8a66\u5b8c\u6574\u7684\u767b\u9304/\u767b\u51fa\u6d41\u7a0b"},{"location":"testing/03-integration-testing/#api_2","title":"\u793a\u4f8b\uff1a\u7c21\u55ae\u8a8d\u8b49 API \u6e2c\u8a66","text":"<p>\u5047\u8a2d\u6211\u5011\u6709\u4e00\u500b\u7c21\u55ae\u7684\u767b\u9304\u7aef\u9ede\uff1a</p> <pre><code># app/routers/auth.py\nfrom fastapi import APIRouter, Depends, HTTPException, status\nfrom fastapi.security import OAuth2PasswordRequestForm\n\nfrom app.services.auth_service import AuthService\nfrom app.schemas import Token\nfrom app.dependencies.services import get_auth_service\n\nrouter = APIRouter(tags=[\"authentication\"])\n\n@router.post(\"/token\", response_model=Token)\ndef login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n    auth_service: AuthService = Depends(get_auth_service)\n):\n    user = auth_service.authenticate_user(form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"\u7528\u6236\u540d\u6216\u5bc6\u78bc\u932f\u8aa4\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n\n    access_token = auth_service.create_access_token(user_id=user.id)\n    return {\"access_token\": access_token, \"token_type\": \"bearer\"}\n</code></pre> <p>\u5c0d\u61c9\u7684\u6574\u5408\u6e2c\u8a66\uff1a</p> <pre><code># tests/api/test_auth.py\nimport pytest\n\n@pytest.fixture\ndef test_user(client):\n    # \u5275\u5efa\u6e2c\u8a66\u7528\u6236\n    user_data = {\n        \"username\": \"testuser\",\n        \"email\": \"test@example.com\",\n        \"password\": \"password123\"\n    }\n    response = client.post(\"/users/\", json=user_data)\n    return response.json()\n\ndef test_login_success(client, test_user):\n    # Arrange\n    login_data = {\n        \"username\": \"testuser\",\n        \"password\": \"password123\"\n    }\n\n    # Act\n    response = client.post(\n        \"/token\",\n        data=login_data,  # \u6ce8\u610f\uff1a\u767b\u9304\u7aef\u9ede\u671f\u671b\u8868\u55ae\u6578\u64da\uff0c\u800c\u4e0d\u662f JSON\n        headers={\"Content-Type\": \"application/x-www-form-urlencoded\"}\n    )\n\n    # Assert\n    assert response.status_code == 200\n    data = response.json()\n    assert \"access_token\" in data\n    assert data[\"token_type\"] == \"bearer\"\n\ndef test_login_invalid_credentials(client, test_user):\n    # Arrange\n    login_data = {\n        \"username\": \"testuser\",\n        \"password\": \"wrongpassword\"  # \u932f\u8aa4\u7684\u5bc6\u78bc\n    }\n\n    # Act\n    response = client.post(\n        \"/token\",\n        data=login_data,\n        headers={\"Content-Type\": \"application/x-www-form-urlencoded\"}\n    )\n\n    # Assert\n    assert response.status_code == 401\n    assert \"\u7528\u6236\u540d\u6216\u5bc6\u78bc\u932f\u8aa4\" in response.json()[\"detail\"]\n\ndef test_protected_route(client, test_user):\n    # Arrange - \u5148\u767b\u9304\u7372\u53d6\u4ee4\u724c\n    login_response = client.post(\n        \"/token\",\n        data={\"username\": \"testuser\", \"password\": \"password123\"},\n        headers={\"Content-Type\": \"application/x-www-form-urlencoded\"}\n    )\n    token = login_response.json()[\"access_token\"]\n\n    # Act - \u8a2a\u554f\u53d7\u4fdd\u8b77\u7684\u8def\u7531\n    response = client.get(\n        \"/users/me\",\n        headers={\"Authorization\": f\"Bearer {token}\"}\n    )\n\n    # Assert\n    assert response.status_code == 200\n    data = response.json()\n    assert data[\"username\"] == \"testuser\"\n</code></pre>"},{"location":"testing/03-integration-testing/#_9","title":"\u6578\u64da\u5eab\u6574\u5408\u6e2c\u8a66","text":"<p>\u6e2c\u8a66\u8207\u6578\u64da\u5eab\u4ea4\u4e92\u7684\u4ee3\u78bc\u662f\u6574\u5408\u6e2c\u8a66\u7684\u91cd\u8981\u90e8\u5206\u3002</p>"},{"location":"testing/03-integration-testing/#_10","title":"\u6e2c\u8a66\u7b56\u7565","text":"\u7b56\u7565 \u8aaa\u660e \u6e2c\u8a66\u6578\u64da\u5eab \u4f7f\u7528\u5c08\u7528\u7684\u6e2c\u8a66\u6578\u64da\u5eab\u6216\u5167\u5b58\u6578\u64da\u5eab \u4e8b\u52d9\u56de\u6efe \u4f7f\u7528\u4e8b\u52d9\u78ba\u4fdd\u6e2c\u8a66\u4e4b\u9593\u7684\u9694\u96e2 \u6578\u64da\u586b\u5145 \u5275\u5efa\u6e2c\u8a66\u6240\u9700\u7684\u521d\u59cb\u6578\u64da ORM \u64cd\u4f5c\u6e2c\u8a66 \u6e2c\u8a66\u6578\u64da\u5eab\u64cd\u4f5c\u8207\u696d\u52d9\u908f\u8f2f\u7684\u96c6\u6210"},{"location":"testing/03-integration-testing/#_11","title":"\u793a\u4f8b\uff1a\u7c21\u55ae\u5546\u54c1\u5b58\u5132\u5eab\u6e2c\u8a66","text":"<p>\u5047\u8a2d\u6211\u5011\u6709\u4e00\u500b\u7c21\u55ae\u7684\u5546\u54c1\u5b58\u5132\u5eab\uff1a</p> <pre><code># app/repositories/item_repository.py\nfrom sqlalchemy.orm import Session\nfrom typing import List, Optional\n\nfrom app.models.item import Item\nfrom app.schemas.item import ItemCreate\n\nclass ItemRepository:\n    def __init__(self, db: Session):\n        self.db = db\n\n    def create(self, item_data: ItemCreate) -&gt; Item:\n        \"\"\"\u5275\u5efa\u65b0\u5546\u54c1\"\"\"\n        db_item = Item(**item_data.dict())\n        self.db.add(db_item)\n        self.db.commit()\n        self.db.refresh(db_item)\n        return db_item\n\n    def get_by_id(self, item_id: int) -&gt; Optional[Item]:\n        \"\"\"\u6839\u64da ID \u7372\u53d6\u5546\u54c1\"\"\"\n        return self.db.query(Item).filter(Item.id == item_id).first()\n\n    def get_all(self, skip: int = 0, limit: int = 100) -&gt; List[Item]:\n        \"\"\"\u7372\u53d6\u6240\u6709\u5546\u54c1\"\"\"\n        return self.db.query(Item).offset(skip).limit(limit).all()\n</code></pre> <p>\u5c0d\u61c9\u7684\u6574\u5408\u6e2c\u8a66\uff1a</p> <pre><code># tests/repositories/test_item_repository.py\nimport pytest\nfrom app.repositories.item_repository import ItemRepository\nfrom app.schemas.item import ItemCreate\n\n@pytest.fixture\ndef item_repo(db):\n    return ItemRepository(db)\n\ndef test_create_item(item_repo):\n    # Arrange\n    item_data = ItemCreate(name=\"\u6e2c\u8a66\u5546\u54c1\", price=99.99)\n\n    # Act\n    item = item_repo.create(item_data)\n\n    # Assert\n    assert item.id is not None\n    assert item.name == \"\u6e2c\u8a66\u5546\u54c1\"\n    assert item.price == 99.99\n\ndef test_get_item_by_id(item_repo):\n    # Arrange\n    item_data = ItemCreate(name=\"\u6e2c\u8a66\u5546\u54c1\", price=99.99)\n    created_item = item_repo.create(item_data)\n\n    # Act\n    item = item_repo.get_by_id(created_item.id)\n\n    # Assert\n    assert item is not None\n    assert item.id == created_item.id\n    assert item.name == \"\u6e2c\u8a66\u5546\u54c1\"\n\ndef test_get_all_items(item_repo):\n    # Arrange\n    item_repo.create(ItemCreate(name=\"\u5546\u54c11\", price=10.0))\n    item_repo.create(ItemCreate(name=\"\u5546\u54c12\", price=20.0))\n\n    # Act\n    items = item_repo.get_all()\n\n    # Assert\n    assert len(items) == 2\n    assert items[0].name == \"\u5546\u54c11\"\n    assert items[1].name == \"\u5546\u54c12\"\n</code></pre>"},{"location":"testing/03-integration-testing/#_12","title":"\u6a21\u64ec\u5916\u90e8\u670d\u52d9","text":"<p>\u5728\u6574\u5408\u6e2c\u8a66\u4e2d\uff0c\u6211\u5011\u53ef\u80fd\u9700\u8981\u6a21\u64ec\u5916\u90e8\u670d\u52d9\uff0c\u5982\u652f\u4ed8\u8655\u7406\u3001\u96fb\u5b50\u90f5\u4ef6\u767c\u9001\u6216\u7b2c\u4e09\u65b9 API\u3002</p>"},{"location":"testing/03-integration-testing/#_13","title":"\u6e2c\u8a66\u7b56\u7565","text":"\u7b56\u7565 \u8aaa\u660e \u670d\u52d9\u6a21\u64ec \u5275\u5efa\u5916\u90e8\u670d\u52d9\u7684\u6a21\u64ec\u7248\u672c \u4f9d\u8cf4\u6ce8\u5165 \u4f7f\u7528\u4f9d\u8cf4\u6ce8\u5165\u66ff\u63db\u771f\u5be6\u670d\u52d9 \u97ff\u61c9\u6a21\u64ec \u6a21\u64ec\u5916\u90e8\u670d\u52d9\u7684\u5404\u7a2e\u97ff\u61c9\u60c5\u6cc1 \u932f\u8aa4\u8655\u7406\u6e2c\u8a66 \u6e2c\u8a66\u5916\u90e8\u670d\u52d9\u5931\u6557\u6642\u7684\u8655\u7406"},{"location":"testing/03-integration-testing/#_14","title":"\u793a\u4f8b\uff1a\u7c21\u55ae\u90f5\u4ef6\u670d\u52d9\u6e2c\u8a66","text":"<p>\u5047\u8a2d\u6211\u5011\u6709\u4e00\u500b\u7c21\u55ae\u7684\u90f5\u4ef6\u670d\u52d9\uff1a</p> <pre><code># app/services/email_service.py\nfrom typing import List\nimport smtplib\nfrom email.message import EmailMessage\n\nfrom app.config import settings\n\nclass EmailService:\n    def __init__(self, smtp_server=None, smtp_port=None, username=None, password=None):\n        self.smtp_server = smtp_server or settings.SMTP_SERVER\n        self.smtp_port = smtp_port or settings.SMTP_PORT\n        self.username = username or settings.SMTP_USERNAME\n        self.password = password or settings.SMTP_PASSWORD\n\n    def send_email(self, to_email: str, subject: str, content: str) -&gt; bool:\n        \"\"\"\u767c\u9001\u96fb\u5b50\u90f5\u4ef6\"\"\"\n        msg = EmailMessage()\n        msg.set_content(content)\n        msg[\"Subject\"] = subject\n        msg[\"From\"] = self.username\n        msg[\"To\"] = to_email\n\n        try:\n            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:\n                server.login(self.username, self.password)\n                server.send_message(msg)\n            return True\n        except Exception as e:\n            print(f\"\u767c\u9001\u90f5\u4ef6\u5931\u6557: {str(e)}\")\n            return False\n</code></pre> <p>\u5c0d\u61c9\u7684\u6574\u5408\u6e2c\u8a66\uff08\u4f7f\u7528 unittest.mock\uff09\uff1a</p> <pre><code># tests/services/test_email_service.py\nimport pytest\nfrom unittest.mock import patch, MagicMock\nfrom app.services.email_service import EmailService\n\n@pytest.fixture\ndef email_service():\n    return EmailService(\n        smtp_server=\"test-smtp.example.com\",\n        smtp_port=587,\n        username=\"test@example.com\",\n        password=\"testpassword\"\n    )\n\n@patch(\"app.services.email_service.smtplib.SMTP\")\ndef test_send_email_success(mock_smtp, email_service):\n    # Arrange\n    mock_server = MagicMock()\n    mock_smtp.return_value.__enter__.return_value = mock_server\n\n    to_email = \"recipient@example.com\"\n    subject = \"\u6e2c\u8a66\u90f5\u4ef6\"\n    content = \"\u9019\u662f\u4e00\u5c01\u6e2c\u8a66\u90f5\u4ef6\"\n\n    # Act\n    result = email_service.send_email(to_email, subject, content)\n\n    # Assert\n    assert result is True\n    mock_server.login.assert_called_once_with(\n        email_service.username, email_service.password\n    )\n    mock_server.send_message.assert_called_once()\n\n@patch(\"app.services.email_service.smtplib.SMTP\")\ndef test_send_email_failure(mock_smtp, email_service):\n    # Arrange\n    mock_smtp.return_value.__enter__.side_effect = Exception(\"\u9023\u63a5\u5931\u6557\")\n\n    # Act\n    result = email_service.send_email(\"test@example.com\", \"\u6e2c\u8a66\", \"\u5167\u5bb9\")\n\n    # Assert\n    assert result is False\n</code></pre>"},{"location":"testing/03-integration-testing/#_15","title":"\u6e2c\u8a66\u4e2d\u9593\u4ef6","text":"<p>\u6e2c\u8a66\u4e2d\u9593\u4ef6\u662f\u6574\u5408\u6e2c\u8a66\u7684\u91cd\u8981\u90e8\u5206\u3002</p>"},{"location":"testing/03-integration-testing/#_16","title":"\u6e2c\u8a66\u7b56\u7565","text":"\u7b56\u7565 \u8aaa\u660e \u7aef\u5230\u7aef\u6d41\u7a0b\u6e2c\u8a66 \u6e2c\u8a66\u8acb\u6c42\u901a\u904e\u6240\u6709\u4e2d\u9593\u4ef6\u7684\u5b8c\u6574\u6d41\u7a0b \u4f9d\u8cf4\u8986\u84cb \u5728\u6e2c\u8a66\u4e2d\u8986\u84cb\u7279\u5b9a\u4f9d\u8cf4 \u4e0a\u4e0b\u6587\u50b3\u905e \u6e2c\u8a66\u4e0a\u4e0b\u6587\u6578\u64da\u5728\u4e2d\u9593\u4ef6\u4e2d\u7684\u50b3\u905e \u932f\u8aa4\u8655\u7406 \u6e2c\u8a66\u4e2d\u9593\u4ef6\u7684\u932f\u8aa4\u8655\u7406\u908f\u8f2f"},{"location":"testing/03-integration-testing/#_17","title":"\u793a\u4f8b\uff1a\u7c21\u55ae\u932f\u8aa4\u8655\u7406\u4e2d\u9593\u4ef6\u6e2c\u8a66","text":"<p>\u5047\u8a2d\u6211\u5011\u6709\u4e00\u500b\u7c21\u55ae\u7684\u932f\u8aa4\u8655\u7406\u4e2d\u9593\u4ef6\uff1a</p> <pre><code># app/middleware/error_handler.py\nfrom fastapi import FastAPI, Request\nfrom fastapi.responses import JSONResponse\nfrom starlette.middleware.base import BaseHTTPMiddleware\n\nclass ErrorHandlerMiddleware(BaseHTTPMiddleware):\n    def __init__(self, app: FastAPI):\n        super().__init__(app)\n\n    async def dispatch(self, request: Request, call_next):\n        try:\n            return await call_next(request)\n        except Exception as e:\n            # \u5728\u5be6\u969b\u61c9\u7528\u4e2d\uff0c\u9019\u88e1\u53ef\u80fd\u6703\u8a18\u9304\u932f\u8aa4\n            return JSONResponse(\n                status_code=500,\n                content={\"detail\": \"\u767c\u751f\u5167\u90e8\u670d\u52d9\u5668\u932f\u8aa4\"}\n            )\n</code></pre> <p>\u5c0d\u61c9\u7684\u6574\u5408\u6e2c\u8a66\uff1a</p> <pre><code># tests/middleware/test_error_handler.py\nimport pytest\nfrom fastapi import FastAPI, HTTPException\nfrom fastapi.testclient import TestClient\nfrom app.middleware.error_handler import ErrorHandlerMiddleware\n\n@pytest.fixture\ndef app_with_middleware():\n    app = FastAPI()\n    app.add_middleware(ErrorHandlerMiddleware)\n\n    @app.get(\"/normal\")\n    def normal_route():\n        return {\"message\": \"\u6b63\u5e38\u8def\u7531\"}\n\n    @app.get(\"/http-error\")\n    def http_error_route():\n        raise HTTPException(status_code=404, detail=\"\u627e\u4e0d\u5230\u8cc7\u6e90\")\n\n    @app.get(\"/exception\")\n    def exception_route():\n        raise ValueError(\"\u6e2c\u8a66\u7570\u5e38\")\n\n    return app\n\n@pytest.fixture\ndef client(app_with_middleware):\n    return TestClient(app_with_middleware)\n\ndef test_normal_route(client):\n    response = client.get(\"/normal\")\n    assert response.status_code == 200\n    assert response.json() == {\"message\": \"\u6b63\u5e38\u8def\u7531\"}\n\ndef test_http_exception(client):\n    # HTTPException \u61c9\u8a72\u7531 FastAPI \u7684\u7570\u5e38\u8655\u7406\u5668\u8655\u7406\n    response = client.get(\"/http-error\")\n    assert response.status_code == 404\n    assert response.json() == {\"detail\": \"\u627e\u4e0d\u5230\u8cc7\u6e90\"}\n\ndef test_unhandled_exception(client):\n    # \u672a\u8655\u7406\u7684\u7570\u5e38\u61c9\u8a72\u7531\u6211\u5011\u7684\u4e2d\u9593\u4ef6\u6355\u7372\n    response = client.get(\"/exception\")\n    assert response.status_code == 500\n    assert response.json() == {\"detail\": \"\u767c\u751f\u5167\u90e8\u670d\u52d9\u5668\u932f\u8aa4\"}\n</code></pre>"},{"location":"testing/03-integration-testing/#_18","title":"\u6574\u5408\u6e2c\u8a66\u7684\u6700\u4f73\u5be6\u8e10","text":""},{"location":"testing/03-integration-testing/#_19","title":"\u6e2c\u8a66\u74b0\u5883\u9694\u96e2","text":"\u5be6\u8e10 \u8aaa\u660e \u5c08\u7528\u6e2c\u8a66\u6578\u64da\u5eab \u4f7f\u7528\u7368\u7acb\u7684\u6e2c\u8a66\u6578\u64da\u5eab\uff0c\u907f\u514d\u5f71\u97ff\u751f\u7522\u6578\u64da \u6e2c\u8a66\u5f8c\u6e05\u7406 \u6bcf\u500b\u6e2c\u8a66\u5f8c\u6062\u5fa9\u74b0\u5883\u5230\u521d\u59cb\u72c0\u614b \u74b0\u5883\u8b8a\u91cf\u63a7\u5236 \u4f7f\u7528\u74b0\u5883\u8b8a\u91cf\u5340\u5206\u6e2c\u8a66\u548c\u751f\u7522\u914d\u7f6e \u5bb9\u5668\u5316\u6e2c\u8a66 \u4f7f\u7528 Docker \u7b49\u5de5\u5177\u63d0\u4f9b\u9694\u96e2\u7684\u6e2c\u8a66\u74b0\u5883"},{"location":"testing/03-integration-testing/#_20","title":"\u6e2c\u8a66\u6578\u64da\u7ba1\u7406","text":"\u5be6\u8e10 \u8aaa\u660e \u6e2c\u8a66\u593e\u5177 \u4f7f\u7528 pytest fixtures \u5275\u5efa\u548c\u7ba1\u7406\u6e2c\u8a66\u6578\u64da \u5de5\u5ee0\u6a21\u5f0f \u4f7f\u7528\u5de5\u5ee0\u51fd\u6578\u6216\u985e\u751f\u6210\u6e2c\u8a66\u6578\u64da \u6578\u64da\u586b\u5145\u8173\u672c \u5275\u5efa\u53ef\u91cd\u7528\u7684\u6578\u64da\u586b\u5145\u8173\u672c \u53c3\u6578\u5316\u6e2c\u8a66 \u4f7f\u7528\u4e0d\u540c\u7684\u6578\u64da\u96c6\u6e2c\u8a66\u76f8\u540c\u7684\u529f\u80fd"},{"location":"testing/03-integration-testing/#_21","title":"\u4f9d\u8cf4\u7ba1\u7406","text":"\u5be6\u8e10 \u8aaa\u660e \u4f9d\u8cf4\u6ce8\u5165 \u4f7f\u7528\u4f9d\u8cf4\u6ce8\u5165\u4f7f\u7d44\u4ef6\u53ef\u6e2c\u8a66 \u4f9d\u8cf4\u8986\u84cb \u5728\u6e2c\u8a66\u4e2d\u8986\u84cb\u4f9d\u8cf4\u4ee5\u63a7\u5236\u884c\u70ba \u6a21\u64ec\u5916\u90e8\u670d\u52d9 \u6a21\u64ec\u5916\u90e8\u670d\u52d9\u4ee5\u907f\u514d\u5be6\u969b\u8abf\u7528 \u6e2c\u8a66\u66ff\u8eab \u4f7f\u7528 mock\u3001stub \u6216 fake \u5c0d\u8c61\u66ff\u4ee3\u771f\u5be6\u4f9d\u8cf4"},{"location":"testing/03-integration-testing/#_22","title":"\u7e3d\u7d50","text":"<p>\u6574\u5408\u6e2c\u8a66\u662f\u78ba\u4fdd FastAPI \u61c9\u7528\u7a0b\u5e8f\u5404\u7d44\u4ef6\u6b63\u78ba\u5354\u540c\u5de5\u4f5c\u7684\u95dc\u9375\u3002\u901a\u904e\u6e2c\u8a66 API \u7aef\u9ede\u3001\u4e2d\u9593\u4ef6\u3001\u6578\u64da\u5eab\u4ea4\u4e92\u548c\u5916\u90e8\u670d\u52d9\u96c6\u6210\uff0c\u4f60\u53ef\u4ee5\u5728\u65e9\u671f\u767c\u73fe\u7d44\u4ef6\u4e4b\u9593\u7684\u4ea4\u4e92\u554f\u984c\u3002</p> \u65b9\u9762 \u95dc\u9375\u9ede \u6e2c\u8a66\u7bc4\u570d \u5c08\u6ce8\u65bc\u6e2c\u8a66\u7d44\u4ef6\u4e4b\u9593\u7684\u4ea4\u4e92\u78ba\u4fdd\u5404\u5c64\u7d1a\u4e4b\u9593\u7684\u5354\u540c\u5de5\u4f5c \u6e2c\u8a66\u74b0\u5883 \u5275\u5efa\u9694\u96e2\u7684\u6e2c\u8a66\u74b0\u5883\u4f7f\u7528\u6e2c\u8a66\u66ff\u8eab\u66ff\u4ee3\u4e0d\u7a69\u5b9a\u7684\u4f9d\u8cf4 \u6578\u64da\u5eab\u6e2c\u8a66 \u4f7f\u7528\u5c08\u7528\u6e2c\u8a66\u6578\u64da\u5eab\u78ba\u4fdd\u6e2c\u8a66\u4e4b\u9593\u7684\u6578\u64da\u9694\u96e2 API \u6e2c\u8a66 \u4f7f\u7528 TestClient \u6e2c\u8a66\u5b8c\u6574\u7684\u8acb\u6c42/\u97ff\u61c9\u6d41\u7a0b\u6e2c\u8a66\u5404\u7a2e\u8f38\u5165\u60c5\u6cc1\u548c\u932f\u8aa4\u8655\u7406 \u5916\u90e8\u4f9d\u8cf4 \u6a21\u64ec\u5916\u90e8\u670d\u52d9\u4ee5\u78ba\u4fdd\u6e2c\u8a66\u7684\u53ef\u9760\u6027\u6e2c\u8a66\u8207\u5916\u90e8\u7cfb\u7d71\u7684\u96c6\u6210\u9ede <p>\u901a\u904e\u5408\u7406\u7684\u6574\u5408\u6e2c\u8a66\u7b56\u7565\uff0c\u4f60\u53ef\u4ee5\u5728\u4fdd\u6301\u6e2c\u8a66\u901f\u5ea6\u548c\u53ef\u7dad\u8b77\u6027\u7684\u540c\u6642\uff0c\u78ba\u4fdd\u61c9\u7528\u7a0b\u5e8f\u7684\u5404\u500b\u7d44\u4ef6\u80fd\u5920\u6b63\u78ba\u5730\u5354\u540c\u5de5\u4f5c\u3002\u6574\u5408\u6e2c\u8a66\u662f\u55ae\u5143\u6e2c\u8a66\u548c\u7aef\u5230\u7aef\u6e2c\u8a66\u4e4b\u9593\u7684\u91cd\u8981\u6a4b\u6a11\uff0c\u70ba\u61c9\u7528\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u5168\u9762\u7684\u8cea\u91cf\u4fdd\u969c\u3002</p>"},{"location":"testing/04-database-testing/","title":"\u6578\u64da\u5eab\u6e2c\u8a66","text":""},{"location":"testing/04-database-testing/#_2","title":"\u6578\u64da\u5eab\u6e2c\u8a66\u7684\u57fa\u672c\u6982\u5ff5","text":"<p>\u6578\u64da\u5eab\u6e2c\u8a66\u662f\u6574\u5408\u6e2c\u8a66\u7684\u91cd\u8981\u7d44\u6210\u90e8\u5206\uff0c\u5c08\u6ce8\u65bc\u9a57\u8b49\u61c9\u7528\u7a0b\u5e8f\u8207\u6578\u64da\u5eab\u4e4b\u9593\u7684\u4ea4\u4e92\u662f\u5426\u6b63\u78ba\u3002\u5728 FastAPI \u61c9\u7528\u4e2d\uff0c\u6578\u64da\u5eab\u6e2c\u8a66\u78ba\u4fdd ORM \u6a21\u578b\u3001\u5b58\u5132\u5eab\uff08repositories\uff09\u548c\u6578\u64da\u8a2a\u554f\u5c64\u80fd\u5920\u6b63\u78ba\u57f7\u884c CRUD\uff08\u5275\u5efa\u3001\u8b80\u53d6\u3001\u66f4\u65b0\u3001\u522a\u9664\uff09\u64cd\u4f5c\u3002</p> \u6982\u5ff5 \u8aaa\u660e \u6e2c\u8a66\u7bc4\u570d \u6578\u64da\u5eab\u6a21\u578b\u3001\u67e5\u8a62\u548c\u4e8b\u52d9\u64cd\u4f5c \u9694\u96e2\u7a0b\u5ea6 \u4f7f\u7528\u5c08\u7528\u6e2c\u8a66\u6578\u64da\u5eab\u6216\u5167\u5b58\u6578\u64da\u5eab \u57f7\u884c\u901f\u5ea6 \u4e2d\u7b49\uff0c\u53d7\u6578\u64da\u5eab\u6027\u80fd\u5f71\u97ff \u6e2c\u8a66\u6578\u64da \u9700\u8981\u6e96\u5099\u6e2c\u8a66\u6578\u64da\u548c\u6e05\u7406\u6a5f\u5236 \u4e8b\u52d9\u7ba1\u7406 \u4f7f\u7528\u4e8b\u52d9\u78ba\u4fdd\u6e2c\u8a66\u4e4b\u9593\u7684\u9694\u96e2"},{"location":"testing/04-database-testing/#_3","title":"\u6578\u64da\u5eab\u6e2c\u8a66\u7684\u6311\u6230\u8207\u89e3\u6c7a\u65b9\u6848","text":"\u6311\u6230 \u89e3\u6c7a\u65b9\u6848 \u6e2c\u8a66\u9694\u96e2 \u4f7f\u7528\u5c08\u7528\u6e2c\u8a66\u6578\u64da\u5eab\u6216\u5167\u5b58\u6578\u64da\u5eab \u6e2c\u8a66\u901f\u5ea6 \u4f7f\u7528\u5167\u5b58\u6578\u64da\u5eab\u52a0\u901f\u6e2c\u8a66\u57f7\u884c \u6578\u64da\u6e96\u5099 \u4f7f\u7528\u593e\u5177\uff08fixtures\uff09\u6216\u5de5\u5ee0\u6a21\u5f0f\u5275\u5efa\u6e2c\u8a66\u6578\u64da \u6578\u64da\u6e05\u7406 \u4f7f\u7528\u4e8b\u52d9\u56de\u6efe\u6216\u6e2c\u8a66\u5f8c\u6e05\u7406\u7b56\u7565 \u4e26\u884c\u57f7\u884c \u78ba\u4fdd\u6e2c\u8a66\u53ef\u4ee5\u4e26\u884c\u904b\u884c\u800c\u4e0d\u4e92\u76f8\u5e72\u64fe"},{"location":"testing/04-database-testing/#_4","title":"\u8a2d\u7f6e\u6e2c\u8a66\u6578\u64da\u5eab\u74b0\u5883","text":""},{"location":"testing/04-database-testing/#_5","title":"\u6e2c\u8a66\u6578\u64da\u5eab\u7b56\u7565","text":"<p>\u5728 FastAPI \u61c9\u7528\u4e2d\uff0c\u6709\u5e7e\u7a2e\u5e38\u7528\u7684\u6e2c\u8a66\u6578\u64da\u5eab\u7b56\u7565\uff1a</p> \u7b56\u7565 \u512a\u9ede \u7f3a\u9ede \u9069\u7528\u5834\u666f \u5c08\u7528\u6e2c\u8a66\u6578\u64da\u5eab \u8207\u751f\u7522\u74b0\u5883\u76f8\u4f3c\u53ef\u6e2c\u8a66\u6578\u64da\u5eab\u7279\u5b9a\u529f\u80fd \u8a2d\u7f6e\u8907\u96dc\u6e2c\u8a66\u8f03\u6162 \u5b8c\u6574\u7684\u96c6\u6210\u6e2c\u8a66\u6e2c\u8a66\u6578\u64da\u5eab\u7279\u5b9a\u529f\u80fd \u5167\u5b58\u6578\u64da\u5eab \u901f\u5ea6\u5feb\u7121\u9700\u5916\u90e8\u4f9d\u8cf4 \u53ef\u80fd\u7f3a\u5c11\u67d0\u4e9b\u529f\u80fd\u8207\u751f\u7522\u74b0\u5883\u5dee\u7570 \u55ae\u5143\u6e2c\u8a66\u5feb\u901f\u6574\u5408\u6e2c\u8a66 \u6e2c\u8a66\u5bb9\u5668 \u9694\u96e2\u6027\u597d\u74b0\u5883\u4e00\u81f4\u6027 \u9700\u8981 Docker\u8cc7\u6e90\u6d88\u8017\u8f03\u5927 CI/CD \u74b0\u5883\u5b8c\u6574\u7684\u96c6\u6210\u6e2c\u8a66"},{"location":"testing/04-database-testing/#sqlite","title":"\u4f7f\u7528 SQLite \u5167\u5b58\u6578\u64da\u5eab\u9032\u884c\u6e2c\u8a66","text":"<p>SQLite \u5167\u5b58\u6578\u64da\u5eab\u662f\u5feb\u901f\u6e2c\u8a66\u7684\u7406\u60f3\u9078\u64c7\uff1a</p> <pre><code># tests/conftest.py\nimport pytest\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\n\nfrom app.database import Base\nfrom app.main import app\nfrom app.dependencies import get_db\n\n# \u5275\u5efa\u5167\u5b58\u6578\u64da\u5eab\u5f15\u64ce\nTEST_DATABASE_URL = \"sqlite:///:memory:\"\nengine = create_engine(TEST_DATABASE_URL, connect_args={\"check_same_thread\": False})\n\n# \u5275\u5efa\u6e2c\u8a66\u6703\u8a71\u5de5\u5ee0\nTestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\n@pytest.fixture(scope=\"function\")\ndef db():\n    # \u5275\u5efa\u6240\u6709\u8868\n    Base.metadata.create_all(bind=engine)\n\n    # \u5275\u5efa\u6578\u64da\u5eab\u6703\u8a71\n    db = TestingSessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n    # \u6e05\u7406 - \u522a\u9664\u6240\u6709\u8868\n    Base.metadata.drop_all(bind=engine)\n\n@pytest.fixture(scope=\"function\")\ndef client(db):\n    # \u8986\u84cb\u4f9d\u8cf4\n    def override_get_db():\n        try:\n            yield db\n        finally:\n            pass\n\n    app.dependency_overrides[get_db] = override_get_db\n\n    from fastapi.testclient import TestClient\n    with TestClient(app) as c:\n        yield c\n\n    # \u6e05\u7406\u4f9d\u8cf4\u8986\u84cb\n    app.dependency_overrides = {}\n</code></pre>"},{"location":"testing/04-database-testing/#_6","title":"\u6e2c\u8a66\u6578\u64da\u6e96\u5099","text":""},{"location":"testing/04-database-testing/#_7","title":"\u4f7f\u7528\u593e\u5177\u5275\u5efa\u6e2c\u8a66\u6578\u64da","text":"<p>\u6e2c\u8a66\u593e\u5177\uff08fixtures\uff09\u662f\u6e96\u5099\u6e2c\u8a66\u6578\u64da\u7684\u7406\u60f3\u65b9\u5f0f\uff1a</p> <pre><code># tests/conftest.py\nimport pytest\nfrom app.models import User, Item\nfrom app.schemas import UserCreate, ItemCreate\nfrom app.services.user_service import UserService\nfrom app.services.item_service import ItemService\n\n@pytest.fixture\ndef user_service(db):\n    return UserService(db)\n\n@pytest.fixture\ndef item_service(db):\n    return ItemService(db)\n\n@pytest.fixture\ndef test_user(user_service):\n    user_data = UserCreate(\n        username=\"testuser\",\n        email=\"test@example.com\",\n        password=\"password123\"\n    )\n    user = user_service.create_user(user_data)\n    return user\n\n@pytest.fixture\ndef test_items(item_service, test_user):\n    items = []\n    # \u5275\u5efa\u6e2c\u8a66\u5546\u54c1\n    for i in range(3):\n        item_data = ItemCreate(\n            name=f\"\u6e2c\u8a66\u5546\u54c1 {i}\",\n            description=f\"\u9019\u662f\u6e2c\u8a66\u5546\u54c1 {i} \u7684\u63cf\u8ff0\",\n            price=10.0 * (i + 1),\n            owner_id=test_user.id\n        )\n        items.append(item_service.create_item(item_data))\n    return items\n</code></pre>"},{"location":"testing/04-database-testing/#_8","title":"\u6e2c\u8a66\u6578\u64da\u5eab\u6a21\u578b","text":""},{"location":"testing/04-database-testing/#_9","title":"\u6e2c\u8a66\u6a21\u578b\u95dc\u4fc2\u548c\u7d04\u675f","text":"<pre><code># tests/models/test_models.py\nimport pytest\nfrom sqlalchemy.exc import IntegrityError\nfrom app.models import User, Item\n\ndef test_user_model(db):\n    # \u5275\u5efa\u7528\u6236\n    user = User(username=\"testuser\", email=\"test@example.com\", hashed_password=\"hashedpw\")\n    db.add(user)\n    db.commit()\n\n    # \u9a57\u8b49\u7528\u6236\u88ab\u6b63\u78ba\u5275\u5efa\n    assert user.id is not None\n    assert user.username == \"testuser\"\n    assert user.email == \"test@example.com\"\n\n    # \u6e2c\u8a66\u552f\u4e00\u6027\u7d04\u675f\n    duplicate_user = User(username=\"testuser\", email=\"test@example.com\", hashed_password=\"hashedpw\")\n    db.add(duplicate_user)\n    with pytest.raises(IntegrityError):\n        db.commit()\n    db.rollback()\n\ndef test_item_model(db):\n    # \u5275\u5efa\u7528\u6236\u548c\u5546\u54c1\n    user = User(username=\"itemowner\", email=\"owner@example.com\", hashed_password=\"hashedpw\")\n    db.add(user)\n    db.commit()\n\n    item = Item(name=\"\u6e2c\u8a66\u5546\u54c1\", price=99.99, owner_id=user.id)\n    db.add(item)\n    db.commit()\n\n    # \u9a57\u8b49\u5546\u54c1\u88ab\u6b63\u78ba\u5275\u5efa\n    assert item.id is not None\n    assert item.name == \"\u6e2c\u8a66\u5546\u54c1\"\n    assert item.price == 99.99\n    assert item.owner_id == user.id\n\ndef test_user_items_relationship(db):\n    # \u5275\u5efa\u7528\u6236\n    user = User(username=\"relationuser\", email=\"relation@example.com\", hashed_password=\"hashedpw\")\n    db.add(user)\n    db.commit()\n\n    # \u5275\u5efa\u591a\u500b\u5546\u54c1\n    items = [\n        Item(name=\"\u5546\u54c11\", price=10.0, owner_id=user.id),\n        Item(name=\"\u5546\u54c12\", price=20.0, owner_id=user.id)\n    ]\n    db.add_all(items)\n    db.commit()\n\n    # \u9a57\u8b49\u95dc\u4fc2\n    db.refresh(user)\n    assert len(user.items) == 2\n    assert user.items[0].name == \"\u5546\u54c11\"\n    assert user.items[1].name == \"\u5546\u54c12\"\n\n    # \u9a57\u8b49\u53cd\u5411\u95dc\u4fc2\n    assert items[0].owner.username == \"relationuser\"\n</code></pre>"},{"location":"testing/04-database-testing/#repository","title":"\u6e2c\u8a66\u5b58\u5132\u5eab\uff08Repository\uff09","text":"<p>\u5b58\u5132\u5eab\u6a21\u5f0f\u662f\u4e00\u7a2e\u5e38\u898b\u7684\u6578\u64da\u8a2a\u554f\u6a21\u5f0f\uff0c\u5b83\u5c01\u88dd\u4e86\u6578\u64da\u5eab\u64cd\u4f5c\u908f\u8f2f\u3002</p>"},{"location":"testing/04-database-testing/#_10","title":"\u57fa\u672c\u7684\u5b58\u5132\u5eab\u6e2c\u8a66","text":"<pre><code># tests/repositories/test_user_repository.py\nimport pytest\nfrom app.repositories.user_repository import UserRepository\nfrom app.models import User\n\n@pytest.fixture\ndef user_repo(db):\n    return UserRepository(db)\n\ndef test_create_user(user_repo):\n    # \u5275\u5efa\u7528\u6236\n    user_data = {\n        \"username\": \"repouser\",\n        \"email\": \"repo@example.com\",\n        \"hashed_password\": \"hashedpassword\"\n    }\n    user = user_repo.create(user_data)\n\n    # \u9a57\u8b49\u7528\u6236\u88ab\u5275\u5efa\n    assert user.id is not None\n    assert user.username == user_data[\"username\"]\n    assert user.email == user_data[\"email\"]\n\ndef test_get_user_by_id(user_repo):\n    # \u5275\u5efa\u7528\u6236\n    user_data = {\n        \"username\": \"getuser\",\n        \"email\": \"get@example.com\",\n        \"hashed_password\": \"hashedpassword\"\n    }\n    created_user = user_repo.create(user_data)\n\n    # \u7372\u53d6\u7528\u6236\n    user = user_repo.get_by_id(created_user.id)\n\n    # \u9a57\u8b49\n    assert user is not None\n    assert user.id == created_user.id\n    assert user.username == user_data[\"username\"]\n\ndef test_update_user(user_repo):\n    # \u5275\u5efa\u7528\u6236\n    user_data = {\n        \"username\": \"updateuser\",\n        \"email\": \"update@example.com\",\n        \"hashed_password\": \"hashedpassword\"\n    }\n    user = user_repo.create(user_data)\n\n    # \u66f4\u65b0\u7528\u6236\n    update_data = {\n        \"username\": \"updateduser\"\n    }\n    updated_user = user_repo.update(user.id, update_data)\n\n    # \u9a57\u8b49\n    assert updated_user.id == user.id\n    assert updated_user.username == update_data[\"username\"]\n    assert updated_user.email == user_data[\"email\"]  # \u672a\u66f4\u65b0\u7684\u5b57\u6bb5\u4fdd\u6301\u4e0d\u8b8a\n\ndef test_delete_user(user_repo):\n    # \u5275\u5efa\u7528\u6236\n    user_data = {\n        \"username\": \"deleteuser\",\n        \"email\": \"delete@example.com\",\n        \"hashed_password\": \"hashedpassword\"\n    }\n    user = user_repo.create(user_data)\n\n    # \u522a\u9664\u7528\u6236\n    result = user_repo.delete(user.id)\n\n    # \u9a57\u8b49\n    assert result is True\n    assert user_repo.get_by_id(user.id) is None\n</code></pre>"},{"location":"testing/04-database-testing/#_11","title":"\u6e2c\u8a66\u8907\u96dc\u67e5\u8a62","text":"<p>\u5c0d\u65bc\u8907\u96dc\u7684\u6578\u64da\u5eab\u67e5\u8a62\uff0c\u9700\u8981\u6e96\u5099\u66f4\u8907\u96dc\u7684\u6e2c\u8a66\u6578\u64da\u548c\u66f4\u5168\u9762\u7684\u9a57\u8b49\u3002</p>"},{"location":"testing/04-database-testing/#_12","title":"\u6e2c\u8a66\u5206\u9801\u548c\u904e\u6ffe","text":"<pre><code># tests/repositories/test_item_repository.py\nimport pytest\nfrom app.repositories.item_repository import ItemRepository\nfrom app.repositories.user_repository import UserRepository\n\n@pytest.fixture\ndef repos(db):\n    return {\n        \"user\": UserRepository(db),\n        \"item\": ItemRepository(db)\n    }\n\n@pytest.fixture\ndef test_data(repos):\n    # \u5275\u5efa\u6e2c\u8a66\u7528\u6236\n    user1 = repos[\"user\"].create({\n        \"username\": \"user1\",\n        \"email\": \"user1@example.com\",\n        \"hashed_password\": \"hashedpw\"\n    })\n\n    # \u5275\u5efa\u6e2c\u8a66\u5546\u54c1\n    items = []\n    # \u7528\u62361\u7684\u5546\u54c1\n    for i in range(5):\n        items.append(repos[\"item\"].create({\n            \"name\": f\"\u5546\u54c1{i}\",\n            \"price\": 10.0 * (i + 1),\n            \"category\": \"\u96fb\u5b50\u7522\u54c1\" if i % 2 == 0 else \"\u5bb6\u5c45\",\n            \"owner_id\": user1.id\n        }))\n\n    return {\"user\": user1, \"items\": items}\n\ndef test_get_items_with_pagination(repos, test_data):\n    # \u6e2c\u8a66\u5206\u9801\n    items_page1 = repos[\"item\"].get_all(skip=0, limit=3)\n    items_page2 = repos[\"item\"].get_all(skip=3, limit=3)\n\n    assert len(items_page1) == 3\n    assert len(items_page2) == 2  # \u7e3d\u51715\u500b\u5546\u54c1\uff0c\u7b2c\u4e8c\u9801\u53ea\u67092\u500b\n\n    # \u9a57\u8b49\u5206\u9801\u6578\u64da\u4e0d\u91cd\u8907\n    page1_ids = [item.id for item in items_page1]\n    page2_ids = [item.id for item in items_page2]\n    assert not any(item_id in page1_ids for item_id in page2_ids)\n\ndef test_get_items_by_category(repos, test_data):\n    # \u7372\u53d6\u96fb\u5b50\u7522\u54c1\u985e\u5225\u7684\u5546\u54c1\n    electronics = repos[\"item\"].get_by_category(\"\u96fb\u5b50\u7522\u54c1\")\n    assert len(electronics) == 3\n    assert all(item.category == \"\u96fb\u5b50\u7522\u54c1\" for item in electronics)\n\n    # \u7372\u53d6\u5bb6\u5c45\u985e\u5225\u7684\u5546\u54c1\n    home_items = repos[\"item\"].get_by_category(\"\u5bb6\u5c45\")\n    assert len(home_items) == 2\n    assert all(item.category == \"\u5bb6\u5c45\" for item in home_items)\n</code></pre>"},{"location":"testing/04-database-testing/#_13","title":"\u6e2c\u8a66\u4e8b\u52d9\u548c\u4e26\u767c","text":"<p>\u6e2c\u8a66\u6578\u64da\u5eab\u4e8b\u52d9\u548c\u4e26\u767c\u64cd\u4f5c\u662f\u78ba\u4fdd\u6578\u64da\u4e00\u81f4\u6027\u7684\u91cd\u8981\u90e8\u5206\u3002</p>"},{"location":"testing/04-database-testing/#_14","title":"\u6e2c\u8a66\u4e8b\u52d9\u64cd\u4f5c","text":"<pre><code># tests/repositories/test_transaction.py\nimport pytest\nfrom app.repositories.order_repository import OrderRepository\nfrom app.models import User, Item, Order\n\n@pytest.fixture\ndef order_repo(db):\n    return OrderRepository(db)\n\n@pytest.fixture\ndef setup_order_data(db):\n    # \u5275\u5efa\u7528\u6236\n    buyer = User(username=\"buyer\", email=\"buyer@example.com\", hashed_password=\"hashedpw\")\n    seller = User(username=\"seller\", email=\"seller@example.com\", hashed_password=\"hashedpw\")\n    db.add_all([buyer, seller])\n    db.commit()\n\n    # \u5275\u5efa\u5546\u54c1\n    item = Item(\n        name=\"\u6e2c\u8a66\u5546\u54c1\",\n        price=100.0,\n        inventory=5,\n        owner_id=seller.id\n    )\n    db.add(item)\n    db.commit()\n\n    return {\"buyer\": buyer, \"seller\": seller, \"item\": item}\n\ndef test_create_order_success(order_repo, setup_order_data):\n    buyer = setup_order_data[\"buyer\"]\n    item = setup_order_data[\"item\"]\n\n    # \u57f7\u884c\u8a02\u55ae\u5275\u5efa\n    order = order_repo.create_order(\n        buyer_id=buyer.id,\n        item_id=item.id,\n        quantity=2,\n        amount=item.price * 2\n    )\n\n    # \u9a57\u8b49\u8a02\u55ae\u8a18\u9304\n    assert order.id is not None\n    assert order.buyer_id == buyer.id\n    assert order.item_id == item.id\n    assert order.quantity == 2\n    assert order.amount == 200.0\n    assert order.status == \"completed\"\n\n    # \u9a57\u8b49\u5eab\u5b58\u66f4\u65b0\n    assert item.inventory == 3  # \u539f\u5eab\u5b585\uff0c\u8cfc\u8cb72\u500b\n\ndef test_create_order_insufficient_inventory(order_repo, setup_order_data):\n    buyer = setup_order_data[\"buyer\"]\n    item = setup_order_data[\"item\"]\n\n    # \u5617\u8a66\u8cfc\u8cb7\u8d85\u904e\u5eab\u5b58\u7684\u6578\u91cf\n    with pytest.raises(ValueError) as exc_info:\n        order_repo.create_order(\n            buyer_id=buyer.id,\n            item_id=item.id,\n            quantity=10,  # \u5eab\u5b58\u53ea\u67095\u500b\n            amount=item.price * 10\n        )\n\n    assert \"\u5eab\u5b58\u4e0d\u8db3\" in str(exc_info.value)\n\n    # \u9a57\u8b49\u5eab\u5b58\u672a\u8b8a\u5316\n    assert item.inventory == 5\n</code></pre>"},{"location":"testing/04-database-testing/#_15","title":"\u6e2c\u8a66\u6578\u64da\u5eab\u9077\u79fb","text":"<p>\u6e2c\u8a66\u6578\u64da\u5eab\u9077\u79fb\u78ba\u4fdd\u6a21\u5f0f\u8b8a\u66f4\u4e0d\u6703\u7834\u58de\u73fe\u6709\u529f\u80fd\u3002</p>"},{"location":"testing/04-database-testing/#_16","title":"\u7c21\u55ae\u7684\u9077\u79fb\u6e2c\u8a66","text":"<pre><code># tests/migrations/test_migrations.py\nimport subprocess\nimport pytest\nfrom sqlalchemy import inspect\nfrom app.database import engine\n\ndef test_migrations_apply_successfully():\n    # \u904b\u884c\u9077\u79fb\u547d\u4ee4\n    result = subprocess.run(\n        [\"alembic\", \"upgrade\", \"head\"],\n        capture_output=True,\n        text=True\n    )\n\n    # \u6aa2\u67e5\u547d\u4ee4\u662f\u5426\u6210\u529f\u57f7\u884c\n    assert result.returncode == 0, f\"\u9077\u79fb\u5931\u6557: {result.stderr}\"\n\ndef test_table_structure():\n    # \u7372\u53d6\u6aa2\u67e5\u5668\n    inspector = inspect(engine)\n\n    # \u6aa2\u67e5\u8868\u662f\u5426\u5b58\u5728\n    tables = inspector.get_table_names()\n    assert \"users\" in tables\n    assert \"items\" in tables\n\n    # \u6aa2\u67e5\u5217\n    user_columns = {col[\"name\"] for col in inspector.get_columns(\"users\")}\n    assert \"id\" in user_columns\n    assert \"username\" in user_columns\n    assert \"email\" in user_columns\n    assert \"hashed_password\" in user_columns\n</code></pre>"},{"location":"testing/04-database-testing/#_17","title":"\u6e2c\u8a66\u6578\u64da\u5eab\u6027\u80fd","text":"<p>\u5c0d\u65bc\u6027\u80fd\u95dc\u9375\u7684\u61c9\u7528\uff0c\u6e2c\u8a66\u6578\u64da\u5eab\u67e5\u8a62\u6027\u80fd\u662f\u5f88\u91cd\u8981\u7684\u3002</p>"},{"location":"testing/04-database-testing/#_18","title":"\u7c21\u55ae\u7684\u6027\u80fd\u6e2c\u8a66","text":"<pre><code># tests/performance/test_db_performance.py\nimport time\nimport pytest\nfrom app.repositories.item_repository import ItemRepository\nfrom app.models import User, Item\n\n@pytest.fixture\ndef setup_performance_data(db):\n    # \u5275\u5efa\u6e2c\u8a66\u7528\u6236\n    user = User(username=\"perfuser\", email=\"perf@example.com\", hashed_password=\"hashedpw\")\n    db.add(user)\n    db.commit()\n\n    # \u5275\u5efa\u6e2c\u8a66\u5546\u54c1\n    items = []\n    for i in range(50):\n        item = Item(\n            name=f\"\u6027\u80fd\u6e2c\u8a66\u5546\u54c1 {i}\",\n            price=10.0 * (i % 10 + 1),\n            category=\"\u96fb\u5b50\u7522\u54c1\" if i % 3 == 0 else \"\u5bb6\u5c45\" if i % 3 == 1 else \"\u8fa6\u516c\u7528\u54c1\",\n            owner_id=user.id\n        )\n        items.append(item)\n\n    db.add_all(items)\n    db.commit()\n\n    return {\"user\": user, \"items\": items}\n\n@pytest.fixture\ndef item_repo(db):\n    return ItemRepository(db)\n\ndef test_get_all_items_performance(item_repo, setup_performance_data):\n    # \u6e2c\u91cf\u7372\u53d6\u6240\u6709\u5546\u54c1\u7684\u6027\u80fd\n    start_time = time.time()\n    items = item_repo.get_all(limit=100)\n    end_time = time.time()\n\n    duration = end_time - start_time\n    assert len(items) &gt;= 50\n    assert duration &lt; 0.1  # \u671f\u671b\u67e5\u8a62\u6642\u9593\u5c0f\u65bc 100ms\n\ndef test_filter_by_category_performance(item_repo, setup_performance_data):\n    # \u6e2c\u91cf\u6309\u985e\u5225\u904e\u6ffe\u7684\u6027\u80fd\n    start_time = time.time()\n    items = item_repo.get_by_category(\"\u96fb\u5b50\u7522\u54c1\")\n    end_time = time.time()\n\n    duration = end_time - start_time\n    assert len(items) &gt; 0\n    assert duration &lt; 0.05  # \u671f\u671b\u67e5\u8a62\u6642\u9593\u5c0f\u65bc 50ms\n</code></pre>"},{"location":"testing/04-database-testing/#_19","title":"\u6578\u64da\u5eab\u6e2c\u8a66\u7684\u6700\u4f73\u5be6\u8e10","text":""},{"location":"testing/04-database-testing/#_20","title":"\u6e2c\u8a66\u9694\u96e2","text":"\u5be6\u8e10 \u8aaa\u660e \u7368\u7acb\u6e2c\u8a66\u6578\u64da\u5eab \u4f7f\u7528\u5c08\u7528\u7684\u6e2c\u8a66\u6578\u64da\u5eab\uff0c\u907f\u514d\u5e72\u64fe\u751f\u7522\u6578\u64da \u6e2c\u8a66\u593e\u5177\u4f5c\u7528\u57df \u5408\u7406\u8a2d\u7f6e\u593e\u5177\u4f5c\u7528\u57df\uff0c\u5e73\u8861\u6027\u80fd\u548c\u9694\u96e2\u6027 \u4e8b\u52d9\u56de\u6efe \u4f7f\u7528\u4e8b\u52d9\u78ba\u4fdd\u6e2c\u8a66\u4e4b\u9593\u7684\u9694\u96e2 \u6e05\u7406\u6e2c\u8a66\u6578\u64da \u6e2c\u8a66\u5f8c\u6e05\u7406\u5275\u5efa\u7684\u6578\u64da\uff0c\u907f\u514d\u6578\u64da\u7a4d\u7d2f"},{"location":"testing/04-database-testing/#_21","title":"\u6e2c\u8a66\u6578\u64da\u7ba1\u7406","text":"\u5be6\u8e10 \u8aaa\u660e \u5de5\u5ee0\u6a21\u5f0f \u4f7f\u7528\u5de5\u5ee0\u6a21\u5f0f\u751f\u6210\u6e2c\u8a66\u6578\u64da\uff0c\u63d0\u9ad8\u53ef\u7dad\u8b77\u6027 \u53c3\u6578\u5316\u6e2c\u8a66 \u4f7f\u7528\u4e0d\u540c\u7684\u6578\u64da\u96c6\u6e2c\u8a66\u76f8\u540c\u7684\u529f\u80fd \u6e2c\u8a66\u6578\u64da\u751f\u6210\u5668 \u4f7f\u7528\u5de5\u5177\u81ea\u52d5\u751f\u6210\u5927\u91cf\u6e2c\u8a66\u6578\u64da \u771f\u5be6\u6578\u64da\u5b50\u96c6 \u5728\u67d0\u4e9b\u60c5\u6cc1\u4e0b\u4f7f\u7528\u751f\u7522\u6578\u64da\u7684\u5b50\u96c6\u9032\u884c\u6e2c\u8a66"},{"location":"testing/04-database-testing/#_22","title":"\u6578\u64da\u5eab\u6027\u80fd\u6e2c\u8a66","text":"\u5be6\u8e10 \u8aaa\u660e \u67e5\u8a62\u6027\u80fd\u57fa\u6e96 \u8a2d\u7f6e\u67e5\u8a62\u6027\u80fd\u7684\u57fa\u6e96\u548c\u95be\u503c \u7d22\u5f15\u6e2c\u8a66 \u6e2c\u8a66\u7d22\u5f15\u5c0d\u67e5\u8a62\u6027\u80fd\u7684\u5f71\u97ff \u5927\u6578\u64da\u96c6\u6e2c\u8a66 \u4f7f\u7528\u5927\u6578\u64da\u96c6\u6e2c\u8a66\u7cfb\u7d71\u5728\u8ca0\u8f09\u4e0b\u7684\u6027\u80fd \u6162\u67e5\u8a62\u8b58\u5225 \u8b58\u5225\u4e26\u512a\u5316\u6162\u67e5\u8a62"},{"location":"testing/04-database-testing/#_23","title":"\u5e38\u898b\u7684\u6578\u64da\u5eab\u6e2c\u8a66\u6a21\u5f0f","text":""},{"location":"testing/04-database-testing/#_24","title":"\u5b58\u5132\u5eab\u6a21\u5f0f\u6e2c\u8a66","text":"<p>\u5b58\u5132\u5eab\u6a21\u5f0f\u662f\u4e00\u7a2e\u5e38\u898b\u7684\u6578\u64da\u8a2a\u554f\u6a21\u5f0f\uff0c\u5b83\u5c01\u88dd\u4e86\u6578\u64da\u5eab\u64cd\u4f5c\u908f\u8f2f\u3002\u6e2c\u8a66\u5b58\u5132\u5eab\u78ba\u4fdd\u6578\u64da\u8a2a\u554f\u5c64\u6b63\u78ba\u5de5\u4f5c\u3002</p> <pre><code># app/repositories/base_repository.py\nclass BaseRepository:\n    def __init__(self, db):\n        self.db = db\n\n    def get_by_id(self, model, id):\n        return self.db.query(model).filter(model.id == id).first()\n\n    def get_all(self, model, skip=0, limit=100):\n        return self.db.query(model).offset(skip).limit(limit).all()\n\n    def create(self, model, data):\n        instance = model(**data)\n        self.db.add(instance)\n        self.db.commit()\n        self.db.refresh(instance)\n        return instance\n\n    def update(self, instance, data):\n        for key, value in data.items():\n            setattr(instance, key, value)\n        self.db.commit()\n        self.db.refresh(instance)\n        return instance\n\n    def delete(self, instance):\n        self.db.delete(instance)\n        self.db.commit()\n        return True\n</code></pre> <p>\u6e2c\u8a66\u9019\u500b\u57fa\u672c\u5b58\u5132\u5eab\uff1a</p> <pre><code># tests/repositories/test_base_repository.py\nimport pytest\nfrom app.repositories.base_repository import BaseRepository\nfrom app.models import User\n\n@pytest.fixture\ndef base_repo(db):\n    return BaseRepository(db)\n\ndef test_create_and_get_by_id(base_repo):\n    # \u5275\u5efa\u7528\u6236\n    user_data = {\n        \"username\": \"baseuser\",\n        \"email\": \"base@example.com\",\n        \"hashed_password\": \"hashedpw\"\n    }\n    user = base_repo.create(User, user_data)\n\n    # \u7372\u53d6\u7528\u6236\n    retrieved = base_repo.get_by_id(User, user.id)\n\n    # \u9a57\u8b49\n    assert retrieved.id == user.id\n    assert retrieved.username == user_data[\"username\"]\n    assert retrieved.email == user_data[\"email\"]\n\ndef test_get_all(base_repo):\n    # \u5275\u5efa\u591a\u500b\u7528\u6236\n    users_data = [\n        {\"username\": \"user1\", \"email\": \"user1@example.com\", \"hashed_password\": \"pw1\"},\n        {\"username\": \"user2\", \"email\": \"user2@example.com\", \"hashed_password\": \"pw2\"},\n        {\"username\": \"user3\", \"email\": \"user3@example.com\", \"hashed_password\": \"pw3\"}\n    ]\n\n    for data in users_data:\n        base_repo.create(User, data)\n\n    # \u7372\u53d6\u6240\u6709\u7528\u6236\n    users = base_repo.get_all(User)\n\n    # \u9a57\u8b49\n    assert len(users) &gt;= 3\n    usernames = [user.username for user in users]\n    assert \"user1\" in usernames\n    assert \"user2\" in usernames\n    assert \"user3\" in usernames\n\ndef test_update(base_repo):\n    # \u5275\u5efa\u7528\u6236\n    user_data = {\n        \"username\": \"updateuser\",\n        \"email\": \"update@example.com\",\n        \"hashed_password\": \"hashedpw\"\n    }\n    user = base_repo.create(User, user_data)\n\n    # \u66f4\u65b0\u7528\u6236\n    updated = base_repo.update(user, {\"username\": \"updated\"})\n\n    # \u9a57\u8b49\n    assert updated.id == user.id\n    assert updated.username == \"updated\"\n    assert updated.email == user_data[\"email\"]  # \u672a\u66f4\u65b0\u7684\u5b57\u6bb5\u4fdd\u6301\u4e0d\u8b8a\n\ndef test_delete(base_repo):\n    # \u5275\u5efa\u7528\u6236\n    user_data = {\n        \"username\": \"deleteuser\",\n        \"email\": \"delete@example.com\",\n        \"hashed_password\": \"hashedpw\"\n    }\n    user = base_repo.create(User, user_data)\n\n    # \u522a\u9664\u7528\u6236\n    result = base_repo.delete(user)\n\n    # \u9a57\u8b49\n    assert result is True\n    assert base_repo.get_by_id(User, user.id) is None\n</code></pre>"},{"location":"testing/04-database-testing/#_25","title":"\u7e3d\u7d50","text":"<p>\u6578\u64da\u5eab\u6e2c\u8a66\u662f\u78ba\u4fdd\u61c9\u7528\u7a0b\u5e8f\u6578\u64da\u5c64\u6b63\u78ba\u6027\u548c\u6027\u80fd\u7684\u95dc\u9375\u3002\u901a\u904e\u6e2c\u8a66\u6578\u64da\u5eab\u6a21\u578b\u3001\u95dc\u4fc2\u3001\u5b58\u5132\u5eab\u548c\u67e5\u8a62\u6027\u80fd\uff0c\u4f60\u53ef\u4ee5\u78ba\u4fdd\u61c9\u7528\u7a0b\u5e8f\u7684\u6578\u64da\u8a2a\u554f\u5c64\u6b63\u78ba\u5de5\u4f5c\u3002</p> \u65b9\u9762 \u95dc\u9375\u9ede \u6e2c\u8a66\u74b0\u5883 \u4f7f\u7528\u5c08\u7528\u6e2c\u8a66\u6578\u64da\u5eab\u6216\u5167\u5b58\u6578\u64da\u5eab\u78ba\u4fdd\u6e2c\u8a66\u4e4b\u9593\u7684\u9694\u96e2 \u6e2c\u8a66\u6578\u64da \u4f7f\u7528\u593e\u5177\u6216\u5de5\u5ee0\u6a21\u5f0f\u5275\u5efa\u6e2c\u8a66\u6578\u64da\u78ba\u4fdd\u6578\u64da\u7684\u4e00\u81f4\u6027\u548c\u53ef\u91cd\u8907\u6027 \u6a21\u578b\u6e2c\u8a66 \u6e2c\u8a66\u6a21\u578b\u95dc\u4fc2\u548c\u7d04\u675f\u78ba\u4fdd\u6a21\u578b\u884c\u70ba\u7b26\u5408\u9810\u671f \u5b58\u5132\u5eab\u6e2c\u8a66 \u6e2c\u8a66 CRUD \u64cd\u4f5c\u548c\u8907\u96dc\u67e5\u8a62\u78ba\u4fdd\u6578\u64da\u8a2a\u554f\u5c64\u6b63\u78ba\u5de5\u4f5c \u6027\u80fd\u6e2c\u8a66 \u6e2c\u8a66\u67e5\u8a62\u6027\u80fd\u8b58\u5225\u4e26\u512a\u5316\u6162\u67e5\u8a62 <p>\u901a\u904e\u5168\u9762\u7684\u6578\u64da\u5eab\u6e2c\u8a66\uff0c\u4f60\u53ef\u4ee5\u78ba\u4fdd\u61c9\u7528\u7a0b\u5e8f\u7684\u6578\u64da\u5c64\u7a69\u5b9a\u53ef\u9760\uff0c\u70ba\u6574\u500b\u61c9\u7528\u7a0b\u5e8f\u63d0\u4f9b\u5805\u5be6\u7684\u57fa\u790e\u3002</p>"},{"location":"testing/05-asynchronous-testing/","title":"\u975e\u540c\u6b65\u6e2c\u8a66","text":""},{"location":"testing/05-asynchronous-testing/#_2","title":"\u975e\u540c\u6b65\u6e2c\u8a66\u7684\u57fa\u672c\u6982\u5ff5","text":"<p>FastAPI \u662f\u57fa\u65bc ASGI \u7684\u6846\u67b6\uff0c\u5b83\u7684\u6838\u5fc3\u662f\u975e\u540c\u6b65\uff08async/await\uff09\u7de8\u7a0b\u6a21\u578b\u3002\u6e2c\u8a66\u975e\u540c\u6b65\u4ee3\u78bc\u9700\u8981\u7279\u6b8a\u7684\u6280\u8853\u548c\u5de5\u5177\uff0c\u4ee5\u78ba\u4fdd\u7570\u6b65\u64cd\u4f5c\u80fd\u5920\u6b63\u78ba\u57f7\u884c\u548c\u9a57\u8b49\u3002</p> \u6982\u5ff5 \u8aaa\u660e \u975e\u540c\u6b65\u51fd\u6578 \u4f7f\u7528 <code>async def</code> \u5b9a\u7fa9\u7684\u51fd\u6578\uff0c\u53ef\u4ee5\u4f7f\u7528 <code>await</code> \u66ab\u505c\u57f7\u884c \u4e8b\u4ef6\u5faa\u74b0 \u7ba1\u7406\u548c\u8abf\u5ea6\u7570\u6b65\u4efb\u52d9\u7684\u57f7\u884c\u74b0\u5883 \u5354\u7a0b \u53ef\u4ee5\u66ab\u505c\u548c\u6062\u5fa9\u57f7\u884c\u7684\u51fd\u6578\uff0c\u662f\u975e\u540c\u6b65\u7de8\u7a0b\u7684\u57fa\u672c\u55ae\u4f4d \u4efb\u52d9 \u5728\u4e8b\u4ef6\u5faa\u74b0\u4e2d\u8abf\u5ea6\u7684\u5354\u7a0b\uff0c\u53ef\u4ee5\u4e26\u884c\u57f7\u884c \u7b49\u5f85\u9ede \u4f7f\u7528 <code>await</code> \u7684\u4f4d\u7f6e\uff0c\u51fd\u6578\u5728\u6b64\u66ab\u505c\uff0c\u8b93\u51fa\u63a7\u5236\u6b0a"},{"location":"testing/05-asynchronous-testing/#_3","title":"\u975e\u540c\u6b65\u6e2c\u8a66\u7684\u6311\u6230\u8207\u89e3\u6c7a\u65b9\u6848","text":"\u6311\u6230 \u89e3\u6c7a\u65b9\u6848 \u4e8b\u4ef6\u5faa\u74b0\u7ba1\u7406 \u4f7f\u7528 pytest-asyncio \u7b49\u5de5\u5177\u7ba1\u7406\u6e2c\u8a66\u7684\u4e8b\u4ef6\u5faa\u74b0 \u975e\u540c\u6b65\u593e\u5177 \u5275\u5efa\u548c\u4f7f\u7528\u975e\u540c\u6b65\u593e\u5177\uff08async fixtures\uff09 \u6e2c\u8a66\u8d85\u6642 \u8a2d\u7f6e\u6e2c\u8a66\u8d85\u6642\uff0c\u907f\u514d\u7121\u9650\u7b49\u5f85 \u4e26\u767c\u63a7\u5236 \u4f7f\u7528\u4fe1\u865f\u91cf\u548c\u9396\u63a7\u5236\u4e26\u767c\u7d1a\u5225 \u6a21\u64ec\u975e\u540c\u6b65\u4f9d\u8cf4 \u5275\u5efa\u975e\u540c\u6b65\u6a21\u64ec\u5c0d\u8c61\u548c\u66ff\u8eab"},{"location":"testing/05-asynchronous-testing/#_4","title":"\u8a2d\u7f6e\u975e\u540c\u6b65\u6e2c\u8a66\u74b0\u5883","text":""},{"location":"testing/05-asynchronous-testing/#_5","title":"\u5b89\u88dd\u5fc5\u8981\u7684\u5de5\u5177","text":"<pre><code>pip install pytest pytest-asyncio httpx\n</code></pre>"},{"location":"testing/05-asynchronous-testing/#pytest-asyncio","title":"\u914d\u7f6e pytest-asyncio","text":"<pre><code># pytest.ini\n[pytest]\nasyncio_mode = auto\n</code></pre> <p>\u6216\u8005\u5728\u6e2c\u8a66\u6a21\u584a\u4e2d\u6a19\u8a18\uff1a</p> <pre><code># tests/api/test_async_endpoints.py\nimport pytest\n\npytestmark = pytest.mark.asyncio  # \u6a19\u8a18\u6574\u500b\u6a21\u584a\u4f7f\u7528 asyncio\n</code></pre>"},{"location":"testing/05-asynchronous-testing/#api","title":"\u6e2c\u8a66\u975e\u540c\u6b65 API \u7aef\u9ede","text":""},{"location":"testing/05-asynchronous-testing/#testclient","title":"\u4f7f\u7528 TestClient \u6e2c\u8a66\u975e\u540c\u6b65\u7aef\u9ede","text":"<p>\u96d6\u7136 FastAPI \u7684 TestClient \u63d0\u4f9b\u4e86\u540c\u6b65\u63a5\u53e3\uff0c\u4f46\u5b83\u5167\u90e8\u8655\u7406\u4e86\u975e\u540c\u6b65\u8abf\u7528\uff0c\u4f7f\u5176\u9069\u7528\u65bc\u6e2c\u8a66\u975e\u540c\u6b65\u7aef\u9ede\uff1a</p> <pre><code># tests/api/test_async_endpoints.py\nfrom fastapi.testclient import TestClient\nfrom app.main import app\n\nclient = TestClient(app)\n\ndef test_async_endpoint():\n    response = client.get(\"/async-endpoint\")\n    assert response.status_code == 200\n    assert response.json() == {\"message\": \"This is an async endpoint\"}\n</code></pre>"},{"location":"testing/05-asynchronous-testing/#httpx","title":"\u4f7f\u7528 HTTPX \u76f4\u63a5\u6e2c\u8a66\u975e\u540c\u6b65\u7aef\u9ede","text":"<p>\u5c0d\u65bc\u66f4\u8907\u96dc\u7684\u975e\u540c\u6b65\u6e2c\u8a66\u5834\u666f\uff0c\u53ef\u4ee5\u4f7f\u7528 HTTPX \u7684\u975e\u540c\u6b65\u5ba2\u6236\u7aef\uff1a</p> <pre><code># tests/api/test_async_endpoints_with_httpx.py\nimport pytest\nimport httpx\nfrom app.main import app\n\n@pytest.mark.asyncio\nasync def test_async_endpoint_with_httpx():\n    async with httpx.AsyncClient(app=app, base_url=\"http://test\") as client:\n        response = await client.get(\"/async-endpoint\")\n        assert response.status_code == 200\n        assert response.json() == {\"message\": \"This is an async endpoint\"}\n</code></pre>"},{"location":"testing/05-asynchronous-testing/#async-fixtures","title":"\u975e\u540c\u6b65\u593e\u5177\uff08Async Fixtures\uff09","text":"<p>pytest-asyncio \u5141\u8a31\u5275\u5efa\u975e\u540c\u6b65\u593e\u5177\uff0c\u9019\u5c0d\u65bc\u6e96\u5099\u9700\u8981\u975e\u540c\u6b65\u64cd\u4f5c\u7684\u6e2c\u8a66\u74b0\u5883\u975e\u5e38\u6709\u7528\u3002</p>"},{"location":"testing/05-asynchronous-testing/#_6","title":"\u57fa\u672c\u7684\u975e\u540c\u6b65\u593e\u5177","text":"<pre><code># tests/conftest.py\nimport pytest\nimport asyncio\nfrom app.database import async_engine, AsyncSessionLocal\nfrom app.models import Base\n\n@pytest.fixture(scope=\"session\")\ndef event_loop():\n    \"\"\"\u5275\u5efa\u4e00\u500b\u5be6\u4f8b\u6703\u8a71\u7bc4\u570d\u7684\u4e8b\u4ef6\u5faa\u74b0\"\"\"\n    loop = asyncio.get_event_loop_policy().new_event_loop()\n    yield loop\n    loop.close()\n\n@pytest.fixture(scope=\"function\")\nasync def async_db():\n    \"\"\"\u70ba\u6e2c\u8a66\u63d0\u4f9b\u975e\u540c\u6b65\u6578\u64da\u5eab\u6703\u8a71\"\"\"\n    # \u5275\u5efa\u6240\u6709\u8868\n    async with async_engine.begin() as conn:\n        await conn.run_sync(Base.metadata.create_all)\n\n    # \u5275\u5efa\u6703\u8a71\n    async with AsyncSessionLocal() as session:\n        yield session\n\n    # \u6e05\u7406 - \u522a\u9664\u6240\u6709\u8868\n    async with async_engine.begin() as conn:\n        await conn.run_sync(Base.metadata.drop_all)\n\n@pytest.fixture\nasync def async_client():\n    \"\"\"\u63d0\u4f9b\u975e\u540c\u6b65 HTTP \u5ba2\u6236\u7aef\"\"\"\n    async with httpx.AsyncClient(app=app, base_url=\"http://test\") as client:\n        yield client\n</code></pre>"},{"location":"testing/05-asynchronous-testing/#_7","title":"\u4f7f\u7528\u975e\u540c\u6b65\u593e\u5177","text":"<pre><code># tests/api/test_async_users.py\nimport pytest\n\n@pytest.mark.asyncio\nasync def test_create_user(async_client, async_db):\n    # \u6e96\u5099\u6e2c\u8a66\u6578\u64da\n    user_data = {\n        \"username\": \"asyncuser\",\n        \"email\": \"async@example.com\",\n        \"password\": \"password123\"\n    }\n\n    # \u767c\u9001\u8acb\u6c42\n    response = await async_client.post(\"/users/\", json=user_data)\n\n    # \u9a57\u8b49\u7d50\u679c\n    assert response.status_code == 201\n    data = response.json()\n    assert data[\"username\"] == user_data[\"username\"]\n    assert data[\"email\"] == user_data[\"email\"]\n    assert \"id\" in data\n</code></pre>"},{"location":"testing/05-asynchronous-testing/#_8","title":"\u6e2c\u8a66\u975e\u540c\u6b65\u5b58\u5132\u5eab","text":"<p>\u975e\u540c\u6b65\u5b58\u5132\u5eab\u4f7f\u7528 <code>async/await</code> \u8a9e\u6cd5\u9032\u884c\u6578\u64da\u5eab\u64cd\u4f5c\uff0c\u9700\u8981\u7279\u6b8a\u7684\u6e2c\u8a66\u65b9\u5f0f\u3002</p>"},{"location":"testing/05-asynchronous-testing/#_9","title":"\u975e\u540c\u6b65\u5b58\u5132\u5eab\u793a\u4f8b","text":"<pre><code># app/repositories/async_user_repository.py\nfrom sqlalchemy.ext.asyncio import AsyncSession\nfrom sqlalchemy.future import select\nfrom app.models import User\n\nclass AsyncUserRepository:\n    def __init__(self, db: AsyncSession):\n        self.db = db\n\n    async def create(self, user_data):\n        \"\"\"\u5275\u5efa\u65b0\u7528\u6236\"\"\"\n        user = User(**user_data)\n        self.db.add(user)\n        await self.db.commit()\n        await self.db.refresh(user)\n        return user\n\n    async def get_by_id(self, user_id):\n        \"\"\"\u6839\u64da ID \u7372\u53d6\u7528\u6236\"\"\"\n        result = await self.db.execute(\n            select(User).where(User.id == user_id)\n        )\n        return result.scalars().first()\n\n    async def get_all(self, skip=0, limit=100):\n        \"\"\"\u7372\u53d6\u6240\u6709\u7528\u6236\"\"\"\n        result = await self.db.execute(\n            select(User).offset(skip).limit(limit)\n        )\n        return result.scalars().all()\n</code></pre>"},{"location":"testing/05-asynchronous-testing/#_10","title":"\u6e2c\u8a66\u975e\u540c\u6b65\u5b58\u5132\u5eab","text":"<pre><code># tests/repositories/test_async_user_repository.py\nimport pytest\nfrom app.repositories.async_user_repository import AsyncUserRepository\n\n@pytest.fixture\nasync def async_user_repo(async_db):\n    return AsyncUserRepository(async_db)\n\n@pytest.mark.asyncio\nasync def test_create_user(async_user_repo):\n    # \u5275\u5efa\u7528\u6236\n    user_data = {\n        \"username\": \"asyncrepouser\",\n        \"email\": \"asyncrepo@example.com\",\n        \"hashed_password\": \"hashedpassword\"\n    }\n    user = await async_user_repo.create(user_data)\n\n    # \u9a57\u8b49\u7528\u6236\u88ab\u5275\u5efa\n    assert user.id is not None\n    assert user.username == user_data[\"username\"]\n    assert user.email == user_data[\"email\"]\n\n@pytest.mark.asyncio\nasync def test_get_user_by_id(async_user_repo):\n    # \u5275\u5efa\u7528\u6236\n    user_data = {\n        \"username\": \"getasyncuser\",\n        \"email\": \"getasync@example.com\",\n        \"hashed_password\": \"hashedpassword\"\n    }\n    created_user = await async_user_repo.create(user_data)\n\n    # \u7372\u53d6\u7528\u6236\n    user = await async_user_repo.get_by_id(created_user.id)\n\n    # \u9a57\u8b49\n    assert user is not None\n    assert user.id == created_user.id\n    assert user.username == user_data[\"username\"]\n</code></pre>"},{"location":"testing/05-asynchronous-testing/#_11","title":"\u6e2c\u8a66\u975e\u540c\u6b65\u670d\u52d9","text":"<p>\u975e\u540c\u6b65\u670d\u52d9\u901a\u5e38\u4f9d\u8cf4\u65bc\u5176\u4ed6\u975e\u540c\u6b65\u7d44\u4ef6\uff0c\u5982\u5b58\u5132\u5eab\u6216\u5916\u90e8 API\u3002</p>"},{"location":"testing/05-asynchronous-testing/#_12","title":"\u975e\u540c\u6b65\u670d\u52d9\u793a\u4f8b","text":"<pre><code># app/services/async_user_service.py\nfrom app.repositories.async_user_repository import AsyncUserRepository\nfrom app.utils.security import get_password_hash\n\nclass AsyncUserService:\n    def __init__(self, user_repository: AsyncUserRepository):\n        self.user_repository = user_repository\n\n    async def create_user(self, user_data):\n        \"\"\"\u5275\u5efa\u65b0\u7528\u6236\"\"\"\n        # \u6aa2\u67e5\u96fb\u5b50\u90f5\u4ef6\u662f\u5426\u5df2\u5b58\u5728\n        existing_user = await self.user_repository.get_by_email(user_data.email)\n        if existing_user:\n            raise ValueError(\"\u96fb\u5b50\u90f5\u4ef6\u5df2\u88ab\u8a3b\u518a\")\n\n        # \u54c8\u5e0c\u5bc6\u78bc\n        hashed_password = get_password_hash(user_data.password)\n\n        # \u5275\u5efa\u7528\u6236\n        user_dict = user_data.dict()\n        user_dict.pop(\"password\")\n        user_dict[\"hashed_password\"] = hashed_password\n\n        return await self.user_repository.create(user_dict)\n</code></pre>"},{"location":"testing/05-asynchronous-testing/#_13","title":"\u6e2c\u8a66\u975e\u540c\u6b65\u670d\u52d9","text":"<pre><code># tests/services/test_async_user_service.py\nimport pytest\nfrom unittest.mock import AsyncMock, patch\nfrom app.services.async_user_service import AsyncUserService\nfrom app.schemas.user import UserCreate\n\n@pytest.fixture\ndef mock_async_user_repo():\n    return AsyncMock()\n\n@pytest.fixture\ndef async_user_service(mock_async_user_repo):\n    return AsyncUserService(mock_async_user_repo)\n\n@pytest.mark.asyncio\nasync def test_create_user(async_user_service, mock_async_user_repo):\n    # \u8a2d\u7f6e\u6a21\u64ec\n    mock_async_user_repo.get_by_email.return_value = None\n    mock_async_user_repo.create.return_value = AsyncMock(\n        id=1, \n        username=\"testuser\", \n        email=\"test@example.com\",\n        hashed_password=\"hashedpw\"\n    )\n\n    # \u5275\u5efa\u7528\u6236\u6578\u64da\n    user_data = UserCreate(\n        username=\"testuser\",\n        email=\"test@example.com\",\n        password=\"password123\"\n    )\n\n    # \u8abf\u7528\u670d\u52d9\n    with patch(\"app.services.async_user_service.get_password_hash\", return_value=\"hashedpw\"):\n        user = await async_user_service.create_user(user_data)\n\n    # \u9a57\u8b49\u7d50\u679c\n    assert user.id == 1\n    assert user.username == \"testuser\"\n    assert user.email == \"test@example.com\"\n\n    # \u9a57\u8b49\u6a21\u64ec\u8abf\u7528\n    mock_async_user_repo.get_by_email.assert_called_once_with(\"test@example.com\")\n    mock_async_user_repo.create.assert_called_once()\n</code></pre>"},{"location":"testing/05-asynchronous-testing/#_14","title":"\u6e2c\u8a66\u975e\u540c\u6b65\u80cc\u666f\u4efb\u52d9","text":"<p>FastAPI \u5141\u8a31\u5275\u5efa\u80cc\u666f\u4efb\u52d9\uff0c\u9019\u4e9b\u4efb\u52d9\u5728\u8acb\u6c42\u8655\u7406\u5b8c\u6210\u5f8c\u7570\u6b65\u57f7\u884c\u3002\u6e2c\u8a66\u9019\u4e9b\u4efb\u52d9\u9700\u8981\u7279\u6b8a\u7684\u6280\u8853\u3002</p>"},{"location":"testing/05-asynchronous-testing/#_15","title":"\u80cc\u666f\u4efb\u52d9\u793a\u4f8b","text":"<pre><code># app/tasks/email_tasks.py\nimport aiosmtplib\nfrom email.message import EmailMessage\nfrom app.config import settings\n\nasync def send_email_async(to_email: str, subject: str, content: str):\n    \"\"\"\u975e\u540c\u6b65\u767c\u9001\u96fb\u5b50\u90f5\u4ef6\"\"\"\n    message = EmailMessage()\n    message.set_content(content)\n    message[\"Subject\"] = subject\n    message[\"From\"] = settings.SMTP_USERNAME\n    message[\"To\"] = to_email\n\n    try:\n        await aiosmtplib.send(\n            message,\n            hostname=settings.SMTP_SERVER,\n            port=settings.SMTP_PORT,\n            username=settings.SMTP_USERNAME,\n            password=settings.SMTP_PASSWORD,\n            use_tls=True\n        )\n        return True\n    except Exception as e:\n        print(f\"\u767c\u9001\u90f5\u4ef6\u5931\u6557: {str(e)}\")\n        return False\n</code></pre>"},{"location":"testing/05-asynchronous-testing/#_16","title":"\u6e2c\u8a66\u80cc\u666f\u4efb\u52d9","text":"<pre><code># tests/tasks/test_email_tasks.py\nimport pytest\nfrom unittest.mock import patch, AsyncMock\nfrom app.tasks.email_tasks import send_email_async\n\n@pytest.mark.asyncio\nasync def test_send_email_async_success():\n    # \u6a21\u64ec aiosmtplib.send\n    with patch(\"app.tasks.email_tasks.aiosmtplib.send\", new_callable=AsyncMock) as mock_send:\n        mock_send.return_value = True\n\n        # \u8abf\u7528\u51fd\u6578\n        result = await send_email_async(\n            \"recipient@example.com\",\n            \"\u6e2c\u8a66\u90f5\u4ef6\",\n            \"\u9019\u662f\u4e00\u5c01\u6e2c\u8a66\u90f5\u4ef6\"\n        )\n\n        # \u9a57\u8b49\u7d50\u679c\n        assert result is True\n        mock_send.assert_called_once()\n</code></pre>"},{"location":"testing/05-asynchronous-testing/#websocket","title":"\u6e2c\u8a66\u975e\u540c\u6b65 WebSocket \u7aef\u9ede","text":"<p>FastAPI \u652f\u6301 WebSocket \u9023\u63a5\uff0c\u9019\u662f\u4e00\u7a2e\u975e\u540c\u6b65\u7684\u9577\u9023\u63a5\u901a\u4fe1\u65b9\u5f0f\u3002</p>"},{"location":"testing/05-asynchronous-testing/#websocket_1","title":"WebSocket \u7aef\u9ede\u793a\u4f8b","text":"<pre><code># app/routers/websocket.py\nfrom fastapi import APIRouter, WebSocket, WebSocketDisconnect\nfrom typing import List\n\nrouter = APIRouter()\n\nclass ConnectionManager:\n    def __init__(self):\n        self.active_connections: List[WebSocket] = []\n\n    async def connect(self, websocket: WebSocket):\n        await websocket.accept()\n        self.active_connections.append(websocket)\n\n    def disconnect(self, websocket: WebSocket):\n        self.active_connections.remove(websocket)\n\n    async def send_personal_message(self, message: str, websocket: WebSocket):\n        await websocket.send_text(message)\n\n    async def broadcast(self, message: str):\n        for connection in self.active_connections:\n            await connection.send_text(message)\n\nmanager = ConnectionManager()\n\n@router.websocket(\"/ws/{client_id}\")\nasync def websocket_endpoint(websocket: WebSocket, client_id: int):\n    await manager.connect(websocket)\n    try:\n        while True:\n            data = await websocket.receive_text()\n            await manager.send_personal_message(f\"You wrote: {data}\", websocket)\n            await manager.broadcast(f\"Client #{client_id} says: {data}\")\n    except WebSocketDisconnect:\n        manager.disconnect(websocket)\n        await manager.broadcast(f\"Client #{client_id} left the chat\")\n</code></pre>"},{"location":"testing/05-asynchronous-testing/#websocket_2","title":"\u6e2c\u8a66 WebSocket \u7aef\u9ede","text":"<pre><code># tests/api/test_websocket.py\nimport pytest\nfrom fastapi.testclient import TestClient\nfrom app.main import app\n\nclient = TestClient(app)\n\ndef test_websocket_connection():\n    with client.websocket_connect(\"/ws/1\") as websocket:\n        # \u767c\u9001\u6d88\u606f\n        websocket.send_text(\"Hello WebSocket\")\n\n        # \u63a5\u6536\u500b\u4eba\u6d88\u606f\n        data = websocket.receive_text()\n        assert data == \"You wrote: Hello WebSocket\"\n\n        # \u63a5\u6536\u5ee3\u64ad\u6d88\u606f\n        data = websocket.receive_text()\n        assert data == \"Client #1 says: Hello WebSocket\"\n</code></pre>"},{"location":"testing/05-asynchronous-testing/#_17","title":"\u6e2c\u8a66\u975e\u540c\u6b65\u4f9d\u8cf4\u6ce8\u5165","text":"<p>FastAPI \u7684\u4f9d\u8cf4\u6ce8\u5165\u7cfb\u7d71\u652f\u6301\u975e\u540c\u6b65\u4f9d\u8cf4\uff0c\u6e2c\u8a66\u9019\u4e9b\u4f9d\u8cf4\u9700\u8981\u7279\u6b8a\u7684\u6280\u8853\u3002</p>"},{"location":"testing/05-asynchronous-testing/#_18","title":"\u975e\u540c\u6b65\u4f9d\u8cf4\u793a\u4f8b","text":"<pre><code># app/dependencies/async_auth.py\nfrom fastapi import Depends, HTTPException, status\nfrom fastapi.security import OAuth2PasswordBearer\nfrom app.services.async_user_service import AsyncUserService\nfrom app.services.async_token_service import AsyncTokenService\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\nasync def get_current_user(\n    token: str = Depends(oauth2_scheme),\n    token_service: AsyncTokenService = Depends(),\n    user_service: AsyncUserService = Depends()\n):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"\u7121\u6548\u7684\u8a8d\u8b49\u6191\u8b49\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n\n    # \u9a57\u8b49\u4ee4\u724c\n    user_id = token_service.verify_token(token)\n    if user_id is None:\n        raise credentials_exception\n\n    # \u7372\u53d6\u7528\u6236\n    user = await user_service.get_user_by_id(user_id)\n    if user is None:\n        raise credentials_exception\n\n    return user\n</code></pre>"},{"location":"testing/05-asynchronous-testing/#_19","title":"\u6e2c\u8a66\u975e\u540c\u6b65\u4f9d\u8cf4","text":"<pre><code># tests/dependencies/test_async_auth.py\nimport pytest\nfrom unittest.mock import AsyncMock, patch\nfrom fastapi import HTTPException\nfrom app.dependencies.async_auth import get_current_user\n\n@pytest.mark.asyncio\nasync def test_get_current_user_valid_token():\n    # \u6a21\u64ec\u4f9d\u8cf4\n    token_service = AsyncMock()\n    user_service = AsyncMock()\n\n    # \u8a2d\u7f6e\u6a21\u64ec\u8fd4\u56de\u503c\n    token_service.verify_token.return_value = 1\n    user_service.get_user_by_id.return_value = AsyncMock(\n        id=1, \n        username=\"testuser\", \n        is_active=True\n    )\n\n    # \u8abf\u7528\u4f9d\u8cf4\n    user = await get_current_user(\"valid_token\", token_service, user_service)\n\n    # \u9a57\u8b49\u7d50\u679c\n    assert user.id == 1\n    assert user.username == \"testuser\"\n    token_service.verify_token.assert_called_once_with(\"valid_token\")\n    user_service.get_user_by_id.assert_called_once_with(1)\n</code></pre>"},{"location":"testing/05-asynchronous-testing/#_20","title":"\u6e2c\u8a66\u975e\u540c\u6b65\u4e2d\u9593\u4ef6","text":"<p>\u4e2d\u9593\u4ef6\u5728 FastAPI \u4e2d\u662f\u975e\u540c\u6b65\u7684\uff0c\u5b83\u5011\u8655\u7406\u8acb\u6c42\u548c\u97ff\u61c9\u7684\u6d41\u7a0b\u3002</p>"},{"location":"testing/05-asynchronous-testing/#_21","title":"\u975e\u540c\u6b65\u4e2d\u9593\u4ef6\u793a\u4f8b","text":"<pre><code># app/middleware/async_logging.py\nimport time\nimport uuid\nfrom fastapi import Request\nimport logging\n\nlogger = logging.getLogger(__name__)\n\nasync def async_logging_middleware(request: Request, call_next):\n    # \u751f\u6210\u8acb\u6c42 ID\n    request_id = str(uuid.uuid4())\n\n    # \u8a18\u9304\u8acb\u6c42\u958b\u59cb\n    start_time = time.time()\n    logger.info(f\"Request started: {request_id} - {request.method} {request.url.path}\")\n\n    # \u8655\u7406\u8acb\u6c42\n    try:\n        response = await call_next(request)\n\n        # \u8a18\u9304\u8acb\u6c42\u5b8c\u6210\n        process_time = time.time() - start_time\n        logger.info(\n            f\"Request completed: {request_id} - {request.method} {request.url.path} - \"\n            f\"Status: {response.status_code} - Duration: {process_time:.4f}s\"\n        )\n\n        # \u6dfb\u52a0\u81ea\u5b9a\u7fa9\u97ff\u61c9\u982d\n        response.headers[\"X-Request-ID\"] = request_id\n\n        return response\n    except Exception as e:\n        # \u8a18\u9304\u7570\u5e38\n        logger.error(f\"Request failed: {request_id} - Error: {str(e)}\")\n        raise\n</code></pre>"},{"location":"testing/05-asynchronous-testing/#_22","title":"\u6e2c\u8a66\u975e\u540c\u6b65\u4e2d\u9593\u4ef6","text":"<pre><code># tests/middleware/test_async_logging.py\nimport pytest\nfrom unittest.mock import patch, AsyncMock\nfrom fastapi import FastAPI\nfrom fastapi.testclient import TestClient\nfrom app.middleware.async_logging import async_logging_middleware\n\n@pytest.fixture\ndef app_with_middleware():\n    app = FastAPI()\n\n    @app.middleware(\"http\")\n    async def logging_middleware(request, call_next):\n        return await async_logging_middleware(request, call_next)\n\n    @app.get(\"/test\")\n    async def test_route():\n        return {\"message\": \"Test route\"}\n\n    return app\n\n@pytest.fixture\ndef client(app_with_middleware):\n    return TestClient(app_with_middleware)\n\ndef test_logging_middleware_success(client):\n    with patch(\"app.middleware.async_logging.logger\") as mock_logger:\n        # \u767c\u9001\u8acb\u6c42\n        response = client.get(\"/test\")\n\n        # \u9a57\u8b49\u97ff\u61c9\n        assert response.status_code == 200\n        assert response.json() == {\"message\": \"Test route\"}\n        assert \"X-Request-ID\" in response.headers\n\n        # \u9a57\u8b49\u65e5\u8a8c\n        mock_logger.info.assert_called()\n        assert \"Request started\" in mock_logger.info.call_args_list[0][0][0]\n        assert \"Request completed\" in mock_logger.info.call_args_list[1][0][0]\n</code></pre>"},{"location":"testing/05-asynchronous-testing/#_23","title":"\u6e2c\u8a66\u975e\u540c\u6b65\u4e26\u767c","text":"<p>\u6e2c\u8a66\u975e\u540c\u6b65\u4ee3\u78bc\u7684\u4e26\u767c\u884c\u70ba\u662f\u78ba\u4fdd\u7cfb\u7d71\u5728\u9ad8\u8ca0\u8f09\u4e0b\u6b63\u5e38\u5de5\u4f5c\u7684\u91cd\u8981\u90e8\u5206\u3002</p>"},{"location":"testing/05-asynchronous-testing/#_24","title":"\u7c21\u55ae\u7684\u4e26\u767c\u6e2c\u8a66","text":"<pre><code># tests/concurrency/test_async_concurrency.py\nimport pytest\nimport asyncio\nfrom app.services.async_counter_service import AsyncCounterService\n\n@pytest.fixture\ndef counter_service():\n    return AsyncCounterService()\n\n@pytest.mark.asyncio\nasync def test_concurrent_increment(counter_service):\n    # \u5275\u5efa\u591a\u500b\u4e26\u767c\u4efb\u52d9\n    tasks = [counter_service.increment() for _ in range(10)]\n\n    # \u7b49\u5f85\u6240\u6709\u4efb\u52d9\u5b8c\u6210\n    await asyncio.gather(*tasks)\n\n    # \u9a57\u8b49\u8a08\u6578\u5668\u503c\n    assert await counter_service.get_count() == 10\n</code></pre>"},{"location":"testing/05-asynchronous-testing/#_25","title":"\u975e\u540c\u6b65\u6e2c\u8a66\u7684\u6a21\u5f0f\u548c\u6280\u5de7","text":""},{"location":"testing/05-asynchronous-testing/#_26","title":"\u6a21\u64ec\u975e\u540c\u6b65\u51fd\u6578","text":"<p>\u4f7f\u7528 <code>AsyncMock</code> \u4f86\u6a21\u64ec\u975e\u540c\u6b65\u51fd\u6578\u548c\u65b9\u6cd5\uff1a</p> <pre><code># tests/utils/test_async_utils.py\nimport pytest\nfrom unittest.mock import AsyncMock, patch\nfrom app.utils.async_utils import fetch_external_data\n\n@pytest.mark.asyncio\nasync def test_fetch_external_data():\n    # \u5275\u5efa\u6a21\u64ec\u7684\u975e\u540c\u6b65\u97ff\u61c9\n    mock_response = AsyncMock()\n    mock_response.json.return_value = {\"data\": \"test_data\"}\n    mock_response.status_code = 200\n\n    # \u6a21\u64ec httpx.AsyncClient.get \u65b9\u6cd5\n    with patch(\"httpx.AsyncClient.get\", new_callable=AsyncMock) as mock_get:\n        mock_get.return_value = mock_response\n\n        # \u8abf\u7528\u88ab\u6e2c\u8a66\u7684\u51fd\u6578\n        result = await fetch_external_data(\"https://api.example.com/data\")\n\n        # \u9a57\u8b49\u7d50\u679c\n        assert result == {\"data\": \"test_data\"}\n        mock_get.assert_called_once_with(\"https://api.example.com/data\")\n</code></pre>"},{"location":"testing/05-asynchronous-testing/#_27","title":"\u6e2c\u8a66\u975e\u540c\u6b65\u8d85\u6642","text":"<p>\u6e2c\u8a66\u51fd\u6578\u5728\u8d85\u6642\u60c5\u6cc1\u4e0b\u7684\u884c\u70ba\uff1a</p> <pre><code># tests/utils/test_async_timeout.py\nimport pytest\nimport asyncio\nfrom app.utils.async_timeout import fetch_with_timeout\n\n@pytest.mark.asyncio\nasync def test_fetch_with_timeout_success():\n    # \u6a21\u64ec\u5feb\u901f\u5b8c\u6210\u7684\u975e\u540c\u6b65\u51fd\u6578\n    async def mock_fetch():\n        await asyncio.sleep(0.1)\n        return \"data\"\n\n    # \u8abf\u7528\u5e36\u6709\u8db3\u5920\u8d85\u6642\u7684\u51fd\u6578\n    result = await fetch_with_timeout(mock_fetch(), timeout=1.0)\n    assert result == \"data\"\n\n@pytest.mark.asyncio\nasync def test_fetch_with_timeout_timeout():\n    # \u6a21\u64ec\u6162\u901f\u5b8c\u6210\u7684\u975e\u540c\u6b65\u51fd\u6578\n    async def mock_slow_fetch():\n        await asyncio.sleep(2.0)\n        return \"data\"\n\n    # \u8abf\u7528\u5e36\u6709\u8f03\u77ed\u8d85\u6642\u7684\u51fd\u6578\n    with pytest.raises(asyncio.TimeoutError):\n        await fetch_with_timeout(mock_slow_fetch(), timeout=0.5)\n</code></pre>"},{"location":"testing/05-asynchronous-testing/#_28","title":"\u6e2c\u8a66\u975e\u540c\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668","text":"<p>\u6e2c\u8a66\u5be6\u73fe\u4e86 <code>__aenter__</code> \u548c <code>__aexit__</code> \u65b9\u6cd5\u7684\u975e\u540c\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff1a</p> <pre><code># tests/utils/test_async_context_manager.py\nimport pytest\nfrom app.utils.async_context import AsyncResourceManager\n\n@pytest.mark.asyncio\nasync def test_async_context_manager():\n    manager = AsyncResourceManager()\n\n    # \u9a57\u8b49\u521d\u59cb\u72c0\u614b\n    assert manager.is_acquired is False\n\n    # \u4f7f\u7528\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\n    async with manager as resource:\n        # \u9a57\u8b49\u8cc7\u6e90\u5df2\u7372\u53d6\n        assert manager.is_acquired is True\n        assert resource is not None\n\n    # \u9a57\u8b49\u8cc7\u6e90\u5df2\u91cb\u653e\n    assert manager.is_acquired is False\n</code></pre>"},{"location":"testing/05-asynchronous-testing/#_29","title":"\u975e\u540c\u6b65\u6e2c\u8a66\u7684\u6700\u4f73\u5be6\u8e10","text":""},{"location":"testing/05-asynchronous-testing/#_30","title":"\u907f\u514d\u6df7\u5408\u540c\u6b65\u548c\u975e\u540c\u6b65\u4ee3\u78bc","text":"<p>\u5728\u6e2c\u8a66\u4e2d\uff0c\u61c9\u8a72\u907f\u514d\u5728\u540c\u4e00\u500b\u51fd\u6578\u4e2d\u6df7\u5408\u540c\u6b65\u548c\u975e\u540c\u6b65\u4ee3\u78bc\uff0c\u9019\u53ef\u80fd\u5c0e\u81f4\u4e8b\u4ef6\u5faa\u74b0\u554f\u984c\uff1a</p> <pre><code># \u4e0d\u597d\u7684\u505a\u6cd5\n@pytest.mark.asyncio\nasync def test_mixed_sync_async():\n    sync_result = do_something_sync()  # \u540c\u6b65\u8abf\u7528\n    async_result = await do_something_async()  # \u975e\u540c\u6b65\u8abf\u7528\n    assert sync_result == async_result\n\n# \u597d\u7684\u505a\u6cd5\n@pytest.mark.asyncio\nasync def test_async_wrapper():\n    # \u5c07\u540c\u6b65\u8abf\u7528\u5305\u88dd\u5728\u975e\u540c\u6b65\u51fd\u6578\u4e2d\n    async def sync_wrapper():\n        return do_something_sync()\n\n    sync_result = await sync_wrapper()\n    async_result = await do_something_async()\n    assert sync_result == async_result\n</code></pre>"},{"location":"testing/05-asynchronous-testing/#_31","title":"\u4f7f\u7528\u975e\u540c\u6b65\u593e\u5177\u93c8","text":"<p>\u5c07\u591a\u500b\u975e\u540c\u6b65\u593e\u5177\u7d44\u5408\u5728\u4e00\u8d77\uff0c\u5275\u5efa\u8907\u96dc\u7684\u6e2c\u8a66\u74b0\u5883\uff1a</p> <pre><code># tests/conftest.py\nimport pytest\n\n@pytest.fixture\nasync def async_user(async_db):\n    # \u5275\u5efa\u6e2c\u8a66\u7528\u6236\n    user = await create_test_user(async_db)\n    yield user\n    # \u6e05\u7406\n    await delete_test_user(async_db, user.id)\n\n@pytest.fixture\nasync def async_token(async_user, token_service):\n    # \u70ba\u6e2c\u8a66\u7528\u6236\u5275\u5efa\u4ee4\u724c\n    token = await token_service.create_token(async_user.id)\n    return token\n\n@pytest.fixture\nasync def authenticated_client(async_client, async_token):\n    # \u5275\u5efa\u5df2\u8a8d\u8b49\u7684\u5ba2\u6236\u7aef\n    async_client.headers.update({\"Authorization\": f\"Bearer {async_token}\"})\n    return async_client\n</code></pre>"},{"location":"testing/05-asynchronous-testing/#_32","title":"\u8a2d\u7f6e\u6e2c\u8a66\u8d85\u6642","text":"<p>\u70ba\u975e\u540c\u6b65\u6e2c\u8a66\u8a2d\u7f6e\u8d85\u6642\uff0c\u907f\u514d\u6e2c\u8a66\u7121\u9650\u7b49\u5f85\uff1a</p> <pre><code># tests/slow/test_slow_async.py\nimport pytest\n\n@pytest.mark.asyncio\n@pytest.mark.timeout(5)  # 5\u79d2\u8d85\u6642\nasync def test_slow_operation():\n    result = await potentially_slow_operation()\n    assert result is not None\n</code></pre>"},{"location":"testing/05-asynchronous-testing/#_33","title":"\u975e\u540c\u6b65\u6e2c\u8a66\u7684\u5e38\u898b\u554f\u984c\u548c\u89e3\u6c7a\u65b9\u6848","text":""},{"location":"testing/05-asynchronous-testing/#_34","title":"\u554f\u984c\uff1a\u4e8b\u4ef6\u5faa\u74b0\u5df2\u95dc\u9589","text":"<p>\u89e3\u6c7a\u65b9\u6848\uff1a\u78ba\u4fdd\u5728\u6e2c\u8a66\u6703\u8a71\u4e2d\u6b63\u78ba\u7ba1\u7406\u4e8b\u4ef6\u5faa\u74b0\uff1a</p> <pre><code># tests/conftest.py\nimport pytest\nimport asyncio\n\n@pytest.fixture(scope=\"session\")\ndef event_loop():\n    \"\"\"\u5275\u5efa\u4e00\u500b\u6703\u8a71\u7bc4\u570d\u7684\u4e8b\u4ef6\u5faa\u74b0\"\"\"\n    loop = asyncio.get_event_loop_policy().new_event_loop()\n    yield loop\n    loop.close()\n</code></pre>"},{"location":"testing/05-asynchronous-testing/#_35","title":"\u554f\u984c\uff1a\u975e\u540c\u6b65\u6e2c\u8a66\u7121\u6cd5\u4e26\u884c\u904b\u884c","text":"<p>\u89e3\u6c7a\u65b9\u6848\uff1a\u78ba\u4fdd\u6bcf\u500b\u6e2c\u8a66\u4f7f\u7528\u7368\u7acb\u7684\u8cc7\u6e90\uff0c\u5982\u6578\u64da\u5eab\u9023\u63a5\uff1a</p> <pre><code># tests/conftest.py\nimport pytest\nimport asyncio\nfrom app.database import create_async_engine\n\n@pytest.fixture\nasync def async_db():\n    \"\"\"\u70ba\u6bcf\u500b\u6e2c\u8a66\u5275\u5efa\u7368\u7acb\u7684\u6578\u64da\u5eab\u9023\u63a5\"\"\"\n    # \u5275\u5efa\u552f\u4e00\u7684\u6578\u64da\u5eab URL\n    db_url = f\"sqlite+aiosqlite:///:memory:\"\n    engine = create_async_engine(db_url)\n\n    # \u8a2d\u7f6e\u6578\u64da\u5eab\n    async with engine.begin() as conn:\n        await conn.run_sync(Base.metadata.create_all)\n\n    # \u5275\u5efa\u6703\u8a71\n    async_session = AsyncSession(engine)\n    yield async_session\n\n    # \u6e05\u7406\n    await async_session.close()\n    await engine.dispose()\n</code></pre>"},{"location":"testing/05-asynchronous-testing/#_36","title":"\u554f\u984c\uff1a\u6a21\u64ec\u975e\u540c\u6b65\u65b9\u6cd5","text":"<p>\u89e3\u6c7a\u65b9\u6848\uff1a\u4f7f\u7528 <code>AsyncMock</code> \u4e26\u8a2d\u7f6e\u9069\u7576\u7684\u8fd4\u56de\u503c\u6216\u526f\u4f5c\u7528\uff1a</p> <pre><code># tests/services/test_async_service_with_mocks.py\nimport pytest\nfrom unittest.mock import AsyncMock, patch\nfrom app.services.async_notification_service import AsyncNotificationService\n\n@pytest.mark.asyncio\nasync def test_send_notification():\n    # \u5275\u5efa\u6a21\u64ec\u7684\u96fb\u5b50\u90f5\u4ef6\u548c\u63a8\u9001\u670d\u52d9\n    mock_email_service = AsyncMock()\n    mock_push_service = AsyncMock()\n\n    # \u8a2d\u7f6e\u8fd4\u56de\u503c\n    mock_email_service.send.return_value = True\n    mock_push_service.send.return_value = True\n\n    # \u5275\u5efa\u901a\u77e5\u670d\u52d9\n    notification_service = AsyncNotificationService(\n        email_service=mock_email_service,\n        push_service=mock_push_service\n    )\n\n    # \u767c\u9001\u901a\u77e5\n    result = await notification_service.send_notification(\n        user_id=1,\n        message=\"Test notification\"\n    )\n\n    # \u9a57\u8b49\u7d50\u679c\n    assert result is True\n    mock_email_service.send.assert_called_once()\n    mock_push_service.send.assert_called_once()\n</code></pre>"},{"location":"testing/05-asynchronous-testing/#_37","title":"\u7e3d\u7d50","text":"<p>\u975e\u540c\u6b65\u6e2c\u8a66\u662f\u6e2c\u8a66 FastAPI \u61c9\u7528\u7a0b\u5e8f\u7684\u95dc\u9375\u90e8\u5206\uff0c\u5b83\u78ba\u4fdd\u975e\u540c\u6b65\u4ee3\u78bc\u80fd\u5920\u6b63\u78ba\u57f7\u884c\u4e26\u6309\u9810\u671f\u5de5\u4f5c\u3002\u901a\u904e\u4f7f\u7528\u9069\u7576\u7684\u5de5\u5177\u548c\u6280\u8853\uff0c\u53ef\u4ee5\u6709\u6548\u5730\u6e2c\u8a66\u975e\u540c\u6b65 API \u7aef\u9ede\u3001\u670d\u52d9\u3001\u5b58\u5132\u5eab\u548c\u5176\u4ed6\u7d44\u4ef6\u3002</p> \u65b9\u9762 \u95dc\u9375\u9ede \u6e2c\u8a66\u74b0\u5883 \u4f7f\u7528 pytest-asyncio \u7ba1\u7406\u4e8b\u4ef6\u5faa\u74b0\u5275\u5efa\u975e\u540c\u6b65\u593e\u5177\u6e96\u5099\u6e2c\u8a66\u74b0\u5883 \u6e2c\u8a66\u5ba2\u6236\u7aef \u4f7f\u7528 TestClient \u6216 httpx.AsyncClient \u6e2c\u8a66 API \u7aef\u9ede\u8655\u7406 WebSocket \u548c\u9577\u9023\u63a5\u6e2c\u8a66 \u6a21\u64ec\u6280\u8853 \u4f7f\u7528 AsyncMock \u6a21\u64ec\u975e\u540c\u6b65\u4f9d\u8cf4\u6a21\u64ec\u5916\u90e8\u670d\u52d9\u548c API \u4e26\u767c\u6e2c\u8a66 \u6e2c\u8a66\u4ee3\u78bc\u5728\u4e26\u767c\u74b0\u5883\u4e0b\u7684\u884c\u70ba\u4f7f\u7528 asyncio.gather \u57f7\u884c\u4e26\u767c\u4efb\u52d9 \u6e2c\u8a66\u8d85\u6642 \u8a2d\u7f6e\u9069\u7576\u7684\u8d85\u6642\u907f\u514d\u6e2c\u8a66\u7121\u9650\u7b49\u5f85\u6e2c\u8a66\u8d85\u6642\u8655\u7406\u908f\u8f2f <p>\u6700\u4f73\u5be6\u8e10</p> <ol> <li>\u9694\u96e2\u6e2c\u8a66\u74b0\u5883\uff1a\u6bcf\u500b\u6e2c\u8a66\u61c9\u8a72\u6709\u81ea\u5df1\u7684\u9694\u96e2\u74b0\u5883\uff0c\u907f\u514d\u6e2c\u8a66\u4e4b\u9593\u7684\u76f8\u4e92\u5e72\u64fe\u3002</li> <li>\u6b63\u78ba\u7ba1\u7406\u4e8b\u4ef6\u5faa\u74b0\uff1a\u78ba\u4fdd\u4e8b\u4ef6\u5faa\u74b0\u5728\u6e2c\u8a66\u6703\u8a71\u4e2d\u6b63\u78ba\u5275\u5efa\u548c\u95dc\u9589\u3002</li> <li>\u4f7f\u7528\u975e\u540c\u6b65\u593e\u5177\uff1a\u5275\u5efa\u548c\u4f7f\u7528\u975e\u540c\u6b65\u593e\u5177\u4f86\u6e96\u5099\u6e2c\u8a66\u6578\u64da\u548c\u74b0\u5883\u3002</li> <li>\u6a21\u64ec\u975e\u540c\u6b65\u4f9d\u8cf4\uff1a\u4f7f\u7528 AsyncMock \u6a21\u64ec\u975e\u540c\u6b65\u4f9d\u8cf4\uff0c\u7c21\u5316\u6e2c\u8a66\u4e26\u63d0\u9ad8\u6e2c\u8a66\u901f\u5ea6\u3002</li> <li>\u6e2c\u8a66\u4e26\u767c\u884c\u70ba\uff1a\u6e2c\u8a66\u4ee3\u78bc\u5728\u4e26\u767c\u74b0\u5883\u4e0b\u7684\u884c\u70ba\uff0c\u78ba\u4fdd\u6c92\u6709\u7af6\u614b\u689d\u4ef6\u548c\u6b7b\u9396\u3002</li> <li>\u8a2d\u7f6e\u9069\u7576\u7684\u8d85\u6642\uff1a\u70ba\u975e\u540c\u6b65\u6e2c\u8a66\u8a2d\u7f6e\u8d85\u6642\uff0c\u907f\u514d\u6e2c\u8a66\u7121\u9650\u7b49\u5f85\u3002</li> <li>\u6e2c\u8a66\u932f\u8aa4\u8655\u7406\uff1a\u6e2c\u8a66\u975e\u540c\u6b65\u4ee3\u78bc\u7684\u932f\u8aa4\u8655\u7406\u908f\u8f2f\uff0c\u78ba\u4fdd\u7cfb\u7d71\u5728\u51fa\u73fe\u932f\u8aa4\u6642\u80fd\u5920\u6b63\u78ba\u6062\u5fa9\u3002</li> <li>\u907f\u514d\u6df7\u5408\u540c\u6b65\u548c\u975e\u540c\u6b65\u4ee3\u78bc\uff1a\u5728\u6e2c\u8a66\u4e2d\u907f\u514d\u6df7\u5408\u540c\u6b65\u548c\u975e\u540c\u6b65\u4ee3\u78bc\uff0c\u9019\u53ef\u80fd\u5c0e\u81f4\u4e8b\u4ef6\u5faa\u74b0\u554f\u984c\u3002</li> </ol>"},{"location":"testing/05-asynchronous-testing/#_38","title":"\u975e\u540c\u6b65\u6e2c\u8a66\u7684\u5de5\u5177\u548c\u5eab","text":"\u5de5\u5177/\u5eab \u7528\u9014 pytest-asyncio \u70ba pytest \u63d0\u4f9b\u975e\u540c\u6b65\u6e2c\u8a66\u652f\u6301 httpx \u63d0\u4f9b\u540c\u6b65\u548c\u975e\u540c\u6b65 HTTP \u5ba2\u6236\u7aef AsyncMock \u7528\u65bc\u6a21\u64ec\u975e\u540c\u6b65\u51fd\u6578\u548c\u65b9\u6cd5 aioresponses \u6a21\u64ec\u975e\u540c\u6b65 HTTP \u8acb\u6c42 pytest-timeout \u70ba\u6e2c\u8a66\u8a2d\u7f6e\u8d85\u6642"},{"location":"testing/05-asynchronous-testing/#_39","title":"\u975e\u540c\u6b65\u6e2c\u8a66\u7684\u672a\u4f86\u8da8\u52e2","text":"<p>\u96a8\u8457\u975e\u540c\u6b65\u7de8\u7a0b\u5728 Python \u751f\u614b\u7cfb\u7d71\u4e2d\u7684\u666e\u53ca\uff0c\u975e\u540c\u6b65\u6e2c\u8a66\u5de5\u5177\u548c\u6280\u8853\u4e5f\u5728\u4e0d\u65b7\u767c\u5c55\u3002\u672a\u4f86\u7684\u8da8\u52e2\u5305\u62ec\uff1a</p> <ol> <li>\u66f4\u597d\u7684\u6e2c\u8a66\u5de5\u5177\uff1a\u66f4\u5b8c\u5584\u7684\u975e\u540c\u6b65\u6e2c\u8a66\u5de5\u5177\uff0c\u63d0\u4f9b\u66f4\u597d\u7684\u8abf\u8a66\u548c\u5831\u544a\u529f\u80fd\u3002</li> <li>\u66f4\u9ad8\u7d1a\u7684\u6a21\u64ec\u6280\u8853\uff1a\u66f4\u9ad8\u7d1a\u7684\u975e\u540c\u6b65\u6a21\u64ec\u6280\u8853\uff0c\u66f4\u5bb9\u6613\u6a21\u64ec\u8907\u96dc\u7684\u975e\u540c\u6b65\u884c\u70ba\u3002</li> <li>\u66f4\u597d\u7684\u4e26\u767c\u6e2c\u8a66\u652f\u6301\uff1a\u66f4\u597d\u7684\u5de5\u5177\u4f86\u6e2c\u8a66\u4e26\u767c\u884c\u70ba\uff0c\u8b58\u5225\u6f5b\u5728\u7684\u7af6\u614b\u689d\u4ef6\u548c\u6b7b\u9396\u3002</li> <li>\u66f4\u597d\u7684\u6027\u80fd\u6e2c\u8a66\uff1a\u66f4\u597d\u7684\u5de5\u5177\u4f86\u6e2c\u8a66\u975e\u540c\u6b65\u4ee3\u78bc\u7684\u6027\u80fd\uff0c\u8b58\u5225\u6027\u80fd\u74f6\u9838\u3002</li> </ol> <p>\u901a\u904e\u638c\u63e1\u975e\u540c\u6b65\u6e2c\u8a66\u7684\u6280\u8853\u548c\u6700\u4f73\u5be6\u8e10\uff0c\u4f60\u53ef\u4ee5\u78ba\u4fdd FastAPI \u61c9\u7528\u7a0b\u5e8f\u7684\u975e\u540c\u6b65\u4ee3\u78bc\u80fd\u5920\u6b63\u78ba\u57f7\u884c\uff0c\u63d0\u4f9b\u9ad8\u6027\u80fd\u3001\u53ef\u9760\u7684\u670d\u52d9\u3002</p>"},{"location":"testing/06-mocking/","title":"Mocking \u6280\u8853","text":""},{"location":"testing/06-mocking/#_1","title":"\u57fa\u672c\u6982\u5ff5","text":"<p>Mocking \u662f\u4e00\u7a2e\u6e2c\u8a66\u6280\u8853\uff0c\u901a\u904e\u5275\u5efa\u6a21\u64ec\u5c0d\u8c61\u4f86\u66ff\u4ee3\u771f\u5be6\u7684\u4f9d\u8cf4\u9805\uff0c\u4f7f\u6e2c\u8a66\u80fd\u5920\u5728\u9694\u96e2\u7684\u74b0\u5883\u4e2d\u9032\u884c\u3002\u5728 FastAPI \u61c9\u7528\u7a0b\u5e8f\u7684\u6e2c\u8a66\u4e2d\uff0cMocking \u6280\u8853\u5c24\u70ba\u91cd\u8981\uff0c\u56e0\u70ba\u5b83\u53ef\u4ee5\u5e6b\u52a9\u6211\u5011\u6e2c\u8a66\u8907\u96dc\u7684\u7cfb\u7d71\uff0c\u800c\u7121\u9700\u4f9d\u8cf4\u5916\u90e8\u670d\u52d9\u6216\u8cc7\u6e90\u3002</p> \u6982\u5ff5 \u8aaa\u660e Mock \u5c0d\u8c61 \u6a21\u64ec\u771f\u5be6\u5c0d\u8c61\u884c\u70ba\u7684\u5047\u5c0d\u8c61\uff0c\u53ef\u4ee5\u9810\u8a2d\u8fd4\u56de\u503c\u548c\u8a18\u9304\u8abf\u7528 Stub \u63d0\u4f9b\u9810\u5b9a\u7fa9\u97ff\u61c9\u7684\u7c21\u55ae\u5be6\u73fe\uff0c\u4e0d\u8a18\u9304\u8abf\u7528\u4fe1\u606f Spy \u8a18\u9304\u8abf\u7528\u4fe1\u606f\u4f46\u4fdd\u7559\u539f\u59cb\u884c\u70ba\u7684\u5c0d\u8c61 Fake \u5177\u6709\u5be6\u969b\u5de5\u4f5c\u5be6\u73fe\u4f46\u4e0d\u9069\u5408\u751f\u7522\u7684\u7c21\u5316\u7248\u672c Dummy \u50b3\u905e\u4f46\u4e0d\u5be6\u969b\u4f7f\u7528\u7684\u5c0d\u8c61"},{"location":"testing/06-mocking/#python-mocking","title":"Python \u4e2d\u7684 Mocking \u5de5\u5177","text":"<p>Python \u7684\u6a19\u6e96\u5eab\u63d0\u4f9b\u4e86\u5f37\u5927\u7684 Mocking \u5de5\u5177\uff0c\u4e3b\u8981\u901a\u904e <code>unittest.mock</code> \u6a21\u584a\u5be6\u73fe\u3002</p>"},{"location":"testing/06-mocking/#mock","title":"\u4e3b\u8981\u7684 Mock \u985e\u578b","text":"<pre><code>from unittest.mock import Mock, MagicMock, AsyncMock, patch, PropertyMock\n</code></pre> Mock \u985e\u578b \u7528\u9014 Mock \u57fa\u672c\u7684\u6a21\u64ec\u5c0d\u8c61\uff0c\u53ef\u4ee5\u8a2d\u7f6e\u8fd4\u56de\u503c\u548c\u526f\u4f5c\u7528 MagicMock \u589e\u5f37\u7248\u7684 Mock\uff0c\u9810\u5148\u5be6\u73fe\u4e86\u8a31\u591a\u9b54\u8853\u65b9\u6cd5 AsyncMock \u7528\u65bc\u6a21\u64ec\u975e\u540c\u6b65\u51fd\u6578\u548c\u65b9\u6cd5\u7684\u7279\u6b8a Mock PropertyMock \u7528\u65bc\u6a21\u64ec\u5c6c\u6027\u7684\u7279\u6b8a Mock patch \u7528\u65bc\u81e8\u6642\u66ff\u63db\u6a21\u584a\u548c\u985e\u7684\u88dd\u98fe\u5668\u548c\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668"},{"location":"testing/06-mocking/#mocking_1","title":"\u57fa\u672c\u7684 Mocking \u6280\u8853","text":""},{"location":"testing/06-mocking/#mock_1","title":"\u5275\u5efa\u548c\u914d\u7f6e Mock \u5c0d\u8c61","text":"<pre><code># tests/test_basic_mocking.py\nfrom unittest.mock import Mock\n\ndef test_basic_mock():\n    # \u5275\u5efa\u4e00\u500b\u57fa\u672c\u7684 Mock \u5c0d\u8c61\n    mock_object = Mock()\n\n    # \u914d\u7f6e\u8fd4\u56de\u503c\n    mock_object.method.return_value = \"mocked result\"\n\n    # \u8abf\u7528\u65b9\u6cd5\n    result = mock_object.method()\n\n    # \u9a57\u8b49\u7d50\u679c\n    assert result == \"mocked result\"\n\n    # \u9a57\u8b49\u8abf\u7528\n    mock_object.method.assert_called_once()\n</code></pre>"},{"location":"testing/06-mocking/#patch","title":"\u4f7f\u7528 patch \u88dd\u98fe\u5668","text":"<pre><code># tests/test_patch_decorator.py\nfrom unittest.mock import patch\nimport requests\nfrom app.services.user_service import get_user_data\n\n@patch(\"app.services.user_service.requests.get\")\ndef test_get_user_data(mock_get):\n    # \u914d\u7f6e\u6a21\u64ec\u97ff\u61c9\n    mock_response = Mock()\n    mock_response.status_code = 200\n    mock_response.json.return_value = {\"id\": 1, \"name\": \"Test User\"}\n    mock_get.return_value = mock_response\n\n    # \u8abf\u7528\u88ab\u6e2c\u8a66\u7684\u51fd\u6578\n    user = get_user_data(1)\n\n    # \u9a57\u8b49\u7d50\u679c\n    assert user[\"name\"] == \"Test User\"\n\n    # \u9a57\u8b49 requests.get \u88ab\u6b63\u78ba\u8abf\u7528\n    mock_get.assert_called_once_with(\"https://api.example.com/users/1\")\n</code></pre>"},{"location":"testing/06-mocking/#patch_1","title":"\u4f7f\u7528 patch \u4e0a\u4e0b\u6587\u7ba1\u7406\u5668","text":"<pre><code># tests/test_patch_context_manager.py\nfrom unittest.mock import patch, Mock\nfrom app.services.email_service import send_welcome_email\n\ndef test_send_welcome_email():\n    # \u5275\u5efa\u4e00\u500b\u7528\u6236\u5c0d\u8c61\n    user = {\"email\": \"user@example.com\", \"name\": \"Test User\"}\n\n    # \u4f7f\u7528\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u6a21\u64ec smtp \u5eab\n    with patch(\"app.services.email_service.smtplib.SMTP\") as mock_smtp:\n        # \u914d\u7f6e\u6a21\u64ec\u5c0d\u8c61\n        mock_smtp_instance = Mock()\n        mock_smtp.return_value = mock_smtp_instance\n\n        # \u8abf\u7528\u88ab\u6e2c\u8a66\u7684\u51fd\u6578\n        result = send_welcome_email(user)\n\n        # \u9a57\u8b49\u7d50\u679c\n        assert result is True\n\n        # \u9a57\u8b49 SMTP \u65b9\u6cd5\u88ab\u6b63\u78ba\u8abf\u7528\n        mock_smtp.assert_called_once_with(\"smtp.example.com\", 587)\n        mock_smtp_instance.send_message.assert_called_once()\n</code></pre>"},{"location":"testing/06-mocking/#fastapi","title":"\u6a21\u64ec FastAPI \u4f9d\u8cf4\u9805","text":"<p>FastAPI \u7684\u4f9d\u8cf4\u6ce8\u5165\u7cfb\u7d71\u662f\u5176\u6838\u5fc3\u7279\u6027\u4e4b\u4e00\uff0c\u6e2c\u8a66\u6642\u9700\u8981\u6709\u6548\u5730\u6a21\u64ec\u9019\u4e9b\u4f9d\u8cf4\u9805\u3002</p>"},{"location":"testing/06-mocking/#appdependency_overrides","title":"\u4f7f\u7528 app.dependency_overrides","text":"<p>FastAPI \u63d0\u4f9b\u4e86\u4e00\u7a2e\u8986\u84cb\u4f9d\u8cf4\u9805\u7684\u6a5f\u5236\uff0c\u9019\u5728\u6e2c\u8a66\u4e2d\u975e\u5e38\u6709\u7528\uff1a</p> <pre><code># tests/api/test_dependency_override.py\nfrom fastapi.testclient import TestClient\nfrom app.main import app\nfrom app.dependencies.auth import get_current_user\n\nclient = TestClient(app)\n\ndef test_protected_endpoint_with_override():\n    # \u5275\u5efa\u4e00\u500b\u66ff\u4ee3\u4f9d\u8cf4\n    def override_get_current_user():\n        return {\"id\": 1, \"username\": \"testuser\"}\n\n    # \u8986\u84cb\u4f9d\u8cf4\n    app.dependency_overrides[get_current_user] = override_get_current_user\n\n    try:\n        # \u767c\u9001\u8acb\u6c42\n        response = client.get(\"/items/me\")\n\n        # \u9a57\u8b49\u97ff\u61c9\n        assert response.status_code == 200\n        assert response.json() == {\"owner_id\": 1, \"items\": []}\n    finally:\n        # \u6e05\u7406\u4f9d\u8cf4\u8986\u84cb\n        app.dependency_overrides = {}\n</code></pre>"},{"location":"testing/06-mocking/#_2","title":"\u6a21\u64ec\u6578\u64da\u5eab\u64cd\u4f5c","text":"<p>\u6e2c\u8a66\u6578\u64da\u5eab\u64cd\u4f5c\u6642\uff0c\u6211\u5011\u901a\u5e38\u5e0c\u671b\u907f\u514d\u5be6\u969b\u7684\u6578\u64da\u5eab\u4ea4\u4e92\uff0c\u53ef\u4ee5\u901a\u904e\u6a21\u64ec ORM \u5c64\u6216\u4f7f\u7528\u5167\u5b58\u6578\u64da\u5eab\u4f86\u5be6\u73fe\u3002</p>"},{"location":"testing/06-mocking/#sqlalchemy","title":"\u6a21\u64ec SQLAlchemy \u6703\u8a71","text":"<pre><code># tests/repositories/test_user_repository.py\nfrom unittest.mock import Mock\nfrom app.repositories.user_repository import UserRepository\nfrom app.models.user import User\n\ndef test_get_user_by_id():\n    # \u5275\u5efa\u6a21\u64ec\u7684 SQLAlchemy \u6703\u8a71\n    mock_session = Mock()\n\n    # \u914d\u7f6e\u6a21\u64ec\u67e5\u8a62\u7d50\u679c\n    mock_user = Mock(spec=User)\n    mock_user.id = 1\n    mock_user.username = \"testuser\"\n    mock_user.email = \"test@example.com\"\n\n    # \u914d\u7f6e\u6a21\u64ec\u67e5\u8a62\u93c8\n    mock_session.query.return_value.filter.return_value.first.return_value = mock_user\n\n    # \u5275\u5efa\u5b58\u5132\u5eab\u4e26\u6ce8\u5165\u6a21\u64ec\u6703\u8a71\n    repo = UserRepository(mock_session)\n\n    # \u8abf\u7528\u65b9\u6cd5\n    user = repo.get_by_id(1)\n\n    # \u9a57\u8b49\u7d50\u679c\n    assert user.id == 1\n    assert user.username == \"testuser\"\n    assert user.email == \"test@example.com\"\n\n    # \u9a57\u8b49\u67e5\u8a62\u93c8\n    mock_session.query.assert_called_once_with(User)\n</code></pre>"},{"location":"testing/06-mocking/#sqlalchemy_1","title":"\u6a21\u64ec\u975e\u540c\u6b65 SQLAlchemy \u6703\u8a71","text":"<pre><code># tests/repositories/test_async_user_repository.py\nimport pytest\nfrom unittest.mock import AsyncMock, Mock\nfrom sqlalchemy.ext.asyncio import AsyncSession\nfrom app.repositories.async_user_repository import AsyncUserRepository\nfrom app.models.user import User\n\n@pytest.mark.asyncio\nasync def test_async_get_user_by_id():\n    # \u5275\u5efa\u6a21\u64ec\u7684\u975e\u540c\u6b65 SQLAlchemy \u6703\u8a71\n    mock_session = AsyncMock(spec=AsyncSession)\n\n    # \u914d\u7f6e\u6a21\u64ec\u67e5\u8a62\u7d50\u679c\n    mock_user = Mock(spec=User)\n    mock_user.id = 1\n    mock_user.username = \"testuser\"\n    mock_user.email = \"test@example.com\"\n\n    # \u914d\u7f6e\u6a21\u64ec\u57f7\u884c\u7d50\u679c\n    mock_result = Mock()\n    mock_result.scalars.return_value.first.return_value = mock_user\n    mock_session.execute.return_value = mock_result\n\n    # \u5275\u5efa\u5b58\u5132\u5eab\u4e26\u6ce8\u5165\u6a21\u64ec\u6703\u8a71\n    repo = AsyncUserRepository(mock_session)\n\n    # \u8abf\u7528\u65b9\u6cd5\n    user = await repo.get_by_id(1)\n\n    # \u9a57\u8b49\u7d50\u679c\n    assert user.id == 1\n    assert user.username == \"testuser\"\n    assert user.email == \"test@example.com\"\n</code></pre>"},{"location":"testing/06-mocking/#api","title":"\u6a21\u64ec\u5916\u90e8 API \u548c\u670d\u52d9","text":"<p>\u5728\u6e2c\u8a66\u4e2d\uff0c\u6211\u5011\u901a\u5e38\u9700\u8981\u6a21\u64ec\u5916\u90e8 API \u548c\u670d\u52d9\u7684\u97ff\u61c9\uff0c\u4ee5\u907f\u514d\u5be6\u969b\u7684\u7db2\u7d61\u8acb\u6c42\u3002</p>"},{"location":"testing/06-mocking/#http","title":"\u6a21\u64ec HTTP \u8acb\u6c42","text":"<pre><code># tests/services/test_external_api_service.py\nfrom unittest.mock import patch, Mock\nfrom app.services.weather_service import get_current_weather\n\ndef test_get_current_weather():\n    # \u6a21\u64ec\u6210\u529f\u7684 API \u97ff\u61c9\n    mock_response = Mock()\n    mock_response.status_code = 200\n    mock_response.json.return_value = {\n        \"location\": \"New York\",\n        \"temperature\": 22,\n        \"conditions\": \"Sunny\"\n    }\n\n    # \u4f7f\u7528 patch \u6a21\u64ec requests.get\n    with patch(\"app.services.weather_service.requests.get\", return_value=mock_response) as mock_get:\n        # \u8abf\u7528\u670d\u52d9\n        weather = get_current_weather(\"New York\")\n\n        # \u9a57\u8b49\u7d50\u679c\n        assert weather[\"temperature\"] == 22\n        assert weather[\"conditions\"] == \"Sunny\"\n\n        # \u9a57\u8b49 API \u8abf\u7528\n        mock_get.assert_called_once_with(\n            \"https://api.weatherservice.com/current\",\n            params={\"city\": \"New York\", \"units\": \"metric\"}\n        )\n</code></pre>"},{"location":"testing/06-mocking/#http_1","title":"\u6a21\u64ec\u975e\u540c\u6b65 HTTP \u8acb\u6c42","text":"<pre><code># tests/services/test_async_external_api_service.py\nimport pytest\nfrom unittest.mock import patch, AsyncMock\nfrom app.services.async_weather_service import get_current_weather_async\n\n@pytest.mark.asyncio\nasync def test_get_current_weather_async():\n    # \u5275\u5efa\u6a21\u64ec\u7684\u975e\u540c\u6b65\u97ff\u61c9\n    mock_response = AsyncMock()\n    mock_response.status_code = 200\n    mock_response.json.return_value = {\n        \"location\": \"New York\",\n        \"temperature\": 22,\n        \"conditions\": \"Sunny\"\n    }\n\n    # \u6a21\u64ec httpx.AsyncClient.get \u65b9\u6cd5\n    with patch(\"httpx.AsyncClient.get\", new_callable=AsyncMock) as mock_get:\n        mock_get.return_value = mock_response\n\n        # \u8abf\u7528\u975e\u540c\u6b65\u670d\u52d9\n        weather = await get_current_weather_async(\"New York\")\n\n        # \u9a57\u8b49\u7d50\u679c\n        assert weather[\"temperature\"] == 22\n        assert weather[\"conditions\"] == \"Sunny\"\n</code></pre>"},{"location":"testing/06-mocking/#_3","title":"\u6a21\u64ec\u6587\u4ef6\u7cfb\u7d71\u64cd\u4f5c","text":"<p>\u6e2c\u8a66\u6d89\u53ca\u6587\u4ef6\u7cfb\u7d71\u64cd\u4f5c\u7684\u4ee3\u78bc\u6642\uff0c\u6211\u5011\u53ef\u4ee5\u6a21\u64ec\u6587\u4ef6\u7cfb\u7d71\u4f86\u907f\u514d\u5be6\u969b\u7684\u6587\u4ef6\u64cd\u4f5c\u3002</p>"},{"location":"testing/06-mocking/#pyfakefs","title":"\u4f7f\u7528 pyfakefs \u6a21\u64ec\u6587\u4ef6\u7cfb\u7d71","text":"<pre><code>pip install pyfakefs\n</code></pre> <pre><code># tests/utils/test_file_utils.py\nimport pytest\nfrom pyfakefs.fake_filesystem_unittest import Patcher\nfrom app.utils.file_utils import save_user_avatar\n\ndef test_save_user_avatar():\n    # \u5275\u5efa\u6a21\u64ec\u7684\u6587\u4ef6\u6578\u64da\n    avatar_data = b\"fake image data\"\n    user_id = 123\n\n    # \u4f7f\u7528 pyfakefs \u6a21\u64ec\u6587\u4ef6\u7cfb\u7d71\n    with Patcher() as patcher:\n        # \u5275\u5efa\u5fc5\u8981\u7684\u76ee\u9304\u7d50\u69cb\n        patcher.fs.create_dir(\"/app/uploads/avatars\")\n\n        # \u8abf\u7528\u88ab\u6e2c\u8a66\u7684\u51fd\u6578\n        file_path = save_user_avatar(user_id, avatar_data)\n\n        # \u9a57\u8b49\u6587\u4ef6\u8def\u5f91\n        assert file_path == f\"/app/uploads/avatars/{user_id}.png\"\n\n        # \u9a57\u8b49\u6587\u4ef6\u5167\u5bb9\n        with open(file_path, \"rb\") as f:\n            saved_data = f.read()\n            assert saved_data == avatar_data\n</code></pre>"},{"location":"testing/06-mocking/#_4","title":"\u6a21\u64ec\u6642\u9593\u548c\u65e5\u671f","text":"<p>\u6e2c\u8a66\u6d89\u53ca\u6642\u9593\u548c\u65e5\u671f\u7684\u4ee3\u78bc\u6642\uff0c\u6211\u5011\u9700\u8981\u80fd\u5920\u63a7\u5236\u7576\u524d\u6642\u9593\uff0c\u4ee5\u4fbf\u6e2c\u8a66\u5404\u7a2e\u60c5\u6cc1\u3002</p>"},{"location":"testing/06-mocking/#freezegun","title":"\u4f7f\u7528 freezegun \u6a21\u64ec\u6642\u9593","text":"<pre><code>pip install freezegun\n</code></pre> <pre><code># tests/utils/test_time_utils.py\nfrom datetime import datetime, timedelta\nfrom freezegun import freeze_time\nfrom app.utils.time_utils import is_token_expired, get_token_expiration\n\ndef test_is_token_expired():\n    # \u5275\u5efa\u4e00\u500b\u904e\u671f\u7684\u4ee4\u724c\u6642\u9593\uff081\u5c0f\u6642\u524d\uff09\n    expired_time = datetime.utcnow() - timedelta(hours=1)\n\n    # \u6e2c\u8a66\u904e\u671f\u7684\u4ee4\u724c\n    assert is_token_expired(expired_time) is True\n\n    # \u5275\u5efa\u4e00\u500b\u672a\u904e\u671f\u7684\u4ee4\u724c\u6642\u9593\uff081\u5c0f\u6642\u5f8c\uff09\n    valid_time = datetime.utcnow() + timedelta(hours=1)\n\n    # \u6e2c\u8a66\u672a\u904e\u671f\u7684\u4ee4\u724c\n    assert is_token_expired(valid_time) is False\n\n@freeze_time(\"2023-01-01 12:00:00\")\ndef test_get_token_expiration():\n    # \u5728\u51cd\u7d50\u7684\u6642\u9593\u9ede\u8abf\u7528\u51fd\u6578\n    expiration = get_token_expiration()\n\n    # \u9a57\u8b49\u7d50\u679c - \u61c9\u8a72\u662f\u51cd\u7d50\u6642\u9593\u52a0\u4e0a 24 \u5c0f\u6642\n    expected = datetime(2023, 1, 2, 12, 0, 0)\n    assert expiration == expected\n</code></pre>"},{"location":"testing/06-mocking/#_5","title":"\u6a21\u64ec\u74b0\u5883\u8b8a\u91cf","text":"<p>\u6e2c\u8a66\u4f9d\u8cf4\u65bc\u74b0\u5883\u8b8a\u91cf\u7684\u4ee3\u78bc\u6642\uff0c\u6211\u5011\u9700\u8981\u80fd\u5920\u63a7\u5236\u9019\u4e9b\u8b8a\u91cf\u7684\u503c\u3002</p>"},{"location":"testing/06-mocking/#monkeypatch","title":"\u4f7f\u7528 monkeypatch \u6a21\u64ec\u74b0\u5883\u8b8a\u91cf","text":"<pre><code># tests/config/test_settings.py\nfrom app.config import get_settings\n\ndef test_get_settings_development(monkeypatch):\n    # \u8a2d\u7f6e\u74b0\u5883\u8b8a\u91cf\n    monkeypatch.setenv(\"ENVIRONMENT\", \"development\")\n    monkeypatch.setenv(\"DATABASE_URL\", \"postgresql://dev:dev@localhost/dev_db\")\n    monkeypatch.setenv(\"API_KEY\", \"dev_api_key\")\n\n    # \u7372\u53d6\u8a2d\u7f6e\n    settings = get_settings()\n\n    # \u9a57\u8b49\u8a2d\u7f6e\n    assert settings.environment == \"development\"\n    assert settings.database_url == \"postgresql://dev:dev@localhost/dev_db\"\n    assert settings.api_key == \"dev_api_key\"\n    assert settings.debug is True  # \u958b\u767c\u74b0\u5883\u9ed8\u8a8d\u555f\u7528\u8abf\u8a66\n</code></pre>"},{"location":"testing/06-mocking/#mocking_2","title":"\u9ad8\u7d1a Mocking \u6280\u8853","text":""},{"location":"testing/06-mocking/#_6","title":"\u6a21\u64ec\u7570\u5e38\u548c\u526f\u4f5c\u7528","text":"<pre><code># tests/services/test_exception_handling.py\nfrom unittest.mock import patch\nimport pytest\nimport requests\nfrom app.services.user_service import get_user_data\n\ndef test_get_user_data_connection_error():\n    # \u6a21\u64ec requests.get \u62cb\u51fa\u9023\u63a5\u932f\u8aa4\n    with patch(\"app.services.user_service.requests.get\", side_effect=requests.ConnectionError(\"Connection failed\")):\n        # \u8abf\u7528\u51fd\u6578\u4e26\u9a57\u8b49\u5b83\u8655\u7406\u7570\u5e38\n        with pytest.raises(ValueError) as exc_info:\n            get_user_data(1)\n\n        # \u9a57\u8b49\u932f\u8aa4\u6d88\u606f\n        assert \"Failed to connect to API\" in str(exc_info.value)\n</code></pre>"},{"location":"testing/06-mocking/#side_effect","title":"\u4f7f\u7528 side_effect \u6a21\u64ec\u8907\u96dc\u884c\u70ba","text":"<pre><code># tests/services/test_side_effects.py\nfrom unittest.mock import Mock, patch\n\ndef test_retry_mechanism():\n    # \u5275\u5efa\u4e00\u500b\u8a08\u6578\u5668\u4f86\u8ddf\u8e2a\u8abf\u7528\u6b21\u6578\n    call_count = 0\n\n    # \u5b9a\u7fa9\u4e00\u500b side_effect \u51fd\u6578\uff0c\u524d\u5169\u6b21\u62cb\u51fa\u7570\u5e38\uff0c\u7b2c\u4e09\u6b21\u8fd4\u56de\u6210\u529f\n    def side_effect(*args, **kwargs):\n        nonlocal call_count\n        call_count += 1\n        if call_count &lt; 3:\n            raise ConnectionError(\"Connection failed\")\n\n        mock_response = Mock()\n        mock_response.status_code = 200\n        mock_response.json.return_value = {\"data\": \"success\"}\n        return mock_response\n\n    # \u6a21\u64ec requests.get \u4f7f\u7528\u6211\u5011\u7684 side_effect\n    with patch(\"app.services.resilient_service.requests.get\", side_effect=side_effect):\n        from app.services.resilient_service import fetch_with_retry\n\n        # \u8abf\u7528\u5177\u6709\u91cd\u8a66\u6a5f\u5236\u7684\u51fd\u6578\n        result = fetch_with_retry(\"https://api.example.com/data\")\n\n        # \u9a57\u8b49\u7d50\u679c\n        assert result == {\"data\": \"success\"}\n        assert call_count == 3  # \u9a57\u8b49\u51fd\u6578\u88ab\u8abf\u7528\u4e86 3 \u6b21\n</code></pre>"},{"location":"testing/06-mocking/#fastapi_1","title":"\u6a21\u64ec FastAPI \u8acb\u6c42\u548c\u97ff\u61c9\u5c0d\u8c61","text":"<p>\u6e2c\u8a66 FastAPI \u7684\u4f9d\u8cf4\u9805\u548c\u4e2d\u9593\u4ef6\u6642\uff0c\u6211\u5011\u9700\u8981\u6a21\u64ec FastAPI \u7684\u8acb\u6c42\u548c\u97ff\u61c9\u5c0d\u8c61\u3002</p>"},{"location":"testing/06-mocking/#fastapi_2","title":"\u6a21\u64ec FastAPI \u8acb\u6c42","text":"<pre><code># tests/middleware/test_request_logging.py\nfrom unittest.mock import Mock, patch\nfrom fastapi import Request\nfrom app.middleware.request_logging import log_request\n\nasync def test_log_request_middleware():\n    # \u5275\u5efa\u6a21\u64ec\u7684\u8acb\u6c42\u5c0d\u8c61\n    mock_request = Mock(spec=Request)\n    mock_request.method = \"GET\"\n    mock_request.url.path = \"/api/users\"\n    mock_request.headers = {\"User-Agent\": \"Test Client\"}\n    mock_request.client.host = \"127.0.0.1\"\n\n    # \u5275\u5efa\u6a21\u64ec\u7684 call_next \u51fd\u6578\n    async def mock_call_next(request):\n        return Mock(status_code=200)\n\n    # \u6a21\u64ec\u65e5\u8a8c\u8a18\u9304\u5668\n    with patch(\"app.middleware.request_logging.logger\") as mock_logger:\n        # \u8abf\u7528\u4e2d\u9593\u4ef6\n        response = await log_request(mock_request, mock_call_next)\n\n        # \u9a57\u8b49\u97ff\u61c9\n        assert response.status_code == 200\n\n        # \u9a57\u8b49\u65e5\u8a8c\u8a18\u9304\n        mock_logger.info.assert_called_once()\n</code></pre>"},{"location":"testing/06-mocking/#websocket","title":"\u6a21\u64ec WebSocket \u9023\u63a5","text":"<p>\u6e2c\u8a66 WebSocket \u7aef\u9ede\u6642\uff0c\u6211\u5011\u9700\u8981\u6a21\u64ec WebSocket \u9023\u63a5\u3002</p> <pre><code># tests/api/test_websocket.py\nfrom unittest.mock import AsyncMock, patch\nimport pytest\nfrom fastapi import WebSocket, WebSocketDisconnect\nfrom app.routers.websocket import websocket_endpoint\n\n@pytest.mark.asyncio\nasync def test_websocket_endpoint():\n    # \u5275\u5efa\u6a21\u64ec\u7684 WebSocket \u5c0d\u8c61\n    mock_websocket = AsyncMock(spec=WebSocket)\n\n    # \u914d\u7f6e receive_text \u65b9\u6cd5\uff0c\u7b2c\u4e00\u6b21\u8fd4\u56de\u6d88\u606f\uff0c\u7b2c\u4e8c\u6b21\u62cb\u51fa\u7570\u5e38\n    mock_websocket.receive_text.side_effect = [\n        \"Hello WebSocket\",\n        WebSocketDisconnect()\n    ]\n\n    # \u8abf\u7528 WebSocket \u7aef\u9ede\n    with patch(\"app.routers.websocket.manager\") as mock_manager:\n        try:\n            await websocket_endpoint(mock_websocket, 1)\n        except WebSocketDisconnect:\n            pass\n\n        # \u9a57\u8b49 WebSocket \u65b9\u6cd5\u88ab\u8abf\u7528\n        mock_websocket.accept.assert_called_once()\n        mock_websocket.receive_text.assert_called()\n\n        # \u9a57\u8b49\u9023\u63a5\u7ba1\u7406\u5668\u65b9\u6cd5\u88ab\u8abf\u7528\n        mock_manager.connect.assert_called_once_with(mock_websocket)\n        mock_manager.disconnect.assert_called_once_with(mock_websocket)\n</code></pre>"},{"location":"testing/06-mocking/#redis","title":"\u6a21\u64ec Redis \u548c\u7de9\u5b58\u64cd\u4f5c","text":"<p>\u6e2c\u8a66\u4f7f\u7528 Redis \u6216\u5176\u4ed6\u7de9\u5b58\u7cfb\u7d71\u7684\u4ee3\u78bc\u6642\uff0c\u6211\u5011\u53ef\u4ee5\u6a21\u64ec\u9019\u4e9b\u4f9d\u8cf4\u9805\u3002</p> <pre><code># tests/services/test_cache_service.py\nfrom unittest.mock import Mock, patch\nfrom app.services.cache_service import get_cached_user\n\ndef test_get_cached_user_hit():\n    # \u6a21\u64ec Redis \u5ba2\u6236\u7aef\n    mock_redis = Mock()\n    mock_redis.get.return_value = '{\"id\": 1, \"username\": \"cacheduser\"}'\n\n    # \u4f7f\u7528 patch \u6a21\u64ec Redis \u9023\u63a5\n    with patch(\"app.services.cache_service.redis_client\", mock_redis):\n        # \u8abf\u7528\u7de9\u5b58\u670d\u52d9\n        user = get_cached_user(1)\n\n        # \u9a57\u8b49\u7d50\u679c\n        assert user[\"id\"] == 1\n        assert user[\"username\"] == \"cacheduser\"\n\n        # \u9a57\u8b49 Redis \u8abf\u7528\n        mock_redis.get.assert_called_once_with(\"user:1\")\n</code></pre>"},{"location":"testing/06-mocking/#jwt","title":"\u6a21\u64ec JWT \u4ee4\u724c\u9a57\u8b49","text":"<p>\u6e2c\u8a66\u6d89\u53ca JWT \u4ee4\u724c\u9a57\u8b49\u7684\u4ee3\u78bc\u6642\uff0c\u6211\u5011\u9700\u8981\u6a21\u64ec\u4ee4\u724c\u89e3\u78bc\u548c\u9a57\u8b49\u904e\u7a0b\u3002</p> <pre><code># tests/auth/test_jwt.py\nfrom unittest.mock import patch\nimport pytest\nfrom app.auth.jwt import verify_token\n\ndef test_verify_token_valid():\n    # \u6a21\u64ec jwt.decode \u8fd4\u56de\u6709\u6548\u7684\u8ca0\u8f09\n    with patch(\"app.auth.jwt.jwt.decode\") as mock_decode:\n        mock_decode.return_value = {\"sub\": \"user123\", \"exp\": 9999999999}\n\n        # \u9a57\u8b49\u4ee4\u724c\n        user_id = verify_token(\"valid_token\")\n\n        # \u9a57\u8b49\u7d50\u679c\n        assert user_id == \"user123\"\n        mock_decode.assert_called_once()\n\ndef test_verify_token_expired():\n    # \u6a21\u64ec jwt.decode \u62cb\u51fa\u904e\u671f\u7570\u5e38\n    with patch(\"app.auth.jwt.jwt.decode\") as mock_decode:\n        from jwt.exceptions import ExpiredSignatureError\n        mock_decode.side_effect = ExpiredSignatureError(\"Token expired\")\n\n        # \u9a57\u8b49\u4ee4\u724c\n        user_id = verify_token(\"expired_token\")\n\n        # \u9a57\u8b49\u7d50\u679c\n        assert user_id is None\n        mock_decode.assert_called_once()\n</code></pre>"},{"location":"testing/06-mocking/#oauth2","title":"\u6a21\u64ec OAuth2 \u8a8d\u8b49\u6d41\u7a0b","text":"<p>\u6e2c\u8a66 OAuth2 \u8a8d\u8b49\u6d41\u7a0b\u6642\uff0c\u6211\u5011\u9700\u8981\u6a21\u64ec\u6388\u6b0a\u670d\u52d9\u5668\u7684\u97ff\u61c9\u3002</p> <pre><code># tests/auth/test_oauth2.py\nfrom unittest.mock import patch, Mock\nimport pytest\nfrom app.auth.oauth2 import get_token_from_code\n\ndef test_get_token_from_code_success():\n    # \u6a21\u64ec\u6210\u529f\u7684\u4ee4\u724c\u97ff\u61c9\n    mock_response = Mock()\n    mock_response.status_code = 200\n    mock_response.json.return_value = {\n        \"access_token\": \"mock_access_token\",\n        \"token_type\": \"bearer\",\n        \"expires_in\": 3600\n    }\n\n    # \u6a21\u64ec requests.post\n    with patch(\"app.auth.oauth2.requests.post\", return_value=mock_response) as mock_post:\n        # \u7372\u53d6\u4ee4\u724c\n        token_info = get_token_from_code(\"auth_code\")\n\n        # \u9a57\u8b49\u7d50\u679c\n        assert token_info[\"access_token\"] == \"mock_access_token\"\n        assert token_info[\"token_type\"] == \"bearer\"\n\n        # \u9a57\u8b49 API \u8abf\u7528\n        mock_post.assert_called_once()\n        call_args = mock_post.call_args[1]\n        assert \"code=auth_code\" in call_args[\"data\"]\n</code></pre>"},{"location":"testing/06-mocking/#_7","title":"\u6a21\u64ec\u6578\u64da\u5eab\u9077\u79fb\u548c\u7a2e\u5b50\u6578\u64da","text":"<p>\u6e2c\u8a66\u6d89\u53ca\u6578\u64da\u5eab\u9077\u79fb\u548c\u7a2e\u5b50\u6578\u64da\u7684\u4ee3\u78bc\u6642\uff0c\u6211\u5011\u53ef\u4ee5\u6a21\u64ec\u9019\u4e9b\u64cd\u4f5c\u3002</p> <pre><code># tests/db/test_migrations.py\nfrom unittest.mock import patch, Mock\nimport pytest\nfrom app.db.migrations import run_migrations\n\ndef test_run_migrations():\n    # \u6a21\u64ec Alembic \u547d\u4ee4\n    with patch(\"app.db.migrations.command\") as mock_command:\n        # \u8abf\u7528\u9077\u79fb\u51fd\u6578\n        run_migrations()\n\n        # \u9a57\u8b49 Alembic \u547d\u4ee4\u88ab\u8abf\u7528\n        mock_command.upgrade.assert_called_once_with(\"head\")\n</code></pre>"},{"location":"testing/06-mocking/#mocking_3","title":"Mocking \u7684\u6700\u4f73\u5be6\u8e10","text":""},{"location":"testing/06-mocking/#_8","title":"\u53ea\u6a21\u64ec\u76f4\u63a5\u4f9d\u8cf4\u9805","text":"<p>\u6a21\u64ec\u61c9\u8a72\u96c6\u4e2d\u5728\u88ab\u6e2c\u8a66\u4ee3\u78bc\u76f4\u63a5\u4f9d\u8cf4\u7684\u7d44\u4ef6\u4e0a\uff0c\u800c\u4e0d\u662f\u66f4\u6df1\u5c64\u6b21\u7684\u4f9d\u8cf4\u9805\u3002\u9019\u6a23\u53ef\u4ee5\u78ba\u4fdd\u6e2c\u8a66\u66f4\u52a0\u96c6\u4e2d\u548c\u53ef\u7dad\u8b77\u3002</p> <pre><code># \u597d\u7684\u505a\u6cd5\ndef test_user_service():\n    # \u76f4\u63a5\u6a21\u64ec\u7528\u6236\u5b58\u5132\u5eab\n    mock_repo = Mock()\n    mock_repo.get_by_id.return_value = {\"id\": 1, \"name\": \"Test User\"}\n\n    # \u6ce8\u5165\u6a21\u64ec\u4f9d\u8cf4\n    service = UserService(user_repository=mock_repo)\n\n    # \u6e2c\u8a66\u670d\u52d9\n    user = service.get_user(1)\n    assert user[\"name\"] == \"Test User\"\n</code></pre>"},{"location":"testing/06-mocking/#_9","title":"\u907f\u514d\u904e\u5ea6\u6a21\u64ec","text":"<p>\u904e\u5ea6\u6a21\u64ec\u6703\u4f7f\u6e2c\u8a66\u8b8a\u5f97\u8106\u5f31\uff0c\u96e3\u4ee5\u7dad\u8b77\uff0c\u4e26\u4e14\u53ef\u80fd\u7121\u6cd5\u767c\u73fe\u5be6\u969b\u554f\u984c\u3002</p> <pre><code># \u907f\u514d\u9019\u6a23\u505a\ndef test_over_mocking():\n    # \u6a21\u64ec\u592a\u591a\u7d30\u7bc0\n    with patch(\"module.Class\") as MockClass:\n        instance = MockClass.return_value\n        instance.method1.return_value.method2.return_value.method3.return_value = \"result\"\n\n        # \u9019\u6a23\u7684\u6e2c\u8a66\u8207\u5be6\u73fe\u7d30\u7bc0\u904e\u5ea6\u8026\u5408\n</code></pre>"},{"location":"testing/06-mocking/#fixtures","title":"\u4f7f\u7528\u593e\u5177\uff08Fixtures\uff09\u7d44\u7e54\u6a21\u64ec","text":"<p>\u4f7f\u7528 pytest \u593e\u5177\u4f86\u7d44\u7e54\u548c\u91cd\u7528\u6a21\u64ec\u5c0d\u8c61\uff0c\u4f7f\u6e2c\u8a66\u66f4\u52a0\u6e05\u6670\u548c\u53ef\u7dad\u8b77\u3002</p> <pre><code># tests/conftest.py\nimport pytest\nfrom unittest.mock import Mock, patch\n\n@pytest.fixture\ndef mock_user_repo():\n    mock_repo = Mock()\n    mock_repo.get_by_id.return_value = {\"id\": 1, \"name\": \"Test User\"}\n    mock_repo.get_by_email.return_value = {\"id\": 1, \"email\": \"test@example.com\"}\n    return mock_repo\n\n@pytest.fixture\ndef mock_auth_service():\n    with patch(\"app.services.auth_service.AuthService\") as MockAuthService:\n        instance = MockAuthService.return_value\n        instance.verify_password.return_value = True\n        instance.create_token.return_value = \"mock_token\"\n        yield instance\n</code></pre>"},{"location":"testing/06-mocking/#_10","title":"\u9a57\u8b49\u6a21\u64ec\u8abf\u7528","text":"<p>\u4e0d\u50c5\u8981\u6e2c\u8a66\u7d50\u679c\uff0c\u9084\u8981\u9a57\u8b49\u6a21\u64ec\u5c0d\u8c61\u662f\u5426\u6309\u9810\u671f\u88ab\u8abf\u7528\u3002</p> <pre><code>def test_create_user(mock_user_repo, mock_email_service):\n    # \u5275\u5efa\u670d\u52d9\n    service = UserService(user_repository=mock_user_repo, email_service=mock_email_service)\n\n    # \u8abf\u7528\u65b9\u6cd5\n    service.create_user({\"name\": \"New User\", \"email\": \"new@example.com\"})\n\n    # \u9a57\u8b49\u5b58\u5132\u5eab\u65b9\u6cd5\u88ab\u8abf\u7528\n    mock_user_repo.create.assert_called_once()\n\n    # \u9a57\u8b49\u96fb\u5b50\u90f5\u4ef6\u670d\u52d9\u88ab\u8abf\u7528\n    mock_email_service.send_welcome_email.assert_called_once_with(\"new@example.com\")\n</code></pre>"},{"location":"testing/06-mocking/#_11","title":"\u7e3d\u7d50","text":"<p>Mocking \u662f\u6e2c\u8a66 FastAPI \u61c9\u7528\u7a0b\u5e8f\u7684\u5f37\u5927\u5de5\u5177\uff0c\u5b83\u5141\u8a31\u6211\u5011\u5728\u9694\u96e2\u7684\u74b0\u5883\u4e2d\u6e2c\u8a66\u4ee3\u78bc\uff0c\u800c\u7121\u9700\u4f9d\u8cf4\u5916\u90e8\u670d\u52d9\u6216\u8cc7\u6e90\u3002\u901a\u904e\u4f7f\u7528 Python \u7684 <code>unittest.mock</code> \u6a21\u584a\u548c\u5176\u4ed6\u5de5\u5177\uff0c\u6211\u5011\u53ef\u4ee5\u6709\u6548\u5730\u6a21\u64ec\u5404\u7a2e\u4f9d\u8cf4\u9805\uff0c\u5305\u62ec\u6578\u64da\u5eab\u3001\u5916\u90e8 API\u3001\u6587\u4ef6\u7cfb\u7d71\u548c\u6642\u9593\u3002</p> <p>\u95dc\u9375\u9ede\uff1a</p> <ol> <li>\u9078\u64c7\u6b63\u78ba\u7684\u6a21\u64ec\u985e\u578b\uff1a\u6839\u64da\u9700\u8981\u9078\u64c7 Mock\u3001MagicMock\u3001AsyncMock \u6216\u5176\u4ed6\u985e\u578b\u3002</li> <li>\u53ea\u6a21\u64ec\u76f4\u63a5\u4f9d\u8cf4\u9805\uff1a\u907f\u514d\u904e\u5ea6\u6a21\u64ec\uff0c\u5c08\u6ce8\u65bc\u88ab\u6e2c\u8a66\u4ee3\u78bc\u7684\u76f4\u63a5\u4f9d\u8cf4\u9805\u3002</li> <li>\u4f7f\u7528 patch \u88dd\u98fe\u5668\u548c\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff1a\u81e8\u6642\u66ff\u63db\u6a21\u584a\u548c\u985e\uff0c\u4f7f\u6e2c\u8a66\u66f4\u52a0\u9694\u96e2\u3002</li> <li>\u9a57\u8b49\u6a21\u64ec\u8abf\u7528\uff1a\u78ba\u4fdd\u6a21\u64ec\u5c0d\u8c61\u6309\u9810\u671f\u88ab\u8abf\u7528\uff0c\u5305\u62ec\u8abf\u7528\u6b21\u6578\u3001\u53c3\u6578\u7b49\u3002</li> <li>\u4f7f\u7528\u593e\u5177\u7d44\u7e54\u6a21\u64ec\uff1a\u901a\u904e pytest \u593e\u5177\u91cd\u7528\u6a21\u64ec\u5c0d\u8c61\uff0c\u4f7f\u6e2c\u8a66\u66f4\u52a0\u6e05\u6670\u548c\u53ef\u7dad\u8b77\u3002</li> <li>\u6a21\u64ec\u975e\u540c\u6b65\u4ee3\u78bc\uff1a\u4f7f\u7528 AsyncMock \u6a21\u64ec\u975e\u540c\u6b65\u51fd\u6578\u548c\u65b9\u6cd5\uff0c\u78ba\u4fdd\u975e\u540c\u6b65\u4ee3\u78bc\u7684\u6b63\u78ba\u6e2c\u8a66\u3002</li> </ol> <p>\u901a\u904e\u638c\u63e1\u9019\u4e9b Mocking \u6280\u8853\uff0c\u4f60\u53ef\u4ee5\u7de8\u5beb\u66f4\u52a0\u5065\u58ef\u3001\u53ef\u9760\u7684\u6e2c\u8a66\uff0c\u78ba\u4fdd FastAPI \u61c9\u7528\u7a0b\u5e8f\u7684\u8cea\u91cf\u548c\u7a69\u5b9a\u6027\u3002</p>"},{"location":"testing/07-best-practice/","title":"\u6e2c\u8a66\u6700\u4f73\u5be6\u8e10","text":""},{"location":"testing/07-best-practice/#_2","title":"\u6e2c\u8a66\u67b6\u69cb\u8207\u7d44\u7e54","text":"<p>\u826f\u597d\u7684\u6e2c\u8a66\u67b6\u69cb\u548c\u7d44\u7e54\u662f\u78ba\u4fdd\u6e2c\u8a66\u53ef\u7dad\u8b77\u6027\u548c\u53ef\u8b80\u6027\u7684\u95dc\u9375\u3002\u5728 FastAPI \u61c9\u7528\u7a0b\u5e8f\u4e2d\uff0c\u6e2c\u8a66\u61c9\u8a72\u9075\u5faa\u4e00\u5b9a\u7684\u7d50\u69cb\u548c\u547d\u540d\u6163\u4f8b\u3002</p>"},{"location":"testing/07-best-practice/#_3","title":"\u6e2c\u8a66\u76ee\u9304\u7d50\u69cb","text":"<p>\u63a8\u85a6\u7684\u6e2c\u8a66\u76ee\u9304\u7d50\u69cb\u61c9\u8a72\u53cd\u6620\u61c9\u7528\u7a0b\u5e8f\u7684\u7d50\u69cb\uff0c\u4f7f\u6e2c\u8a66\u548c\u88ab\u6e2c\u8a66\u7684\u4ee3\u78bc\u4e4b\u9593\u7684\u95dc\u4fc2\u6e05\u6670\u53ef\u898b\uff1a</p> <pre><code>project/\n\u251c\u2500\u2500 app/\n\u2502   \u251c\u2500\u2500 api/\n\u2502   \u251c\u2500\u2500 core/\n\u2502   \u251c\u2500\u2500 models/\n\u2502   \u251c\u2500\u2500 services/\n\u2502   \u2514\u2500\u2500 utils/\n\u251c\u2500\u2500 tests/\n\u2502   \u251c\u2500\u2500 api/\n\u2502   \u251c\u2500\u2500 core/\n\u2502   \u251c\u2500\u2500 models/\n\u2502   \u251c\u2500\u2500 services/\n\u2502   \u251c\u2500\u2500 utils/\n\u2502   \u2514\u2500\u2500 conftest.py\n\u2514\u2500\u2500 pytest.ini\n</code></pre>"},{"location":"testing/07-best-practice/#_4","title":"\u6e2c\u8a66\u547d\u540d\u6163\u4f8b","text":"<p>\u6e2c\u8a66\u6587\u4ef6\u548c\u51fd\u6578\u7684\u547d\u540d\u61c9\u8a72\u6e05\u6670\u5730\u8868\u660e\u5b83\u5011\u6e2c\u8a66\u7684\u5167\u5bb9\uff1a</p> <pre><code># \u6e2c\u8a66\u6587\u4ef6\u547d\u540d\ntest_user_router.py  # \u6e2c\u8a66 user_router.py\ntest_auth_service.py  # \u6e2c\u8a66 auth_service.py\n\n# \u6e2c\u8a66\u51fd\u6578\u547d\u540d\ndef test_create_user_success():  # \u6e2c\u8a66\u6210\u529f\u5275\u5efa\u7528\u6236\ndef test_create_user_duplicate_email():  # \u6e2c\u8a66\u5275\u5efa\u5177\u6709\u91cd\u8907\u96fb\u5b50\u90f5\u4ef6\u7684\u7528\u6236\ndef test_get_user_not_found():  # \u6e2c\u8a66\u7372\u53d6\u4e0d\u5b58\u5728\u7684\u7528\u6236\n</code></pre>"},{"location":"testing/07-best-practice/#_5","title":"\u6e2c\u8a66\u9694\u96e2","text":"<p>\u6bcf\u500b\u6e2c\u8a66\u61c9\u8a72\u662f\u7368\u7acb\u7684\uff0c\u4e0d\u4f9d\u8cf4\u65bc\u5176\u4ed6\u6e2c\u8a66\u7684\u57f7\u884c\u9806\u5e8f\u6216\u7d50\u679c\u3002\u9019\u78ba\u4fdd\u4e86\u6e2c\u8a66\u53ef\u4ee5\u55ae\u7368\u904b\u884c\uff0c\u4e26\u4e14\u5931\u6557\u7684\u6e2c\u8a66\u4e0d\u6703\u5f71\u97ff\u5176\u4ed6\u6e2c\u8a66\u3002</p>"},{"location":"testing/07-best-practice/#_6","title":"\u4f7f\u7528\u593e\u5177\u9032\u884c\u8a2d\u7f6e\u548c\u6e05\u7406","text":"<pre><code># tests/conftest.py\nimport pytest\nfrom fastapi.testclient import TestClient\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\nfrom sqlalchemy.pool import StaticPool\n\nfrom app.core.database import Base, get_db\nfrom app.main import app\n\n@pytest.fixture(scope=\"function\")\ndef db_session():\n    # \u5275\u5efa\u5167\u5b58\u6578\u64da\u5eab\n    engine = create_engine(\n        \"sqlite:///:memory:\",\n        connect_args={\"check_same_thread\": False},\n        poolclass=StaticPool,\n    )\n    TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\n    # \u5275\u5efa\u8868\n    Base.metadata.create_all(bind=engine)\n\n    # \u5275\u5efa\u6703\u8a71\n    db = TestingSessionLocal()\n    try:\n        yield db\n    finally:\n        # \u6e05\u7406\n        db.close()\n        Base.metadata.drop_all(bind=engine)\n\n@pytest.fixture(scope=\"function\")\ndef client(db_session):\n    # \u8986\u84cb\u4f9d\u8cf4\u9805\n    def override_get_db():\n        try:\n            yield db_session\n        finally:\n            pass\n\n    app.dependency_overrides[get_db] = override_get_db\n\n    with TestClient(app) as client:\n        yield client\n\n    # \u6e05\u7406\u4f9d\u8cf4\u8986\u84cb\n    app.dependency_overrides = {}\n</code></pre>"},{"location":"testing/07-best-practice/#_7","title":"\u4f7f\u7528\u4e8b\u52d9\u56de\u6efe\u78ba\u4fdd\u6e2c\u8a66\u9694\u96e2","text":"<pre><code>@pytest.fixture(scope=\"function\")\ndef transactional_db_session(db_session):\n    # \u958b\u59cb\u4e8b\u52d9\n    db_session.begin_nested()\n\n    yield db_session\n\n    # \u56de\u6efe\u4e8b\u52d9\n    db_session.rollback()\n</code></pre>"},{"location":"testing/07-best-practice/#_8","title":"\u6e2c\u8a66\u6578\u64da\u7ba1\u7406","text":"<p>\u6e2c\u8a66\u6578\u64da\u7684\u7ba1\u7406\u662f\u6e2c\u8a66\u7684\u91cd\u8981\u90e8\u5206\uff0c\u826f\u597d\u7684\u6e2c\u8a66\u6578\u64da\u7ba1\u7406\u53ef\u4ee5\u4f7f\u6e2c\u8a66\u66f4\u52a0\u53ef\u9760\u548c\u53ef\u7dad\u8b77\u3002</p>"},{"location":"testing/07-best-practice/#_9","title":"\u4f7f\u7528\u5de5\u5ee0\u51fd\u6578\u5275\u5efa\u6e2c\u8a66\u6578\u64da","text":"<pre><code># tests/factories.py\nfrom app.models.user import User\nfrom app.models.item import Item\n\ndef create_test_user(db, username=\"testuser\", email=\"test@example.com\", password=\"password\"):\n    \"\"\"\u5275\u5efa\u6e2c\u8a66\u7528\u6236\"\"\"\n    user = User(username=username, email=email)\n    user.set_password(password)\n    db.add(user)\n    db.commit()\n    db.refresh(user)\n    return user\n\ndef create_test_item(db, name=\"Test Item\", description=\"Test Description\", price=9.99, owner_id=None):\n    \"\"\"\u5275\u5efa\u6e2c\u8a66\u9805\u76ee\"\"\"\n    item = Item(name=name, description=description, price=price, owner_id=owner_id)\n    db.add(item)\n    db.commit()\n    db.refresh(item)\n    return item\n</code></pre>"},{"location":"testing/07-best-practice/#_10","title":"\u4f7f\u7528\u593e\u5177\u63d0\u4f9b\u6e2c\u8a66\u6578\u64da","text":"<pre><code># tests/conftest.py\nimport pytest\nfrom tests.factories import create_test_user, create_test_item\n\n@pytest.fixture\ndef test_user(db_session):\n    return create_test_user(db_session)\n\n@pytest.fixture\ndef test_items(db_session, test_user):\n    items = []\n    for i in range(3):\n        items.append(create_test_item(db_session, name=f\"Item {i}\", owner_id=test_user.id))\n    return items\n</code></pre>"},{"location":"testing/07-best-practice/#_11","title":"\u6e2c\u8a66\u8986\u84cb\u7387","text":"<p>\u6e2c\u8a66\u8986\u84cb\u7387\u662f\u8861\u91cf\u4ee3\u78bc\u88ab\u6e2c\u8a66\u7684\u7a0b\u5ea6\u7684\u6307\u6a19\u3002\u9ad8\u6e2c\u8a66\u8986\u84cb\u7387\u901a\u5e38\u610f\u5473\u8457\u66f4\u5c11\u7684\u672a\u767c\u73fe\u7684\u932f\u8aa4\u3002</p>"},{"location":"testing/07-best-practice/#pytest-cov","title":"\u4f7f\u7528 pytest-cov \u6e2c\u91cf\u8986\u84cb\u7387","text":"<pre><code>pip install pytest-cov\n</code></pre> <pre><code># \u904b\u884c\u6e2c\u8a66\u4e26\u751f\u6210\u8986\u84cb\u7387\u5831\u544a\npytest --cov=app tests/\n</code></pre>"},{"location":"testing/07-best-practice/#_12","title":"\u8a2d\u7f6e\u8986\u84cb\u7387\u95be\u503c","text":"<pre><code># pytest.ini\n[pytest]\ntestpaths = tests\npython_files = test_*.py\npython_functions = test_*\naddopts = --cov=app --cov-report=term-missing --cov-fail-under=80\n</code></pre>"},{"location":"testing/07-best-practice/#_13","title":"\u53c3\u6578\u5316\u6e2c\u8a66","text":"<p>\u53c3\u6578\u5316\u6e2c\u8a66\u5141\u8a31\u4f7f\u7528\u4e0d\u540c\u7684\u8f38\u5165\u503c\u904b\u884c\u76f8\u540c\u7684\u6e2c\u8a66\u4ee3\u78bc\uff0c\u6e1b\u5c11\u91cd\u8907\u4ee3\u78bc\u3002</p>"},{"location":"testing/07-best-practice/#pytestmarkparametrize","title":"\u4f7f\u7528 pytest.mark.parametrize","text":"<pre><code># tests/api/test_user_validation.py\nimport pytest\nfrom fastapi.testclient import TestClient\nfrom app.main import app\n\nclient = TestClient(app)\n\n@pytest.mark.parametrize(\n    \"username,email,password,status_code,error_message\",\n    [\n        (\"\", \"test@example.com\", \"password\", 422, \"username\"),  # \u7a7a\u7528\u6236\u540d\n        (\"testuser\", \"\", \"password\", 422, \"email\"),  # \u7a7a\u96fb\u5b50\u90f5\u4ef6\n        (\"testuser\", \"test@example.com\", \"\", 422, \"password\"),  # \u7a7a\u5bc6\u78bc\n        (\"te\", \"test@example.com\", \"password\", 422, \"username\"),  # \u7528\u6236\u540d\u592a\u77ed\n        (\"testuser\", \"invalid-email\", \"password\", 422, \"email\"),  # \u7121\u6548\u7684\u96fb\u5b50\u90f5\u4ef6\n        (\"testuser\", \"test@example.com\", \"pass\", 422, \"password\"),  # \u5bc6\u78bc\u592a\u77ed\n    ],\n)\ndef test_create_user_validation(username, email, password, status_code, error_message):\n    response = client.post(\n        \"/users/\",\n        json={\"username\": username, \"email\": email, \"password\": password},\n    )\n    assert response.status_code == status_code\n    assert error_message in response.text\n</code></pre>"},{"location":"testing/07-best-practice/#_14","title":"\u6e2c\u8a66\u901f\u5ea6\u512a\u5316","text":"<p>\u6e2c\u8a66\u901f\u5ea6\u662f\u958b\u767c\u6548\u7387\u7684\u91cd\u8981\u56e0\u7d20\u3002\u5feb\u901f\u7684\u6e2c\u8a66\u5957\u4ef6\u53ef\u4ee5\u66f4\u983b\u7e41\u5730\u904b\u884c\uff0c\u63d0\u4f9b\u66f4\u5feb\u7684\u53cd\u994b\u3002</p>"},{"location":"testing/07-best-practice/#_15","title":"\u4f7f\u7528\u5167\u5b58\u6578\u64da\u5eab","text":"<pre><code># tests/conftest.py\nimport pytest\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\nfrom sqlalchemy.pool import StaticPool\n\n@pytest.fixture(scope=\"session\")\ndef engine():\n    return create_engine(\n        \"sqlite:///:memory:\",\n        connect_args={\"check_same_thread\": False},\n        poolclass=StaticPool,\n    )\n</code></pre>"},{"location":"testing/07-best-practice/#_16","title":"\u4f7f\u7528\u6e2c\u8a66\u6a19\u8a18\u9078\u64c7\u6027\u904b\u884c\u6e2c\u8a66","text":"<pre><code># tests/api/test_slow_endpoints.py\nimport pytest\n\n@pytest.mark.slow\ndef test_slow_operation():\n    # \u9019\u662f\u4e00\u500b\u904b\u884c\u6642\u9593\u8f03\u9577\u7684\u6e2c\u8a66\n    ...\n\n# \u904b\u884c\u9664\u4e86\u6a19\u8a18\u70ba slow \u7684\u6240\u6709\u6e2c\u8a66\n# pytest -k \"not slow\"\n</code></pre>"},{"location":"testing/07-best-practice/#_17","title":"\u4e26\u884c\u904b\u884c\u6e2c\u8a66","text":"<pre><code>pip install pytest-xdist\n</code></pre> <pre><code># \u4f7f\u7528 4 \u500b\u4e26\u884c\u9032\u7a0b\u904b\u884c\u6e2c\u8a66\npytest -n 4\n</code></pre>"},{"location":"testing/07-best-practice/#_18","title":"\u6e2c\u8a66\u53ef\u8b80\u6027\u548c\u53ef\u7dad\u8b77\u6027","text":"<p>\u53ef\u8b80\u6027\u548c\u53ef\u7dad\u8b77\u6027\u662f\u826f\u597d\u6e2c\u8a66\u7684\u95dc\u9375\u7279\u6027\u3002\u6e2c\u8a66\u61c9\u8a72\u6613\u65bc\u7406\u89e3\u548c\u7dad\u8b77\u3002</p>"},{"location":"testing/07-best-practice/#_19","title":"\u4f7f\u7528\u63cf\u8ff0\u6027\u7684\u65b7\u8a00\u6d88\u606f","text":"<pre><code># tests/api/test_user_api.py\ndef test_get_user_by_id(client, test_user):\n    response = client.get(f\"/users/{test_user.id}\")\n    assert response.status_code == 200, f\"Failed to get user with ID {test_user.id}\"\n\n    user_data = response.json()\n    assert user_data[\"username\"] == test_user.username, f\"Username mismatch: {user_data['username']} != {test_user.username}\"\n    assert user_data[\"email\"] == test_user.email, f\"Email mismatch: {user_data['email']} != {test_user.email}\"\n</code></pre>"},{"location":"testing/07-best-practice/#_20","title":"\u4f7f\u7528\u8f14\u52a9\u51fd\u6578\u7c21\u5316\u6e2c\u8a66","text":"<pre><code># tests/utils/test_helpers.py\ndef assert_user_response(response_data, expected_user):\n    \"\"\"\u9a57\u8b49\u7528\u6236\u97ff\u61c9\u6578\u64da\u662f\u5426\u8207\u9810\u671f\u7528\u6236\u5339\u914d\"\"\"\n    assert response_data[\"id\"] == expected_user.id\n    assert response_data[\"username\"] == expected_user.username\n    assert response_data[\"email\"] == expected_user.email\n    assert \"password\" not in response_data\n\n# \u5728\u6e2c\u8a66\u4e2d\u4f7f\u7528\ndef test_get_user(client, test_user):\n    response = client.get(f\"/users/{test_user.id}\")\n    assert response.status_code == 200\n    assert_user_response(response.json(), test_user)\n</code></pre>"},{"location":"testing/07-best-practice/#_21","title":"\u6e2c\u8a66\u5b89\u5168\u6027","text":"<p>\u6e2c\u8a66\u61c9\u8a72\u78ba\u4fdd\u61c9\u7528\u7a0b\u5e8f\u7684\u5b89\u5168\u6027\uff0c\u5305\u62ec\u8eab\u4efd\u9a57\u8b49\u3001\u6388\u6b0a\u548c\u6578\u64da\u9a57\u8b49\u3002</p>"},{"location":"testing/07-best-practice/#_22","title":"\u6e2c\u8a66\u8eab\u4efd\u9a57\u8b49","text":"<pre><code># tests/api/test_auth.py\ndef test_login_success(client, test_user):\n    response = client.post(\n        \"/auth/token\",\n        data={\"username\": test_user.username, \"password\": \"password\"},\n    )\n    assert response.status_code == 200\n    token_data = response.json()\n    assert \"access_token\" in token_data\n    assert token_data[\"token_type\"] == \"bearer\"\n\ndef test_login_invalid_credentials(client, test_user):\n    response = client.post(\n        \"/auth/token\",\n        data={\"username\": test_user.username, \"password\": \"wrong-password\"},\n    )\n    assert response.status_code == 401\n    assert response.json()[\"detail\"] == \"Incorrect username or password\"\n</code></pre>"},{"location":"testing/07-best-practice/#_23","title":"\u6e2c\u8a66\u6388\u6b0a","text":"<pre><code># tests/api/test_protected_endpoints.py\ndef test_access_protected_endpoint_without_token(client):\n    response = client.get(\"/users/me\")\n    assert response.status_code == 401\n    assert response.json()[\"detail\"] == \"Not authenticated\"\n\ndef test_access_protected_endpoint_with_token(client, test_user):\n    # \u5148\u7372\u53d6\u4ee4\u724c\n    login_response = client.post(\n        \"/auth/token\",\n        data={\"username\": test_user.username, \"password\": \"password\"},\n    )\n    token = login_response.json()[\"access_token\"]\n\n    # \u4f7f\u7528\u4ee4\u724c\u8a2a\u554f\u53d7\u4fdd\u8b77\u7684\u7aef\u9ede\n    response = client.get(\n        \"/users/me\",\n        headers={\"Authorization\": f\"Bearer {token}\"},\n    )\n    assert response.status_code == 200\n    assert response.json()[\"id\"] == test_user.id\n</code></pre>"},{"location":"testing/07-best-practice/#api","title":"\u6e2c\u8a66 API \u6587\u6a94","text":"<p>FastAPI \u81ea\u52d5\u751f\u6210 API \u6587\u6a94\uff0c\u6211\u5011\u61c9\u8a72\u6e2c\u8a66\u9019\u4e9b\u6587\u6a94\u662f\u5426\u6b63\u78ba\u53ef\u8a2a\u554f\u3002</p> <pre><code># tests/api/test_docs.py\ndef test_docs_accessibility(client):\n    response = client.get(\"/docs\")\n    assert response.status_code == 200\n    assert \"text/html\" in response.headers[\"content-type\"]\n\ndef test_openapi_schema(client):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    schema = response.json()\n    assert \"paths\" in schema\n    assert \"components\" in schema\n    assert \"schemas\" in schema[\"components\"]\n</code></pre>"},{"location":"testing/07-best-practice/#_24","title":"\u6e2c\u8a66\u65e5\u8a8c\u548c\u76e3\u63a7","text":"<p>\u6e2c\u8a66\u61c9\u8a72\u78ba\u4fdd\u61c9\u7528\u7a0b\u5e8f\u7684\u65e5\u8a8c\u548c\u76e3\u63a7\u529f\u80fd\u6b63\u5e38\u5de5\u4f5c\u3002</p>"},{"location":"testing/07-best-practice/#_25","title":"\u6e2c\u8a66\u65e5\u8a8c\u8a18\u9304","text":"<pre><code># tests/utils/test_logging.py\nimport logging\nfrom unittest.mock import patch\nfrom app.utils.logger import log_request\n\ndef test_log_request(caplog):\n    # \u8a2d\u7f6e\u65e5\u8a8c\u6355\u7372\n    caplog.set_level(logging.INFO)\n\n    # \u5275\u5efa\u6a21\u64ec\u8acb\u6c42\n    request = {\"method\": \"GET\", \"url\": \"/api/users\", \"client\": {\"host\": \"127.0.0.1\"}}\n\n    # \u8abf\u7528\u65e5\u8a8c\u51fd\u6578\n    log_request(request)\n\n    # \u9a57\u8b49\u65e5\u8a8c\u8a18\u9304\n    assert \"GET /api/users from 127.0.0.1\" in caplog.text\n</code></pre>"},{"location":"testing/07-best-practice/#_26","title":"\u6e2c\u8a66\u76e3\u63a7\u6307\u6a19","text":"<pre><code># tests/utils/test_metrics.py\nfrom unittest.mock import patch\nfrom app.utils.metrics import increment_request_counter\n\ndef test_increment_request_counter():\n    with patch(\"app.utils.metrics.prometheus_client.Counter.inc\") as mock_inc:\n        # \u8abf\u7528\u6307\u6a19\u51fd\u6578\n        increment_request_counter(\"/api/users\", \"GET\")\n\n        # \u9a57\u8b49\u6307\u6a19\u589e\u52a0\n        mock_inc.assert_called_once_with(1, {\"path\": \"/api/users\", \"method\": \"GET\"})\n</code></pre>"},{"location":"testing/07-best-practice/#_27","title":"\u6e2c\u8a66\u74b0\u5883\u914d\u7f6e","text":"<p>\u4e0d\u540c\u7684\u74b0\u5883\uff08\u958b\u767c\u3001\u6e2c\u8a66\u3001\u751f\u7522\uff09\u9700\u8981\u4e0d\u540c\u7684\u914d\u7f6e\u3002\u6e2c\u8a66\u61c9\u8a72\u78ba\u4fdd\u61c9\u7528\u7a0b\u5e8f\u5728\u4e0d\u540c\u74b0\u5883\u4e2d\u6b63\u78ba\u914d\u7f6e\u3002</p>"},{"location":"testing/07-best-practice/#_28","title":"\u6e2c\u8a66\u74b0\u5883\u8b8a\u91cf\u52a0\u8f09","text":"<pre><code># tests/core/test_config.py\nfrom unittest.mock import patch\nimport os\nfrom app.core.config import Settings\n\ndef test_settings_from_env_vars():\n    # \u8a2d\u7f6e\u74b0\u5883\u8b8a\u91cf\n    env_vars = {\n        \"APP_NAME\": \"Test App\",\n        \"DATABASE_URL\": \"postgresql://test:test@localhost/test\",\n        \"SECRET_KEY\": \"test_secret_key\",\n        \"DEBUG\": \"False\",\n    }\n\n    with patch.dict(os.environ, env_vars):\n        # \u52a0\u8f09\u8a2d\u7f6e\n        settings = Settings()\n\n        # \u9a57\u8b49\u8a2d\u7f6e\n        assert settings.app_name == \"Test App\"\n        assert settings.database_url == \"postgresql://test:test@localhost/test\"\n        assert settings.secret_key == \"test_secret_key\"\n        assert settings.debug is False\n</code></pre>"},{"location":"testing/07-best-practice/#_29","title":"\u6301\u7e8c\u96c6\u6210\u8207\u6e2c\u8a66","text":"<p>\u6301\u7e8c\u96c6\u6210 (CI) \u662f\u78ba\u4fdd\u4ee3\u78bc\u8cea\u91cf\u7684\u91cd\u8981\u5be6\u8e10\u3002\u6e2c\u8a66\u61c9\u8a72\u5728 CI \u74b0\u5883\u4e2d\u81ea\u52d5\u904b\u884c\u3002</p>"},{"location":"testing/07-best-practice/#github-actions","title":"GitHub Actions \u914d\u7f6e","text":"<pre><code># .github/workflows/test.yml\nname: Test\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    services:\n      postgres:\n        image: postgres:13\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: postgres\n          POSTGRES_DB: test_db\n        ports:\n          - 5432:5432\n        options: &gt;-\n          --health-cmd pg_isready\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n\n    steps:\n    - uses: actions/checkout@v2\n\n    - name: Set up Python\n      uses: actions/setup-python@v2\n      with:\n        python-version: 3.9\n\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install -r requirements.txt\n        pip install -r requirements-dev.txt\n\n    - name: Run tests\n      env:\n        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db\n        SECRET_KEY: test_secret_key\n      run: |\n        pytest --cov=app --cov-report=xml\n\n    - name: Upload coverage to Codecov\n      uses: codecov/codecov-action@v1\n</code></pre>"},{"location":"testing/07-best-practice/#tdd","title":"\u6e2c\u8a66\u9a45\u52d5\u958b\u767c (TDD)","text":"<p>\u6e2c\u8a66\u9a45\u52d5\u958b\u767c\u662f\u4e00\u7a2e\u958b\u767c\u65b9\u6cd5\uff0c\u5148\u7de8\u5beb\u6e2c\u8a66\uff0c\u7136\u5f8c\u7de8\u5beb\u6eff\u8db3\u6e2c\u8a66\u7684\u4ee3\u78bc\u3002</p>"},{"location":"testing/07-best-practice/#tdd_1","title":"TDD \u5de5\u4f5c\u6d41\u7a0b","text":"<ol> <li>\u7de8\u5beb\u6e2c\u8a66\uff1a\u5148\u7de8\u5beb\u6e2c\u8a66\uff0c\u63cf\u8ff0\u9810\u671f\u884c\u70ba\u3002</li> <li>\u904b\u884c\u6e2c\u8a66\uff1a\u78ba\u8a8d\u6e2c\u8a66\u5931\u6557\u3002</li> <li>\u7de8\u5beb\u4ee3\u78bc\uff1a\u7de8\u5beb\u6700\u5c11\u7684\u4ee3\u78bc\u4f7f\u6e2c\u8a66\u901a\u904e\u3002</li> <li>\u91cd\u69cb\uff1a\u6539\u9032\u4ee3\u78bc\uff0c\u78ba\u4fdd\u6e2c\u8a66\u4ecd\u7136\u901a\u904e\u3002</li> <li>\u91cd\u8907\uff1a\u7e7c\u7e8c\u4e0b\u4e00\u500b\u529f\u80fd\u3002</li> </ol> <pre><code># 1. \u7de8\u5beb\u6e2c\u8a66\n# tests/services/test_user_service.py\ndef test_create_user(db_session):\n    from app.services.user_service import create_user\n\n    # \u6e96\u5099\u6e2c\u8a66\u6578\u64da\n    user_data = {\n        \"username\": \"newuser\",\n        \"email\": \"newuser@example.com\",\n        \"password\": \"password123\"\n    }\n\n    # \u8abf\u7528\u88ab\u6e2c\u8a66\u7684\u51fd\u6578\n    user = create_user(db_session, user_data)\n\n    # \u9a57\u8b49\u7d50\u679c\n    assert user.id is not None\n    assert user.username == \"newuser\"\n    assert user.email == \"newuser@example.com\"\n    assert user.verify_password(\"password123\")\n\n# 2. \u904b\u884c\u6e2c\u8a66 (\u6703\u5931\u6557)\n# pytest tests/services/test_user_service.py\n\n# 3. \u7de8\u5beb\u4ee3\u78bc\n# app/services/user_service.py\nfrom app.models.user import User\n\ndef create_user(db, user_data):\n    user = User(\n        username=user_data[\"username\"],\n        email=user_data[\"email\"]\n    )\n    user.set_password(user_data[\"password\"])\n\n    db.add(user)\n    db.commit()\n    db.refresh(user)\n\n    return user\n\n# 4. \u91cd\u69cb (\u5982\u679c\u9700\u8981)\n# 5. \u91cd\u8907\n</code></pre>"},{"location":"testing/07-best-practice/#_30","title":"\u6e2c\u8a66\u7b56\u7565","text":"<p>\u4e00\u500b\u5168\u9762\u7684\u6e2c\u8a66\u7b56\u7565\u61c9\u8a72\u5305\u62ec\u4e0d\u540c\u985e\u578b\u7684\u6e2c\u8a66\uff0c\u6bcf\u7a2e\u985e\u578b\u5c08\u6ce8\u65bc\u4e0d\u540c\u7684\u65b9\u9762\u3002</p>"},{"location":"testing/07-best-practice/#_31","title":"\u6e2c\u8a66\u91d1\u5b57\u5854","text":"<p>\u6e2c\u8a66\u91d1\u5b57\u5854\u662f\u4e00\u7a2e\u6e2c\u8a66\u7b56\u7565\uff0c\u5efa\u8b70\u5927\u91cf\u7684\u55ae\u5143\u6e2c\u8a66\uff0c\u9069\u91cf\u7684\u96c6\u6210\u6e2c\u8a66\uff0c\u5c11\u91cf\u7684\u7aef\u5230\u7aef\u6e2c\u8a66\u3002</p> <pre><code>      /\\\n     /  \\\n    /    \\      \u7aef\u5230\u7aef\u6e2c\u8a66\n   /      \\\n  /--------\\\n /          \\    \u96c6\u6210\u6e2c\u8a66\n/            \\\n--------------\n|            |    \u55ae\u5143\u6e2c\u8a66\n|            |\n--------------\n</code></pre>"},{"location":"testing/07-best-practice/#_32","title":"\u55ae\u5143\u6e2c\u8a66","text":"<p>\u55ae\u5143\u6e2c\u8a66\u5c08\u6ce8\u65bc\u6e2c\u8a66\u55ae\u500b\u7d44\u4ef6\u6216\u51fd\u6578\u7684\u884c\u70ba\u3002</p> <pre><code># tests/utils/test_password.py\nfrom app.utils.password import hash_password, verify_password\n\ndef test_hash_password():\n    password = \"secure_password\"\n    hashed = hash_password(password)\n\n    # \u9a57\u8b49\u54c8\u5e0c\u4e0d\u7b49\u65bc\u539f\u59cb\u5bc6\u78bc\n    assert hashed != password\n\n    # \u9a57\u8b49\u54c8\u5e0c\u683c\u5f0f\u6b63\u78ba\n    assert hashed.startswith(\"$2b$\")\n\ndef test_verify_password():\n    password = \"secure_password\"\n    hashed = hash_password(password)\n\n    # \u9a57\u8b49\u6b63\u78ba\u5bc6\u78bc\n    assert verify_password(password, hashed) is True\n\n    # \u9a57\u8b49\u932f\u8aa4\u5bc6\u78bc\n    assert verify_password(\"wrong_password\", hashed) is False\n</code></pre>"},{"location":"testing/07-best-practice/#_33","title":"\u96c6\u6210\u6e2c\u8a66","text":"<p>\u96c6\u6210\u6e2c\u8a66\u5c08\u6ce8\u65bc\u6e2c\u8a66\u591a\u500b\u7d44\u4ef6\u4e00\u8d77\u5de5\u4f5c\u7684\u884c\u70ba\u3002</p> <pre><code># tests/api/test_user_creation_flow.py\ndef test_user_creation_flow(client, db_session):\n    # 1. \u5275\u5efa\u7528\u6236\n    user_data = {\n        \"username\": \"flowuser\",\n        \"email\": \"flowuser@example.com\",\n        \"password\": \"password123\"\n    }\n    response = client.post(\"/users/\", json=user_data)\n    assert response.status_code == 201\n    user_id = response.json()[\"id\"]\n\n    # 2. \u767b\u9304\n    login_response = client.post(\n        \"/auth/token\",\n        data={\"username\": \"flowuser\", \"password\": \"password123\"}\n    )\n    assert login_response.status_code == 200\n    token = login_response.json()[\"access_token\"]\n\n    # 3. \u7372\u53d6\u7528\u6236\u4fe1\u606f\n    me_response = client.get(\n        \"/users/me\",\n        headers={\"Authorization\": f\"Bearer {token}\"}\n    )\n    assert me_response.status_code == 200\n    assert me_response.json()[\"username\"] == \"flowuser\"\n</code></pre>"},{"location":"testing/07-best-practice/#_34","title":"\u7aef\u5230\u7aef\u6e2c\u8a66","text":"<p>\u7aef\u5230\u7aef\u6e2c\u8a66\u5c08\u6ce8\u65bc\u6e2c\u8a66\u6574\u500b\u7cfb\u7d71\u7684\u884c\u70ba\uff0c\u5f9e\u7528\u6236\u754c\u9762\u5230\u6578\u64da\u5eab\u3002</p> <pre><code># tests/e2e/test_user_journey.py\nimport pytest\nfrom playwright.sync_api import Page\n\n@pytest.mark.e2e\ndef test_user_registration_and_login(page: Page):\n    # \u8a2a\u554f\u8a3b\u518a\u9801\u9762\n    page.goto(\"http://localhost:8000/register\")\n\n    # \u586b\u5beb\u8a3b\u518a\u8868\u55ae\n    page.fill(\"input[name=username]\", \"e2euser\")\n    page.fill(\"input[name=email]\", \"e2euser@example.com\")\n    page.fill(\"input[name=password]\", \"password123\")\n    page.click(\"button[type=submit]\")\n\n    # \u9a57\u8b49\u6210\u529f\u8a0a\u606f\n    assert page.inner_text(\".success-message\") == \"Registration successful\"\n\n    # \u8a2a\u554f\u767b\u9304\u9801\u9762\n    page.goto(\"http://localhost:8000/login\")\n\n    # \u586b\u5beb\u767b\u9304\u8868\u55ae\n    page.fill(\"input[name=username]\", \"e2euser\")\n    page.fill(\"input[name=password]\", \"password123\")\n    page.click(\"button[type=submit]\")\n\n    # \u9a57\u8b49\u767b\u9304\u6210\u529f\n    assert page.inner_text(\".user-info\") == \"Welcome, e2euser\"\n</code></pre>"},{"location":"testing/07-best-practice/#_35","title":"\u6e2c\u8a66\u975e\u529f\u80fd\u9700\u6c42","text":"<p>\u9664\u4e86\u529f\u80fd\u9700\u6c42\u5916\uff0c\u9084\u61c9\u8a72\u6e2c\u8a66\u975e\u529f\u80fd\u9700\u6c42\uff0c\u5982\u6027\u80fd\u3001\u5b89\u5168\u6027\u548c\u53ef\u7528\u6027\u3002</p>"},{"location":"testing/07-best-practice/#_36","title":"\u6027\u80fd\u6e2c\u8a66","text":"<pre><code># tests/performance/test_api_performance.py\nimport time\nimport pytest\nfrom fastapi.testclient import TestClient\nfrom app.main import app\n\nclient = TestClient(app)\n\n@pytest.mark.performance\ndef test_api_response_time():\n    # \u6e2c\u91cf API \u97ff\u61c9\u6642\u9593\n    start_time = time.time()\n    response = client.get(\"/users/\")\n    end_time = time.time()\n\n    # \u9a57\u8b49\u97ff\u61c9\u6642\u9593\u5728\u53ef\u63a5\u53d7\u7bc4\u570d\u5167\n    response_time = end_time - start_time\n    assert response_time &lt; 0.1, f\"API response time too slow: {response_time:.2f} seconds\"\n</code></pre>"},{"location":"testing/07-best-practice/#_37","title":"\u8ca0\u8f09\u6e2c\u8a66","text":"<p>\u8ca0\u8f09\u6e2c\u8a66\u9700\u8981\u5c08\u9580\u7684\u5de5\u5177\uff0c\u5982 Locust \u6216 JMeter\u3002\u9019\u88e1\u662f\u4e00\u500b\u7c21\u55ae\u7684 Locust \u6e2c\u8a66\u793a\u4f8b\uff1a</p> <pre><code># locustfile.py\nfrom locust import HttpUser, task, between\n\nclass WebsiteUser(HttpUser):\n    wait_time = between(1, 3)\n\n    @task\n    def get_users(self):\n        self.client.get(\"/users/\")\n\n    @task\n    def get_items(self):\n        self.client.get(\"/items/\")\n\n    @task\n    def login(self):\n        self.client.post(\n            \"/auth/token\",\n            data={\"username\": \"testuser\", \"password\": \"password\"}\n        )\n</code></pre>"},{"location":"testing/07-best-practice/#_38","title":"\u6e2c\u8a66\u6587\u6a94\u548c\u5831\u544a","text":"<p>\u6e2c\u8a66\u6587\u6a94\u548c\u5831\u544a\u662f\u78ba\u4fdd\u6e2c\u8a66\u53ef\u7406\u89e3\u548c\u53ef\u8ffd\u8e64\u7684\u91cd\u8981\u90e8\u5206\u3002</p>"},{"location":"testing/07-best-practice/#pytest-html","title":"\u4f7f\u7528 pytest-html \u751f\u6210\u5831\u544a","text":"<pre><code>pip install pytest-html\n</code></pre> <pre><code># \u751f\u6210 HTML \u5831\u544a\npytest --html=report.html --self-contained-html\n</code></pre>"},{"location":"testing/07-best-practice/#doctest","title":"\u4f7f\u7528 doctest \u6e2c\u8a66\u6587\u6a94","text":"<pre><code># app/utils/math_utils.py\ndef add(a, b):\n    \"\"\"\n    \u5c07\u5169\u500b\u6578\u5b57\u76f8\u52a0\u4e26\u8fd4\u56de\u7d50\u679c\u3002\n\n    &gt;&gt;&gt; add(1, 2)\n    3\n    &gt;&gt;&gt; add(-1, 1)\n    0\n    &gt;&gt;&gt; add(0, 0)\n    0\n    \"\"\"\n    return a + b\n</code></pre> <pre><code># \u904b\u884c doctest\npytest --doctest-modules app/utils/math_utils.py\n</code></pre>"},{"location":"testing/07-best-practice/#_39","title":"\u7e3d\u7d50","text":"<p>\u6e2c\u8a66\u662f\u8edf\u4ef6\u958b\u767c\u7684\u91cd\u8981\u90e8\u5206\uff0c\u826f\u597d\u7684\u6e2c\u8a66\u5be6\u8e10\u53ef\u4ee5\u63d0\u9ad8\u4ee3\u78bc\u8cea\u91cf\uff0c\u6e1b\u5c11\u932f\u8aa4\uff0c\u4e26\u4f7f\u4ee3\u78bc\u66f4\u6613\u65bc\u7dad\u8b77\u3002\u5728 FastAPI \u61c9\u7528\u7a0b\u5e8f\u4e2d\uff0c\u6e2c\u8a66\u61c9\u8a72\u6db5\u84cb API \u7aef\u9ede\u3001\u670d\u52d9\u5c64\u3001\u6578\u64da\u8a2a\u554f\u5c64\u548c\u5de5\u5177\u51fd\u6578\u3002</p> <p>\u95dc\u9375\u9ede\uff1a</p> <ol> <li>\u6e2c\u8a66\u67b6\u69cb\u8207\u7d44\u7e54\uff1a\u9075\u5faa\u4e00\u81f4\u7684\u76ee\u9304\u7d50\u69cb\u548c\u547d\u540d\u6163\u4f8b\u3002</li> <li>\u6e2c\u8a66\u9694\u96e2\uff1a\u78ba\u4fdd\u6bcf\u500b\u6e2c\u8a66\u662f\u7368\u7acb\u7684\uff0c\u4e0d\u4f9d\u8cf4\u65bc\u5176\u4ed6\u6e2c\u8a66\u3002</li> <li>\u6e2c\u8a66\u6578\u64da\u7ba1\u7406\uff1a\u4f7f\u7528\u5de5\u5ee0\u51fd\u6578\u548c\u593e\u5177\u7ba1\u7406\u6e2c\u8a66\u6578\u64da\u3002</li> <li>\u6e2c\u8a66\u8986\u84cb\u7387\uff1a\u8ffd\u8e64\u4e26\u63d0\u9ad8\u6e2c\u8a66\u8986\u84cb\u7387\u3002</li> <li>\u53c3\u6578\u5316\u6e2c\u8a66\uff1a\u4f7f\u7528\u53c3\u6578\u5316\u6e2c\u8a66\u6e1b\u5c11\u91cd\u8907\u4ee3\u78bc\u3002</li> <li>\u6e2c\u8a66\u901f\u5ea6\u512a\u5316\uff1a\u4f7f\u7528\u5167\u5b58\u6578\u64da\u5eab\u548c\u4e26\u884c\u904b\u884c\u6e2c\u8a66\u63d0\u9ad8\u901f\u5ea6\u3002</li> <li>\u6e2c\u8a66\u53ef\u8b80\u6027\u548c\u53ef\u7dad\u8b77\u6027\uff1a\u4f7f\u7528\u63cf\u8ff0\u6027\u7684\u65b7\u8a00\u6d88\u606f\u548c\u8f14\u52a9\u51fd\u6578\u3002</li> <li>\u6e2c\u8a66\u5b89\u5168\u6027\uff1a\u6e2c\u8a66\u8eab\u4efd\u9a57\u8b49\u3001\u6388\u6b0a\u548c\u6578\u64da\u9a57\u8b49\u3002</li> <li>\u6301\u7e8c\u96c6\u6210\u8207\u6e2c\u8a66\uff1a\u5728 CI \u74b0\u5883\u4e2d\u81ea\u52d5\u904b\u884c\u6e2c\u8a66\u3002</li> <li>\u6e2c\u8a66\u9a45\u52d5\u958b\u767c\uff1a\u8003\u616e\u4f7f\u7528 TDD \u65b9\u6cd5\u958b\u767c\u65b0\u529f\u80fd\u3002</li> <li>\u6e2c\u8a66\u7b56\u7565\uff1a\u5be6\u65bd\u6e2c\u8a66\u91d1\u5b57\u5854\uff0c\u5305\u62ec\u55ae\u5143\u6e2c\u8a66\u3001\u96c6\u6210\u6e2c\u8a66\u548c\u7aef\u5230\u7aef\u6e2c\u8a66\u3002</li> <li>\u6e2c\u8a66\u975e\u529f\u80fd\u9700\u6c42\uff1a\u6e2c\u8a66\u6027\u80fd\u3001\u5b89\u5168\u6027\u548c\u53ef\u7528\u6027\u3002</li> <li>\u6e2c\u8a66\u6587\u6a94\u548c\u5831\u544a\uff1a\u751f\u6210\u6e2c\u8a66\u5831\u544a\u4e26\u4f7f\u7528 doctest \u6e2c\u8a66\u6587\u6a94\u3002</li> </ol> <p>\u901a\u904e\u9075\u5faa\u9019\u4e9b\u6700\u4f73\u5be6\u8e10\uff0c\u4f60\u53ef\u4ee5\u5efa\u7acb\u4e00\u500b\u5065\u58ef\u7684\u6e2c\u8a66\u5957\u4ef6\uff0c\u78ba\u4fdd FastAPI \u61c9\u7528\u7a0b\u5e8f\u7684\u8cea\u91cf\u548c\u7a69\u5b9a\u6027\u3002</p>"}]}